#include "bytecode-interpreter.h"
#include "interpreter-frame.h"
#include "interpreter-runtime.h"

#include "src/context.h"
#include "src/trace.h"
#include "src/os.h"
#include "src/config.h"

#include <algorithm>
#include <map>
#include <cassert>
#include <climits>

#include <Zydis/Zydis.h>

extern "C" {
double pow(double,double);
}

namespace lavascript {
namespace interpreter{

inline void SetValueFlag( Value* v , std::uint32_t flag ) {
  v->raw_ = static_cast<std::uint64_t>(flag) << 32;
}

inline std::uint32_t GetValueFlag( const Value& v ) {
  return static_cast<std::uint32_t>(v.raw_ >>32);
}

namespace {

// Used in dynasm library
int ResolveExternAddress( void**,unsigned char*,int,int );

// Workaround for ODR
#include "dep/dynasm/dasm_proto.h"

#define DASM_EXTERN_FUNC(a,b,c,d) ResolveExternAddress((void**)a,b,c,d)
#include "dep/dynasm/dasm_x86.h"

// -------------------------------------------------------------
// BuildContext
//
// Build phase context, used to *generate* templated interpreter
// -------------------------------------------------------------
struct BuildContext {
  dasm_State* dasm_ctx;
  int tag;

  BuildContext():
    dasm_ctx(NULL),
    tag(0)
  {}

  ~BuildContext() {
    if(dasm_ctx) dasm_free(&dasm_ctx);
  }
};


// Shut the GCC's mouth fucked up
template< typename T >
int HorribleCast( T* ptr ) {
  std::uint64_t iptr = reinterpret_cast<std::uint64_t>(ptr);
  int ret = static_cast<int>(iptr);
  lava_verify(reinterpret_cast<T*>(ret) == ptr);
  return ret;
}


// ------------------------------------------------------------------
// Prototype for the main interpreter function
//
// @ARG1: runtime
// @ARG2: Prototype** of the function
// @ARG3: start of the stack
// @ARG4: start of the code buffer for the *Prototype*
// @ARG5: start of the dispatch table
typedef bool (*Main)(Runtime*,Prototype**,void*,void*,void*);

// ------------------------------------------------------------------
// Helper function/macros to register its literal name into a global
// table to help resolve the function's address during assembly link
// phase
// ------------------------------------------------------------------
typedef std::map<std::string,void*> ExternSymbolTable;

ExternSymbolTable* GetExternSymbolTable() {
  static ExternSymbolTable kTable;
  return &kTable;
}

// Macro to register a external function's symbol name into global table
#define INTERPRETER_REGISTER_EXTERN_SYMBOL(XX)                               \
  struct XX##_Registry {                                                     \
    XX##_Registry() {                                                        \
      ExternSymbolTable* table = GetExternSymbolTable();                     \
      table->insert(std::make_pair(#XX,reinterpret_cast<void*>(&XX)));       \
    }                                                                        \
  };                                                                         \
  static XX##_Registry k##XX##_Registry;


// ------------------------------------------------------------------
// Builtin libc function exposure section
// ------------------------------------------------------------------
INTERPRETER_REGISTER_EXTERN_SYMBOL(pow)


// -------------------------------------------------------------------
// Helper to set Value object to indicate special meaning
// -------------------------------------------------------------------
#define VALUE_FAIL Value::FLAG_1

/* --------------------------------------------------------------------------
 *
 * Interpreter C++ Part Function Implementation
 *
 * -------------------------------------------------------------------------*/

// ----------------------------------------------------------------------------
// Type Conversion
// ----------------------------------------------------------------------------
inline Value InterpreterToBoolean  ( Runtime* sandbox , Value val ) {
  (void)sandbox;
  (void)val;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterToBoolean)


// --------------------------------------------------------------------------
// Arithmetic Helper
// --------------------------------------------------------------------------
Value InterpreterDoArithmetic( Runtime* sandbox ,
                               Value left ,  // rsi
                               Value right , // rdx
                               Bytecode bc ) {
  (void)sandbox;
  (void)left;
  (void)right;
  (void)bc;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoArithmetic)

Value InterpreterPow         ( Runtime* sandbox ,
                               Value left,
                               Value right,
                               Bytecode bc ) {
  (void)sandbox;
  (void)left;
  (void)right;
  (void)bc;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPow)

void InterpreterModByReal    ( Runtime* sandbox , std::uint32_t* pc ) {
  (void)sandbox;
  (void)pc;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterModByReal)

void InterpreterDivByZero    ( Runtime* sandbox , std::uint32_t* pc ) {
  (void)sandbox;
  (void)pc;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDivByZero)


// ---------------------------------------------------------------------------
// Comparison Helper
// ---------------------------------------------------------------------------
Value InterpreterDoCompare  ( Runtime* sandbox , Value left ,
                                                 Value right,
                                                 Bytecode bc ) {
  (void)sandbox;
  (void)left;
  (void)right;
  (void)bc;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCompare)

// ----------------------------------------------------------------------------
// Unary Helper
// ----------------------------------------------------------------------------
bool InterpreterDoNegate   ( Runtime* sandbox , Value* operand ) {
  (void)sandbox;
  (void)operand;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNegate)

bool InterpreterDoNot      ( Runtime* sandbox , Value* operand ) {
  (void)sandbox;
  (void)operand;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNot)

// ----------------------------------------------------------------------------
// Jump Helper
// ----------------------------------------------------------------------------
void* InterpreterDoCondJmpT  ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondJmpT)

void* InterpreterDoCondJmpF  ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondJmpF)


void* InterpreterDoCondAnd   ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondAnd)

void* InterpreterDoCondOr    ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondOr)

// ----------------------------------------------------------------------------
// Literal Loader Helper
// ----------------------------------------------------------------------------
bool InterpreterDoLoadList0  ( Runtime* sandbox , Value* output ) {
  (void)sandbox;
  (void)output;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadList0)

bool InterpreterDoLoadList1  ( Runtime* sandbox , Value* output ,
                                                  Value e1 ) {
  (void)sandbox;
  (void)output;
  (void)e1;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadList1)

bool InterpreterDoLoadList2  ( Runtime* sandbox , Value* output ,
                                                  Value e1,
                                                  Value e2 ) {
  (void)sandbox;
  (void)output;
  (void)e1;
  (void)e2;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadList2)

bool InterpreterDoNewList   ( Runtime* sandbox , Value* output ,
                                                  std::uint32_t narg ) {
  (void)sandbox;
  (void)output;
  (void)narg;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNewList)

bool InterpreterDoAddList   ( Runtime* sandbox , Value* output ,
                                                 Value  val ) {
  (void)sandbox;
  (void)output;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoAddList)

bool InterpreterDoLoadObj0   ( Runtime* sandbox , Value* output ) {
  (void)sandbox;
  (void)output;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadObj0)

bool InterpreterDoLoadObj1   ( Runtime* sandbox , Value* output ,
                                                  Value  key,
                                                  Value  val ) {
  (void)sandbox;
  (void)output;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadObj1)

bool InterpreterDoNewObj    ( Runtime* sandbox , Value* output ,
                                                 std::uint32_t narg ) {
  (void)sandbox;
  (void)output;
  (void)narg;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNewObj)

bool InterpreterDoAddObj    ( Runtime* sandbox , Value* output ,
                                                 Value  key,
                                                 Value  val ) {
  (void)sandbox;
  (void)output;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoAddObj)

bool InterpreterDoLoadCls   ( Runtime* sandbox , Value* start_of_stack ,
                                                 std::uint32_t prototype_id ) {
  (void)sandbox;
  (void)start_of_stack;
  (void)prototype_id;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadCls)

// ----------------------------------------------------------------------------
// Property Get/Set
// ----------------------------------------------------------------------------
Value InterpreterDoPropGet   ( Runtime* sandbox , Value obj , String** key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoPropGet)

void InterpreterPropGetNotFound( Runtime* sandbox , Value obj , String** key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGetNotFound)

void InterpreterPropGetNotObject( Runtime* sandbox, Value obj , String** key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGetNotObject)

bool InterpreterDoPropSet      ( Runtime* sandbox , Value obj , String** key ,
                                                                Value val ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoPropSet)

Value InterpreterDoIdxGet      ( Runtime* sandbox , Value obj , Value key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoIdxGet)

Value InterpreterDoIdxGetI     ( Runtime* sandbox , Value obj , std::int32_t idx ) {
  (void)sandbox;
  (void)obj;
  (void)idx;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoIdxGetI)

bool InterpreterDoIdxSet      ( Runtime* sandbox , Value obj , Value key ,
                                                               Value val ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoIdxSet)

bool InterpreterDoGGet       ( Runtime* sandbox , Value* output , String** key ) {
  (void)sandbox;
  (void)key;
  (void)output;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoGGet)

bool InterpreterDoGSet       ( Runtime* sandbox , String** key , Value value ) {
  (void)sandbox;
  (void)key;
  (void)value;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoGSet)


/* ---------------------------------------------------------------------
 *
 * Implementation of AssemblyIntepreter
 *
 * --------------------------------------------------------------------*/
|.arch x64
|.actionlist actions
|.globals GLBNAME_
|.globalnames glbnames
|.externnames extnames
|.section code,data

/* -------------------------------------------------------------------
 * Preprocessor option for dynasm
 * ------------------------------------------------------------------*/
|.define CHECK_DIV_BY_ZERO
|.define CHECK_NUMBER_MEMORY
|.define TRACE_OP
|.define USE_CMOV_COMP

/* -------------------------------------------------------------------
 * 64 bits call
 *
 * Since 64 bits call cannot accept a imm value due to it is too long,
 * we need to generate different *types* of call instruction based on
 * the callsite
 * -------------------------------------------------------------------*/
inline bool CheckAddress( std::uintptr_t addr ) {
  static const std::uintptr_t k2G = 0x80000000;
  if(addr > 0 && addr < k2G)
    return true;
  else
    return false;
}

|.macro fcall,FUNC
|| if(CheckAddress(reinterpret_cast<std::uintptr_t>(FUNC))) {
|    call extern FUNC
|| } else {
||   lava_warn("%s","Function FUNC address is not in 0-2GB");
|.if 0
// I don't know whether this is faster than use rax , need profile. I see
// this one is used in MoarVM. It uses memory address to work araoud the
// address space problem. But I am kind of unsure about it since it maybe
// because MoarVM already allocate rax for other things
|9:
|.dword (std::uint32_t)((std::uintptr_t)(FUNC)),(std::uint32_t)((std::uintptr_t)((FUNC)>>32))
|    call qword[<9]
|.else
|    mov64 rax, reinterpret_cast<std::uintptr_t>(FUNC)
|    call rax
|.endif
|| }
|.endmacro

/* ---------------------------------------------------------------
 * summary of register usage                                     |
 * --------------------------------------------------------------*/
// Runtime pointer
|.define RUNTIME,               r12   // callee saved

// Current prototype's GCRef pointer
|.define PROTO,                 r13   // callee saved

// Top stack's pointer
|.define STK,                   r14   // callee saved
|.define ACCIDX,                2040
|.define ACCFIDX,               2044
|.define ACC,                   STK+ACCIDX

// Dispatch table pointer
|.define DISPATCH,              r15  // callee saved

// Bytecode array
|.define PC,                    rbp  // callee saved

// Hold the decoded unit
|.define INSTR,                 eax
|.define INSTR_OP,              al
|.define INSTR_A8L,             al
|.define INSTR_A8H,             ah
|.define INSTR_A16,             ax

// Frame -------------------------------------------------------
// We store the frame sizeof(IFrame) above STK pointer
static_assert( sizeof(IFrame) == 16 );
|.define CFRAME,                STK-16
|.define FRAMELEN,              16

/** ------------------------------------------------------------
 *
 * NOTES: A notes on movzx/movsx instruction.
 *
 *        The movzx/movsx zero out or sign out the *whole* 64 bit
 *        register regardless the dest is a 32 bits or 64 bits
 *        register
 *
 * --------------------------------------------------------------*/

// Instruction's argument
|.define ARG1_8,                bl
|.define ARG1_16,               bx
|.define ARG1,                  ebx  // must *not* be 64 bits due to we use ah
|.define ARG1F,                 rbx

// Used to help decode function's call argument
|.define FARG,                  ebx  // aliased with ARG1
|.define FARG16,                bx
|.define FARG8L,                bl
|.define FARG8H,                bh

|.define ARG2_8,                al
|.define ARG2_16,               ax
|.define ARG2,                  eax
|.define ARG2F,                 rax

|.define ARG3_8,                cl
|.define ARG3_16,               cx
|.define ARG3,                  ecx
|.define ARG3F,                 rcx

// temporarily alias OP to be ARG3 because during the
// decoding time , we don't need to hold anything there
|.define OP,                    rcx

// temporary register are r10 and r11
|.define LREG,                  rsi
|.define LREGL,                 esi
|.define RREG,                  rdx
|.define RREGL,                 edx

|.define T1,                    r11
|.define T1L,                   r11d
|.define T1L16,                 r11w
|.define T2,                    r10
|.define T2L,                   r10d
|.define T2L16,                 r10w

// registers for normal C function calling ABI
|.define CARG1,                 rdi
|.define CARG2,                 rsi    // LREG
|.define CARG3,                 rdx    // RREG
|.define CARG4,                 rcx
|.define CARG5,                 r8
|.define CARG6,                 r9

|.define CARG1L,                edi
|.define CARG2L,                esi
|.define CARG3L,                edx
|.define CARG4L,                ecx
|.define CARG5L,                r8d
|.define CARG6L,                r9d

|.define CARG1LL,               dil
|.define CARG2LL,               sil
|.define CARG3LL,               dl
|.define CARG4LL,               cl
|.define CARG5LL,               r8b
|.define CARG6LL,               r9b

// saved callee registers plus some other important stuff
// 72 = 64 + (8 padding for function call)
|.define RESERVE_RSP,           72
|.define SAVED_RBX,             [rsp+48]
|.define SAVED_R12,             [rsp+40]
|.define SAVED_R13,             [rsp+32]
|.define SAVED_R14,             [rsp+24]
|.define SAVED_R15,             [rsp+16]
|.define SAVED_RBP,             [rsp+8]

// DO NOT MODIFY IT UNLESS YOU KNOW SHIT
|.define SAVED_PPC,             rsp
|.define SAVED_PC ,             [rsp]

// Used to save certain registers while we call cross the function
// boundary. Like we may call into ToBoolean function to get value
// of certain register's Boolean value and we may need to save register
// like rax which is part of our argument/operand of isntructions
|.define SAVED_SLOT1,           [rsp+56]
|.define SAVED_SLOT2,           [rsp+64]

/* ---------------------------------------------------------------
 * debug helper                                                  |
 * --------------------------------------------------------------*/
|.macro Break
|  int 3
|.endmacro

void PrintOP( int op ) {
  lava_error("OP:%s",GetBytecodeName(static_cast<Bytecode>(op)));
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintOP)

void Print2( int a , int b ) {
  lava_error("L:%d,R:%d",a,b);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(Print2)

void PrintF( double v ) {
  lava_error("Value:%f",v);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintF)

/* ---------------------------------------------------------------
 * dispatch table                                                |
 * --------------------------------------------------------------*/
|.macro Dispatch
|.if TRACE_OP
|  mov INSTR,dword [PC]
|  movzx OP,INSTR_OP
|  mov CARG1,OP
|  fcall PrintOP
|.endif
// IFETCH starts, one of the hottest code segement
// The top 4 instructions are ordered as 4-1-1-1 to optimize decoder so
// it can be decoded in one cycle.
|  mov INSTR,dword [PC]  // 2 uops
|  movzx OP,INSTR_OP     // 1 uops
|  add PC,4              // fused 1uops
|  shr INSTR,8           // fused 1uops
|  jmp aword [DISPATCH+OP*8]
|.endmacro

/* ---------------------------------------------------------------
 * decode each instruction's argument/operand                    |
 * --------------------------------------------------------------*/

|.macro instr_B
// cannot use ARG1F due to INSTR_A8 uses ah
|  movzx ARG1F,INSTR_A8L
|  shr INSTR,8
|.endmacro

|.macro instr_C
|  movzx ARG1F,INSTR_A16
|  shr INSTR,16
|.endmacro

|.macro instr_D
|  movzx ARG1F,INSTR_A8L
|  shr INSTR,8
// do not change ARG3 --> ARG3F even if it is better, due to the fact
// we cannot use ax register when rex prefix is used in instruction.
|  movzx ARG3,INSTR_A8H
|  or ARG2,0xff
|.endmacro

|.macro instr_E
|  movzx ARG1,INSTR_A8L
|  shr INSTR,8
|.endmacro

|.macro instr_F
|  movzx ARG1,INSTR_A8L
|.endmacro

|.macro instr_G
|  movzx ARG1F,INSTR_A16
|.endmacro

|.macro instr_X
|.endmacro

|.macro instr_N
|  instr_D
|.endmacro

/* -----------------------------------------------------------
 * Special Constant for Real                                 |
 * ----------------------------------------------------------*/
|.macro LdRConstH,XREG,HIGH
|  mov64 T1,(static_cast<std::uint64_t>(HIGH)<<32)
|  movd XREG,T1
|.endmacro

|.macro LdRConstL,XREG,LOW
|  mov64 T1,(static_cast<std::uint64_t>(LOW))
|  movd XREG,T1
|.endmacro

|.macro LdRConst,XREG,X64V
|  mov64 T1,X64V
|  movd  XREG,T1
|.endmacro

// Used to negate the double precision number's sign bit
|.macro LdRConst_sign,XREG; LdRConstH XREG,0x80000000; .endmacro

/* -----------------------------------------------------------
 * constant loading                                          |
 * ----------------------------------------------------------*/

// Currently our constant loading is *slow* due to the design of our GC
// and also the layout of each constant array. I think we have a way to
// optimize away one memory move. LuaJIT's constant loading is just one
// single instruction since they only get one constant array and they don't
// need to worry about GC move the reference
|.macro LdInt,reg,index
|  mov T1,qword [PROTO]
|  mov T2,qword [T1+PrototypeLayout::kIntTableOffset]
|  mov reg, [T2+index*4]
|.endmacro

// TODO:: Optimize this piece of shit
|.macro LdIntV,reg,regL,index
|  mov T1,qword [PROTO]
|  mov T2,qword [T1+PrototypeLayout::kIntTableOffset]

|.if 0
|  mov reg, Value::FLAG_INTEGER
|  shl reg,32
|  or regL,dword [T2+index*4]
|.else
|  mov64 reg, static_cast<std::uint64_t>(Value::TAG_INTEGER)
|  or regL,dword [T2+index*4]
|.endif

|.endmacro

|.macro LdReal,reg,index
|  mov T1,qword [PROTO]
|  mov T2,qword [T1+PrototypeLayout::kRealTableOffset]
|  movsd reg,qword[T2+index*8]
|.endmacro

|.macro LdRealV,reg,index
|  mov T1,qword [PROTO]
|  mov T2,qword [T1+PrototypeLayout::kRealTableOffset]
// not a xmm register
|  mov reg,qword[T2+index*8]
|.endmacro

|.macro LdInt2Real,reg,index
|  mov T1,qword [PROTO]
|  mov T2,qword [T1+PrototypeLayout::kIntTableOffset]
|  cvtsi2sd reg, dword [T2+index*4]
|.endmacro

|.macro StIntACC,reg
|  mov dword [STK+ACCIDX],reg
|  mov dword [STK+ACCFIDX],Value::FLAG_INTEGER
|.endmacro

|.macro StInt,index,reg
|  mov dword [STK+index*8],reg
|  mov dword [STK+index*8+4],Value::FLAG_INTEGER
|.endmacro

|.macro StRealACC,reg
|  movsd qword [ACC],reg
|.endmacro

// --------------------------------------------
// load upvalue value into register
|.macro LdUV,reg,index
|  mov T1,qword [RUNTIME+RuntimeLayout::kCurClsOffset]
|  mov T2,qword [T1+ClosureLayout::kUpValueOffset]
|  mov reg, qword [T2+index*8]
|.endmacro

|.macro StUV,index,reg
|  mov T1,qword [RUNTIME+RuntimeLayout::kCurClsOffset]
|  mov T2,qword [T1+ClosureLayout::kUpValueOffset]
|  mov qword [T2+index*8], reg
|.endmacro

|.macro CheckNum,index,val,real_label,int_label
// TODO:: profile these 2 implementations
|.if 1
|  cmp dword[STK+index*8+4],Value::FLAG_REAL
|  jb >real_label
|  cmp dword[STK+index*8+4],Value::FLAG_INTEGER
|  je >int_label
|.else
|  mov T1,val
|  shr T1,32
|  cmp T1L,Value::FLAG_REAL
|  jb >real_label
|  cmp T1L,Value::FLAG_INTEGER
|  je >int_label
|.endif
|.endmacro

// Check whether a Value is a HeapObject
|.macro CheckHeap,val,fail_label
|  mov T1,val
|  shr T1,48
|  cmp T1L, Value::FLAG_HEAP
|  jne >fail_label
|.endmacro

// Set a pointer into a register , this is really painful
|.macro StHeap,reg,val

|.if 1
|  mov reg,Value::FLAG_HEAP
|  shl reg,48
|  or reg ,val
|.else
|  mov reg,val
|  or  reg,qword [->ValueHeapMaskStore]
|.endif

|.endmacro

// Store a pointer into memory pointed by index
|.macro StHeapMem,index,ptr
|  mov qword[STK+index*8]  ,ptr
|  mov word [STK+index*8+6],Value::FLAG_HEAP
|.endmacro

// Load a pointer from Value object , assume this object
// is a pointer type
|.macro LdPtrFromV,dest,val
|.if 1
|  mov dest,Value::FLAG_HEAP_UNMASK
|  shl dest,48
|  or  dest,val
|.else
|  mov dest,val
|  or  dest,qword [->ValueHeapLoadMask]
|.endif
|.endmacro

|.macro DerefPtrFromV,v
|  or v, qword [->ValueHeapLoadMask]
|.endmacro

// It is painful to load a string into its Value format
|.macro LdStrV,val,index
|  mov T1 , qword [PROTO]
|  mov T2 , qword [T1+PrototypeLayout::kStringTableOffset]
|  mov T1 , qword [T2+index*8]
|  StHeap val,T1
|.endmacro

|.macro LdStr,val,index
|  mov T1 , qword [PROTO]
|  mov T2 , qword [T1+PrototypeLayout::kStringTableOffset]
|  mov val, qword [T2+index*8]
|.endmacro

// General macro to check a heap object is certain type
|.macro CheckHeapPtrT,val,pattern,fail_label
|  cmp byte [val-(HeapObjectHeader::kHeapObjectHeaderSize+6)], pattern
|  jne >fail_label
|.endmacro

|.macro CheckHeapT,val,pattern,fail_label
|  or val,qword [->ValueHeapMaskLoad]
|  mov val, qword [val]
|  CheckHeapPtrT val,pattern,fail_label
|.endmacro

// -------------------------------------------------------------------------
// Object bit pattern

#define OBJECT_BIT_PATTERN TYPE_OBJECT

#define LIST_BIT_PATTERN TYPE_LIST

#define SSO_BIT_PATTERN TYPE_STRING

#define CLOSURE_BIT_PATTERN TYPE_CLOSURE

#define EXTENSION_BIT_PATTERN TYPE_EXTENSION

// -------------------------------------------------------------------------
// Check an *GCRef* is Object or not

|.macro CheckObj,val,fail_label
|  CheckHeapT val,OBJECT_BIT_PATTERN,fail_label
|.endmacro

|.macro CheckObjV,val,fail_label
|  CheckHeap val,fail_label
|  CheckObj val,fail_label
|.endmacro

// --------------------------------------------------------------------------
// Check an *GCRef* is List or not

|.macro CheckList,val,fail_label
|  CheckHeapT val,LIST_BIT_PATTERN,fail_label
|.endmacro

|.macro CheckListV,val,fail_label
|  CheckHeap val,fail_label
|  CheckObj val,fail_label
|.endmacro

// --------------------------------------------------------------------------
// Check a *GCRef* is SSO or not , not stored in Value

// reg : pointer of String
|.macro CheckSSO,reg,fail
|  mov reg, qword [reg]
|  CheckHeapPtrT reg,SSO_BIT_PATTERN,fail
// dereference *once* from String* --> SSO*
|  mov reg, qword [reg]
|.endmacro

|.macro CheckSSOV,reg,fail
|  CheckHeap reg,fail
|  CheckHeapT,reg,SSO_BIT_PATTERN,fail
// dereference *once* from String* --> SSO*
|  mov reg, qword [reg]
|.endmacro

#define INTERP_HELPER_LIST(__) \
  /* arithmetic */                           \
  __(INTERP_START,InterpStart)               \
  __(INTERP_FAIL ,InterpFail)                \
  __(INTERP_RETURN,InterpReturn)             \
  __(INTERP_ARITH_INTL,InterpArithIntL)      \
  __(INTERP_ARITH_INTR,InterpArithIntR)      \
  __(INTERP_ARITH_REALL,InterpArithRealL)    \
  __(INTERP_ARITH_REALR,InterpArithRealR)    \
  __(INTERP_ARITH_VV,InterpArithVV)          \
  __(INTERP_POW_SLOWVI,InterpPowSlowVI)      \
  __(INTERP_POW_SLOWIV,InterpPowSlowIV)      \
  __(INTERP_POW_SLOWVR,InterpPowSlowVR)      \
  __(INTERP_POW_SLOWRV,InterpPowSlowRV)      \
  __(INTERP_POW_SLOWVV,InterpPowSlowVV)      \
  __(DIV_BY_ZERO,DivByZero)                  \
  __(MOD_BY_REAL,ModByReal)                  \
  /* comparison */                           \
  __(INTERP_COMPAREIV,InterpCompareIV)       \
  __(INTERP_COMPAREVI,InterpCompareVI)       \
  __(INTERP_COMPARERV,InterpCompareRV)       \
  __(INTERP_COMPAREVR,InterpCompareVR)       \
  __(INTERP_COMPAREVV,InterpCompareVV)       \
  __(INTERP_COMPARESV,InterpCompareSV)       \
  __(INTERP_COMPAREVS,InterpCompareVS)       \
  /* loading obj/list/cls */                 \
  __(INTERP_LOADOBJ0 ,InterpLoadObj0)        \
  __(INTERP_LOADOBJ1 ,InterpLoadObj1)        \
  __(INTERP_NEWOBJ   ,InterpNewObj  )        \
  __(INTERP_ADDOBJ   ,InterpAddObj  )        \
  __(INTERP_LOADLIST0,InterpLoadList0)       \
  __(INTERP_LOADLIST1,InterpLoadList1)       \
  __(INTERP_LOADLIST2,InterpLoadList2)       \
  __(INTERP_NEWLIST  ,InterpNewList  )       \
  __(INTERP_ADDLIST  ,InterpAddList  )       \
  __(INTERP_LOADCLS  ,InterpLoadCls  )       \
  /* unary */                                \
  __(INTERP_NEGATE,InterpNegate)             \
  __(INTERP_NOT,InterpNot)                   \
  /* property get/set */                     \
  __(INTERP_PROPGET_NOTFOUND,InterpPropGetNotFound)      \
  __(INTERP_PROPGET_NOTOBJECT,InterpPropGetNotObject)    \
  __(INTERP_PROPGET,InterpPropGet)           \
  __(INTERP_PROPSET,InterpPropSet)           \
  __(INTERP_IDXGETI,InterpIdxGetI)           \
  __(INTERP_IDXGET ,InterpIdxGet )           \
  __(INTERP_IDXSET ,InterpIdxSet )           \
  __(INTERP_GSET   ,InterpGGset  )           \
  __(INTERP_GGET   ,InterpGGet   )           \
  /* ---- debug helper ---- */               \
  __(PRINT_OP,PrintOP)                       \
  __(PRINT2  ,Print2 )                       \
  __(PRINTF  ,PrintF )

enum {
  INTERP_HELPER_DUMMY = SIZE_OF_BYTECODE,

#define __(A,B) A,
  INTERP_HELPER_LIST(__)
#undef __

  DASM_GROWABLE_PC_SIZE
};

#define INTERP_HELPER_START (INTERP_HELPER_DUMMY+1)
#define INTERP_HELPER_SIZE (DASM_GROWABLE_PC_SIZE-INTERP_HELPER_ROUTINE_ENUM-1)

const char* GetInterpHelperName( int idx ) {
  switch(idx) {
#define __(A,B) case A: return #B;
    INTERP_HELPER_LIST(__)
    default:
      lava_unreachF("unknown helper with index:%d",idx);
      return NULL;
#undef __ // __
  }
}

/* -----------------------------------------------------------
 * Macro Interfaces for Dynasm                               |
 * ----------------------------------------------------------*/
#define Dst (&(bctx->dasm_ctx))

/* -----------------------------------------------------------
 * Interpreter Prolog                                        |
 * ----------------------------------------------------------*/
void GenerateInterpMisc( BuildContext* bctx ) {
  /* -------------------------------------------
   * Constant value needed for the interpreter |
   * ------------------------------------------*/
  |.data
  |->ValueHeapMaskStore:
  |.dword Value::TAG_HEAP_STORE_MASK_HIGHER,Value::TAG_HEAP_STORE_MASK_LOWER

  |->ValueHeapMaskLoad:
  |.dword Value::TAG_HEAP_LOAD_MASK_HIGHER,Value::TAG_HEAP_LOAD_MASK_LOWER

  |->RealZero:
  |.dword 0,0

  |.code

  /* -------------------------------------------
   * Start of the code                         |
   * ------------------------------------------*/

  |.macro interp_prolog
  |  sub   rsp, RESERVE_RSP             // make room on the stack

  |  mov qword SAVED_R12,r12            // runtime
  |  mov qword SAVED_R13,r13            // proto
  |  mov qword SAVED_R14,r14            // stack
  |  mov qword SAVED_R15,r15            // dispatch
  |  mov qword SAVED_RBP,rbp            // PC
  |  mov qword SAVED_RBX,rbx            // used by ARG2 , this may be changed in the future
  |.endmacro

  |.macro interp_epilog
  |  mov r12, qword SAVED_R12
  |  mov r13, qword SAVED_R13
  |  mov r14, qword SAVED_R14
  |  mov r15, qword SAVED_R15
  |  mov rbp, qword SAVED_RBP
  |  mov rbx, qword SAVED_RBX

  |  add rsp, RESERVE_RSP
  |.endmacro

  /* -------------------------------------------
   * Interpreter Prolog                        |
   * ------------------------------------------*/
  |=> INTERP_START:
  |->InterpStart:
  // save all callee saved register since we use them to keep tracking of
  // our most important data structure
  |  interp_prolog

  |  mov RUNTIME ,CARG1                 // runtime
  |  mov PROTO   ,CARG2                 // proto
  |  mov STK     ,CARG3                 // stack
  |  mov PC      ,CARG4                 // pc
  |  mov DISPATCH,CARG5                 // dispatch

  |  mov qword SAVED_PC,CARG4           // save the *start* of bc array
  // run
  |  Dispatch

  /* -------------------------------------------
   * Interpreter exit handler                  |
   * ------------------------------------------*/
  |=> INTERP_FAIL:
  |->InterpFail:
  |  xor eax,eax
  |  interp_epilog
  |  ret

  |=> INTERP_RETURN:
  |->InterpReturn:
  |  mov rax, qword [ACC]
  |  mov qword [RUNTIME+RuntimeLayout::kRetOffset],rax
  |  mov rax,1

  |  interp_epilog
  |  ret
}

/* ------------------------------------------
 * helper functions/routines generation     |
 * -----------------------------------------*/
void GenerateHelper( BuildContext* bctx ) {
  // ----------------------------------------
  // helper macros
  // ----------------------------------------
  |.macro ret2acc
  |  mov T1,rax
  |  shr T1,32
  |  cmp T1,VALUE_FAIL
  |  je ->InterpFail
  |  mov qword [ACC], rax
  |  Dispatch
  |.endmacro

  |.macro retbool
  |  test eax,eax
  |  je ->InterpFail
  |  Dispatch
  |.endmacro

  // saving the current PC into the Runtime object, this is
  // needed for GC to figure out the correct active register
  // layout during the GC marking phase
  |.macro savepc
  |  mov qword [RUNTIME+RuntimeLayout::kCurPCOffset], PC
  |.endmacro

  /* ----------------------------------------
   * Load object/list/closure               |
   * ---------------------------------------*/
  |=> INTERP_LOADLIST0:
  |->InterpLoadList0:
  |  instr_F
  |  savepc
  |  mov CARG1,RUNTIME
  |  lea CARG2,[STK+ARG1F*8]
  |  fcall InterpreterDoLoadList0
  |  retbool


  |=> INTERP_LOADLIST1:
  |->InterpLoadList1:
  |  instr_E
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG2, qword [STK+ARG2F*8]
  |  fcall InterpreterDoLoadList1
  |  retbool

  |=> INTERP_LOADLIST2:
  |->InterpLoadList2:
  |  instr_D
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  mov CARG4, qword [STK+ARG3F*8]
  |  fcall InterpreterDoLoadList2
  |  retbool

  |=> INTERP_NEWLIST:
  |->InterpNewList:
  |  instr_B
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3L, ARG2
  |  fcall InterpreterDoNewList
  |  retbool

  |=> INTERP_ADDLIST:
  |->InterpAddList:
  |  instr_E
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  fcall InterpreterDoAddList
  |  retbool


  |=> INTERP_LOADOBJ0:
  |->InterpLoadObj0:
  |  instr_F
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  fcall InterpreterDoLoadObj0
  |  retbool

  |=> INTERP_LOADOBJ1:
  |->InterpLoadObj1:
  |  instr_D
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  mov CARG4, qword [STK+ARG3F*8]
  |  fcall InterpreterDoLoadObj1
  |  retbool

  |=> INTERP_NEWOBJ:
  |->InterpNewObj:
  |  instr_B
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3L, ARG2
  |  fcall InterpreterDoNewObj
  |  retbool

  |=> INTERP_ADDOBJ:
  |->InterpAddObj:
  |  instr_D
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  mov CARG4, qword [STK+ARG3F*8]
  |  fcall InterpreterDoAddObj
  |  retbool

  |=> INTERP_LOADCLS:
  |->InterpLoadCls:
  |  instr_G
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, STK
  |  mov CARG3L, ARG1
  |  fcall InterpreterDoLoadCls
  |  retbool

  /* ----------------------------------------
   * InterpArithXXX                         |
   * ---------------------------------------*/
  |=> INTERP_ARITH_INTL:
  |->InterpArithIntL:
  |  savepc
  |  mov CARG1,RUNTIME
  |  LdIntV CARG2,CARG2L,ARG1F
  |  movzx CARG4L,byte [PC-4]
  |  fcall InterpreterDoArithmetic
  |  ret2acc

  |=> INTERP_ARITH_INTR:
  |->InterpArithIntR:
  |  savepc
  |  mov CARG1,RUNTIME
  |  LdIntV CARG3,CARG3L,ARG2F
  |  movzx CARG4L,byte [PC-4]
  |  fcall InterpreterDoArithmetic
  |  ret2acc

  |=> INTERP_ARITH_REALL:
  |->InterpArithRealL:
  |  savepc
  |  mov CARG1,RUNTIME
  |  LdRealV CARG2,ARG1F
  |  movzx CARG4L,byte [PC-4]
  |  fcall InterpreterDoArithmetic
  |  ret2acc

  |=> INTERP_ARITH_REALR:
  |->InterpArithRealR:
  |  savepc
  |  mov CARG1,RUNTIME
  |  LdRealV CARG3,ARG2F
  |  movzx CARG4L,byte [PC-4]
  |  fcall InterpreterDoArithmetic
  |  ret2acc

  |=> INTERP_ARITH_VV:
  |->InterpArithVV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  movzx CARG4L,byte [PC-4]
  |  fcall InterpreterDoArithmetic
  |  ret2acc

  |=> INTERP_POW_SLOWIV:
  |->InterpPowSlowIV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  LdIntV CARG2,CARG2L,ARG1F
  |  mov CARG3,qword [STK+ARG2F*8]
  |  movzx CARG4L,byte  [PC-4]
  |  fcall InterpreterPow
  |  ret2acc

  |=> INTERP_POW_SLOWRV:
  |->InterpPowSlowRV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  LdRealV CARG2,ARG1F
  |  mov CARG3,qword [STK+ARG2F*8]
  |  movzx CARG4L,byte  [PC-4]
  |  fcall InterpreterPow
  |  ret2acc

  |=> INTERP_POW_SLOWVI:
  |->InterpPowSlowVI:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdIntV CARG3,CARG3L,ARG2F
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterPow
  |  ret2acc

  |=> INTERP_POW_SLOWVR:
  |->InterpPowSlowVR:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdRealV CARG3,ARG2F
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterPow
  |  ret2acc

  |=> INTERP_POW_SLOWVV:
  |->InterpPowSlowVV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2,qword [STK+ARG1F*8]
  |  LdRealV CARG3,ARG2F
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterPow
  |  ret2acc

  /* -------------------------------------------
   * Interp Arithmetic Exception               |
   * ------------------------------------------*/
  |=> DIV_BY_ZERO:
  |->DivByZero:
  |  mov CARG1,RUNTIME
  |  lea CARG2,[PC-4]
  |  fcall InterpreterDivByZero
  |  jmp ->InterpFail

  |=> MOD_BY_REAL:
  |->ModByReal:
  |  mov CARG1,RUNTIME
  |  lea CARG2,[PC-4]
  |  fcall InterpreterModByReal
  |  jmp ->InterpFail


  /* -------------------------------------------
   * Interp Comparison                         |
   * ------------------------------------------*/
  |=> INTERP_COMPAREIV:
  |->InterpCompareIV:
  |  savepc
  |  mov CARG1,RUNTIME
  |  LdIntV CARG2,CARG2L,ARG1F
  |  mov CARG3, qword [STK+ARG2F*8]
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  |=> INTERP_COMPAREVI:
  |->InterpCompareVI:
  |  savepc
  |  mov CARG1,RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdIntV CARG3,CARG3L,ARG2F
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  |=> INTERP_COMPARERV:
  |->InterpCompareRV:
  |  savepc
  |  mov CARG1,RUNTIME
  |  LdRealV CARG2,ARG2F
  |  mov CARG3, qword [STK+ARG2F*8]
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  |=> INTERP_COMPAREVR:
  |->InterpCompareVR:
  |  savepc
  |  mov CARG1,RUNTIME
  |  mov CARG2,qword [STK+ARG1F*8]
  |  LdRealV CARG3,ARG2F
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  |=> INTERP_COMPAREVV:
  |->InterpCompareVV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  |=> INTERP_COMPARESV:
  |->InterpCompareSV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  LdStrV CARG2,ARG1F
  |  mov CARG2, qword [STK+ARG2F*8]
  |  movzx CARG4L, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  |=> INTERP_COMPAREVS:
  |->InterpCompareVS:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdStrV CARG3,ARG2F
  |  movzx CARG4, byte [PC-4]
  |  fcall InterpreterDoCompare
  |  ret2acc

  /* -------------------------------------------------
   * Unary                                           |
   * ------------------------------------------------*/
  |=> INTERP_NEGATE:
  |->InterpNegate:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, qword [STK+ARG1F*8]
  |  fcall InterpreterDoNegate
  // return value is a *boolean*
  |  retbool

  |=> INTERP_NOT:
  |->InterpNot:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, qword [STK+ARG1F*8]
  |  fcall InterpreterDoNot
  |  retbool

  /* -------------------------------------------------
   * Property Get/Set                                |
   * ------------------------------------------------*/
  |=> INTERP_PROPGET:
  |->InterpPropGet:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdStr CARG3, ARG2F
  |  fcall InterpreterDoPropGet
  |  ret2acc

  |=> INTERP_PROPGET_NOTFOUND:
  |->InterpPropGetNotFound:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdStr CARG3,ARG1F
  |  fcall InterpreterPropGetNotFound
  |  jmp ->InterpFail

  |=> INTERP_PROPGET_NOTOBJECT:
  |->InterpPropGetNotObject:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdStr CARG3, ARG2F
  |  fcall InterpreterPropGetNotObject
  |  jmp ->InterpFail

  |=> INTERP_PROPSET:
  |->InterpPropSet:
  |  instr_B
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [ACC]
  |  mov CARG3, qword [STK+ARG1F*8]
  |  LdStr CARG4, ARG2F
  |  fcall InterpreterDoPropSet
  |  retbool

  |=> INTERP_IDXGET:
  |->InterpIdxGet:
  |  instr_E
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  mov CARG3, qword [STK+ARG2F*8]
  |  fcall InterpreterDoIdxGet
  |  retbool

  |=> INTERP_IDXGETI:
  |->InterpIdxGetI:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG1F*8]
  |  LdInt CARG3L,ARG2F
  |  fcall InterpreterDoIdxGetI
  |  retbool

  |=> INTERP_GSET:
  |->InterpGSet:
  |  instr_C
  |  savepc
  |  mov CARG1, RUNTIME
  |  LdStr CARG2,ARG1F
  |  mov CARG3, qword [STK+ARG2F*8]
  |  fcall InterpreterDoGSet
  |  retbool

  |=> INTERP_GGET:
  |->InterpGGet:
  |  instr_B
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  LdStr CARG3, ARG2F
  |  fcall InterpreterDoGGet
  |  retbool
}

void GenerateOneBytecode( BuildContext* bctx, Bytecode bc ) {
  // hack around idiv operator which are used to implement the
  // BC_MODXX and BC_DIVXX instruction. It has a different format
  // and different result/output
  bool arith_div = false;
  bool arith_mod = false;

  switch(bc) {
    /** =====================================================
     *  Call handling                                       |
     *  ====================================================*/
    case BC_RETNULL:
      |=> bc:
      |  instr_X
      |  mov dword [STK+ACCFIDX],Value::FLAG_NULL
      |  jmp ->InterpReturn
      break;

    case BC_RET:
      |=> bc:
      |  instr_X
      |  jmp ->InterpReturn
      break;

    /** =====================================================
     *  Register Move                                       |
     *  ====================================================*/
    case BC_MOVE:
      |=> bc:
      |  instr_E
      |  mov T1,qword [STK+ARG2F*8]
      |  mov qword [STK+ARG1F*8],T1
      |  Dispatch
      break;

    /** =====================================================
     *  Constant Loading                                    |
     *  ====================================================*/
    case BC_LOADI:
      |=> bc:
      |  instr_B
      |  LdInt LREGL,ARG2F
      |  StInt ARG1F,LREGL
      |  Dispatch
      break;

    case BC_LOAD0:
      |=> bc:
      |  instr_F
      |  StInt ARG1F,0
      |  Dispatch
      break;

    case BC_LOAD1:
      |=> bc:
      |  instr_F
      |  StInt ARG1F,1
      |  Dispatch
      break;

    case BC_LOADN1:
      |=> bc:
      |  instr_F
      |  StInt ARG1F,-1
      |  Dispatch
      break;

    case BC_LOADR:
      |=> bc:
      |  instr_B
      |  LdReal xmm0,ARG2F
      |  movsd qword [STK+ARG1F*8],xmm0
      |  Dispatch
      break;

    case BC_LOADNULL:
      |=> bc:
      |  instr_F
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_NULL
      |  Dispatch
      break;

    case BC_LOADTRUE:
      |=> bc:
      |  instr_F
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
      |  Dispatch
      break;

    case BC_LOADFALSE:
      |=> bc:
      |  instr_F
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_FALSE
      |  Dispatch
      break;

    case BC_LOADSTR:
      |=> bc:
      |  instr_B
      |  LdStrV LREG,ARG2F
      |  mov qword [STK+ARG1F*8],LREG
      |  Dispatch
      break;

    // -------------------------------------------------
    // Loading List/Object/Cls
    //
    //
    // For these bytecodes, no optimization is performed but
    // directly yield back to C++ function to do the job. It
    // has no points to optimize these cases since they are
    // small amount of bytecodes and also complicated to write
    // in assembly without too much gain
    //
    //
    // To reduce ICache stress, the decode routine is *not*
    // placed inlined with each BC_XXX here but in the slow
    // path. This is purposely to make the main part of
    // interpreter to be small which helps about the icache
    // footprint of hot code
    // ------------------------------------------------*/
    case BC_LOADLIST0:
      |=> bc:
      |  jmp ->InterpLoadList0
      break;
    case BC_LOADLIST1:
      |=>bc:
      |  jmp ->InterpLoadList1
      break;
    case BC_LOADLIST2:
      |=>bc:
      |  jmp ->InterpLoadList2
      break;
    case BC_NEWLIST:
      |=>bc:
      |  jmp ->InterpNewList
      break;
    case BC_ADDLIST:
      |=>bc:
      |  jmp ->InterpAddList
      break;
    case BC_LOADOBJ0:
      |=>bc:
      |  jmp ->InterpLoadObj0
      break;
    case BC_LOADOBJ1:
      |=>bc:
      |  jmp ->InterpLoadObj1
      break;
    case BC_NEWOBJ:
      |=>bc:
      |  jmp ->InterpNewObj
      break;
    case BC_ADDOBJ:
      |=>bc:
      |  jmp ->InterpAddObj
      break;
    case BC_LOADCLS:
      |=>bc:
      |  jmp ->InterpLoadCls
      break;

    /** =====================================================
     *  Arith XV                                            |
     *  ====================================================*/
    |.macro arith_xv,BC,slow_path,int_handler,int_instr,real_handler,real_instr
    |  instr_C
    |  mov RREG, qword [STK+ARG2F*8]

    // Use arg3 as temporary in favoer over T1/T2
    |.if CHECK_NUMBER_MEMORY
    |  mov ARG3, dword[STK+ARG2F*8+4]
    |.else
    |  mov ARG3F,RREG
    |  shr ARG3F,32
    |.endif

    |  cmp ARG3, Value::FLAG_INTEGER
    |  jne >2
    // v --> integer
    |  int_handler int_instr
    |2:
    |  cmp ARG3, Value::FLAG_REAL
    |  jnb ->slow_path
    // v --> real
    |  real_handler real_instr
    |.endmacro

    |.macro arith_iv_real,instr
    |  LdInt2Real xmm0,ARG1F
    |  movd xmm1,RREG
    |  instr xmm0,xmm1
    |  StRealACC xmm0
    |  Dispatch
    |.endmacro

    |.macro arith_rv_real,instr
    |  LdReal xmm0,ARG1F
    |  movd xmm1,RREG
    |  instr xmm0,xmm1
    |  StRealACC xmm0
    |  Dispatch
    |.endmacro

    |.macro arith_iv_do_div
    |  mov ARG3 ,dword [STK+ARG2F*8]
    |  LdInt eax,ARG1F
    |.if CHECK_DIV_BY_ZERO
    |  test eax,eax
    |  je ->DivByZero
    |.endif
    |  cdq
    |  idiv ARG3
    |.endmacro

    |.macro arith_iv_int,instr
    || if( arith_div ) {
    |    arith_iv_do_div
    |    StIntACC eax
    || } else {
    |    LdInt LREGL,ARG1F
    |    instr LREGL,RREGL
    |    StIntACC LREGL
    || }
    |  Dispatch
    |.endmacro

    |.macro arith_rv_int,instr
    |  LdReal xmm0,ARG1F
    |  cvtsi2sd xmm1, RREGL
    |  instr xmm0,xmm1
    |  StRealACC xmm0
    |  Dispatch
    |.endmacro

    case BC_ADDIV:
      |=> bc:
      |  arith_xv BC_ADDIV,InterpArithIntL,arith_iv_int,add,arith_iv_real,addsd
      break;

    case BC_ADDRV:
      |=>bc:
      |  arith_xv BC_ADDRV,InterpArithRealL,arith_rv_int,addsd,arith_rv_real,addsd
      break;

    case BC_SUBIV:
      |=>bc:
      |  arith_xv BC_SUBIV,InterpArithIntL,arith_iv_int,sub,arith_iv_real,subsd
      break;

    case BC_SUBRV:
      |=>bc:
      |  arith_xv BC_SUBRV,InterpArithRealL,arith_rv_int,subsd,arith_rv_real,subsd
      break;

    case BC_MULIV:
      |=>bc:
      |  arith_xv BC_MULIV,InterpArithIntL,arith_iv_int,imul,arith_iv_real,mulsd
      break;

    case BC_MULRV:
      |=>bc:
      |  arith_xv BC_MULRV,InterpArithRealL,arith_rv_int,mulsd,arith_rv_real,mulsd
      break;

    case BC_DIVIV:
      arith_div = true;
      |=>bc:
      |  arith_xv BC_DIVIV,InterpArithIntL,arith_iv_int,imul,arith_iv_real,divsd
      break;

    case BC_DIVRV:
      arith_div = true;
      |=>bc:
      |  arith_xv BC_DIVRV,InterpArithRealL,arith_rv_int,divsd,arith_rv_real,divsd
      break;

    case BC_MODIV:
      |=>bc:
      |  instr_C
      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_INTEGER
      |  jne ->ModByReal

      // do the integer mod
      |  mov ARG3, dword [STK+ARG2F*8]
      |  LdInt eax,ARG1F

      |.if CHECK_DIV_BY_ZERO
      |  test eax,eax
      |  je ->DivByZero
      |.endif

      |  cdq
      |  idiv ARG3
      |  StIntACC edx
      |  Dispatch
      break;

    /* =========================================================
     * Arith VX                                                |
     * ========================================================*/
    |.macro arith_vx,BC,slow_path,int_handler,int_instr,real_handler,real_instr
    |  instr_B
    |  mov LREG,qword [STK+ARG1F*8]

    |.if CHECK_NUMBER_MEMORY
    |  mov ARG3,dword [STK+ARG1F*8+4]
    |.else
    |  mov ARG3F,LREG
    |  shr ARG3F,32
    |.endif

    |  cmp ARG3,Value::FLAG_INTEGER
    |  jne >2

    // v --> integer
    |  int_handler int_instr
    |2:
    |  cmp ARG3,Value::FLAG_REAL
    |  jnb ->slow_path

    // v --> real
    |  real_handler real_instr
    |.endmacro

    |.macro arith_vi_real,instr
    |  LdInt2Real xmm1,ARG2F
    |  movd xmm0,LREG
    |  instr xmm0,xmm1
    |  StRealACC xmm0
    |  Dispatch
    |.endmacro

    |.macro arith_vi_do_div
    |  LdInt ARG3,ARG2F
    |  mov eax,LREGL
    |.if 1
    |  test eax,eax
    |  je ->DivByZero
    |.endif
    |  cdq
    |  idiv ARG3
    |.endmacro

    |.macro arith_vi_int,instr
    || if( arith_div ) {
    |    arith_vi_do_div
    |    StIntACC eax
    || } else {
    |    LdInt RREGL,ARG2F
    |    instr LREGL,RREGL
    |    StIntACC LREGL
    || }
    |  Dispatch
    |.endmacro

    |.macro arith_vr_real,instr
    |  LdReal xmm1, ARG2F
    |  movd xmm0,LREG
    |  instr xmm0,xmm1
    |  StRealACC xmm0
    |  Dispatch
    |.endmacro

    |.macro arith_vr_int,instr
    |  LdReal xmm1,ARG2F
    |  cvtsi2sd xmm0, LREGL
    |  instr xmm0,xmm1
    |  StRealACC xmm0
    |  Dispatch
    |.endmacro

    case BC_ADDVI:
      |=> bc:
      |  arith_vx BC_ADDVI,InterpArithIntR,arith_vi_int,add,arith_vi_real,addsd
      break;

    case BC_ADDVR:
      |=> bc:
      |  arith_vx BC_ADDVR,InterpArithRealR,arith_vr_int,addsd,arith_vr_real,addsd
      break;

    case BC_SUBVI:
      |=> bc:
      |  arith_vx BC_SUBVI,InterpArithIntR,arith_vi_int,sub,arith_vi_real,subsd
      break;

    case BC_SUBVR:
      |=> bc:
      |  arith_vx BC_SUBVR,InterpArithRealR,arith_vr_int,subsd,arith_vr_real,subsd
      break;

    case BC_MULVI:
      |=> bc:
      |  arith_vx BC_MULVI,InterpArithIntR,arith_vi_int,imul,arith_vi_real,mulsd
      break;

    case BC_MULVR:
      |=> bc:
      |  arith_vx BC_MULVR,InterpArithRealR,arith_vr_int,mulsd,arith_vr_real,mulsd
      break;

    case BC_DIVVI:
      arith_div = true;
      |=> bc:
      |  arith_vx BC_DIVVI,InterpArithIntR,arith_vi_int,sub,arith_vi_real,divsd
      break;

    case BC_DIVVR:
      arith_div = true;
      |=> bc:
      |  arith_vx BC_DIVVR,InterpArithReralR,arith_vr_int,divsd,arith_vr_real,divsd
      break;

    case BC_MODVI:
      |=>bc:
      |  instr_B
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_INTEGER
      |  jne ->ModByReal

      // do the division
      |  LdInt ARG3,ARG2F
      |.if CHECK_DIV_BY_ZERO
      |  test ARG3,ARG3
      |  je ->DivByZero
      |.endif

      |  mov eax,dword [STK+ARG1F*8]

      |  cdq
      |  idiv ARG3
      |  StIntACC edx
      |  Dispatch
      break;

    /* ========================================================
     * ArithVV
     *
     * The arithVV is also optimized for common path here.
     * We inline all numeric calculation cases, int/real.
     * Other cases will be pushed back to call C++ function
     * which may be extended to support meta function call
     * ========================================================*/
    |.macro arith_vv_do_div
    |  shr RREG,32
    |  mov ARG3,RREGL
    |  shr LREG,32
    |  mov eax,LREGL
    |.if 1
    |  test eax,eax
    |  je ->DivByZero
    |.endif
    |  cdq
    |  idiv ARG3
    |.endmacro

    // perform VV calaculation based on instruction
    |.macro arith_vv,BC,instrI,setterI,instrR,setterR
    |=> BC:
    |  instr_E

    // check the lhs to be integer or not
    |  mov LREG,qword [STK+ARG1F*8]
    |  cmp LREGL,Value::FLAG_INTEGER
    |  jne >1

    | // int && xx
    |  mov RREG,qword [STK+ARG2F*8]
    |  cmp RREGL,Value::FLAG_INTEGER
    |  jne >4
    // int && int
    || if( arith_div ) {
         // order matters
    |    arith_vv_do_div
    |    setterI eax
    || } else if (arith_mod) {
         // order matters
    |    arith_vv_do_div
    |    setterI edx
    || } else {
    |    mov     LREGL,dword [STK+ARG1F*8]
    |    instrI  LREGL,dword [STK+ARG2F*8]
    |    setterI LREGL
    || }
    |  Dispatch

    |1:
    |  mov RREG,qword [STK+ARG2F*8]
    |  cmp RREGL,Value::FLAG_REAL
    |  jnb ->InterpArithVV

    // real && xx
    |  cmp RREGL,Value::FLAG_REAL
    |  jb >5  // real && real
    |  cmp RREGL,Value::FLAG_INTEGER
    |  jne ->InterpArithVV

    // promoting RHS->real
    |  shr RREG,32
    |  cvtsi2sd xmm1,RREGL
    |  movd xmm0,LREG
    |  jmp >5


    |4: // int && xx
    |  cmp RREGL,Value::FLAG_REAL
    |  jnb ->InterpArithVV
    // promoting LHS->real
    |  shr LREG,32
    |  cvtsi2sd xmm0,LREGL
    |  movd xmm1,RREG

    // real && real
    |5:
    || if( arith_mod ) {
    |    jmp ->ModByReal
    || } else {
    |    instrR  xmm0,xmm1
    |    setterR xmm0
    || }
    |  Dispatch

    |.endmacro

    case BC_ADDVV:
      |  arith_vv BC_ADDVV,add,StIntACC,addsd,StRealACC
      break;
    case BC_SUBVV:
      |  arith_vv BC_SUBVV,sub,StIntACC,subsd,StRealACC
      break;
    case BC_MULVV:
      |  arith_vv BC_MULVV,imul,StIntACC,mulsd,StRealACC
      break;
    case BC_DIVVV:
      arith_div = true;
      |  arith_vv BC_DIVVV,imul,StIntACC,divsd,StRealACC
      break;
    case BC_MODVV:
      arith_mod = true;
      |  arith_vv BC_MODVV,imul,StIntACC,divsd,StRealACC
      break;

    /* ==============================================================
     * POW part
     *
     * Currently we directly use std::pow/pow in libc for simplicity.
     * For numeric type we will directly call pow for other types
     * we will fallback to slow C++ function
     * =============================================================*/

    |.macro call_pow
    |  fcall pow
    |  movsd qword [ACC], xmm0
    |  Dispatch
    |.endmacro

    |.macro arith_pow,REGL,XREG,ARG,slow_pow
    |  mov REGL,dword [STK+ARG*8+4]
    |  cmp REGL,Value::FLAG_REAL
    |  jnb >2
    |  movsd XREG,qword [STK+ARG*8]
    |  call_pow
    |2:
    |  cmp REGL,Value::FLAG_INTEGER
    |  jne ->slow_pow
    |  cvtsi2sd XREG,dword [STK+ARG*8]
    |  call_pow
    |.endmacro

    case BC_POWIV:
      |=> bc:
      |  instr_C
      |  LdInt2Real,xmm0,ARG1F
      |  arith_pow RREGL,xmm1,ARG2F,InterpPowSlowIV
      break;

    case BC_POWVI:
      |=> bc:
      |  instr_B
      |  LdInt2Real,xmm1,ARG2F
      |  arith_pow LREGL,xmm0,ARG1F,InterpPowSlowVI
      break;

    case BC_POWRV:
      |=> bc:
      |  instr_C
      |  LdReal xmm0,ARG1F
      |  arith_pow RREGL,xmm1,ARG2F,InterpPowSlowRV
      break;

    case BC_POWVR:
      |=> bc:
      |  instr_B
      |  LdReal xmm1,ARG2F
      |  arith_pow LREGL,xmm0,ARG1F,InterpPowSlowVR
      break;

    case BC_POWVV:
      |=> bc:
      |  instr_C
      |  jmp ->InterpPowSlowVV
      break;


    /* ====================================================================
     * Comparison
     *
     * Inline numeric comparison and also do promotion inline
     * ===================================================================*/

    /* --------------------------------------------------------------------
     * Comparison XV                                                      |
     * -------------------------------------------------------------------*/
    |.macro comp_xv,BC,slow_path,iv_real,iv_real_cmov,iv_real_jmp,iv_int,iv_int_cmov,iv_int_jmp
    |  instr_C
    |  mov RREG, qword[STK+ARG2F*8]
    |.if CHECK_NUMBER_MEMORY
    |  mov ARG3, dword[STK+ARG2F*8+4]
    |.else
    |  mov ARG3F,RREG
    |  shr ARG3F,32
    |.endif
    |  cmp ARG3, Value::FLAG_INTEGER
    |  jne >2
    |  iv_int iv_int_cmov,iv_int_jmp
    |2:
    |  cmp ARG3, Value::FLAG_REAL
    |  jnb ->slow_path
    |  iv_real iv_real_cmov,iv_real_jmp
    |.endmacro

    |.macro comp_cmp_real,instr
    |  mov ARG1, Value::FLAG_FALSE
    |  mov ARG2, Value::FLAG_TRUE
    |  ucomisd xmm0,xmm1
    |  instr ARG1, ARG2
    |  mov dword [STK+ACCFIDX], ARG1
    |.endmacro

    |.macro comp_cmp_int,instr
    |  mov ARG1, Value::FLAG_FALSE
    |  mov ARG2, Value::FLAG_TRUE
    |  cmp LREGL,RREGL
    |  instr ARG1, ARG2
    |  mov dword [STK+ACCFIDX], ARG1
    |.endmacro

    // real/int part for iv/rv
    |.macro comp_iv_real,instr,false_jmp
    |  LdInt2Real xmm0,ARG1F
    |  movd xmm1,RREG

    |.if USE_CMOV_COMP
    |  comp_cmp_real,instr
    |  Dispatch
    |.else
    |  ucomisd xmm0,xmm1
    |  false_jmp >8
    |  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    |  Dispatch
    |8:
    |  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    |  Dispatch
    |.endif

    |.endmacro

    |.macro comp_iv_int,instr,false_jmp
    |  LdInt LREGL,ARG1F

    |.if USE_CMOV_COMP
    |  comp_cmp_int,instr
    |  Dispatch
    |.else
    |  cmp LREGL,RREGL
    |  false_jmp >8
    |  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    |  Dispatch
    |8:
    |  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    |  Dispatch
    |.endif

    |.endmacro

    |.macro comp_rv_real,instr,false_jmp
    |  LdReal xmm0,ARG1F
    |  movd xmm1,RREG

    |.if USE_CMOV_COMP
    |  comp_cmp_real,instr
    |  Dispatch
    |.else
    |  ucomisd xmm0,xmm1
    |  false_jmp >8
    |  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    |  Dispatch
    |8:
    |  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    |  Dispatch
    |.endif

    |.endmacro

    |.macro comp_rv_int,instr,false_jmp
    |  LdReal xmm0,ARG1F
    |  cvtsi2sd xmm1,RREGL

    |.if USE_CMOV_COMP
    |  comp_cmp_real,instr
    |  Dispatch
    |.else
    |  ucomisd xmm0,xmm1
    |  false_jmp >8
    |  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    |  Dispatch
    |8:
    |  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    |  Dispatch
    |.endif

    |.endmacro

    case BC_LTIV:
      |=> bc:
      |  comp_xv BC_LTIV,InterpDoCompareIV,comp_iv_real,cmovb,jae,comp_iv_int,cmovl,jge
      break;
    case BC_LTRV:
      |=>bc:
      |  comp_xv BC_LTRV,InterpDoCompareRV,comp_rv_real,cmovb,jae,comp_rv_int,cmovb,jae
      break;
    case BC_LEIV:
      |=> bc:
      |  comp_xv BC_LEIV,InterpDoCompareIV,comp_iv_real,cmovbe,ja,comp_iv_int,cmovle,jg
      break;
    case BC_LERV:
      |=> bc:
      |  comp_xv BC_LERV,InterpDoCompareRV,comp_rv_real,cmovbe,ja,comp_rv_int,cmovbe,ja
      break;
    case BC_GTIV:
      |=> bc:
      |  comp_xv BC_GTIV,InterpDoCompareIV,comp_iv_real,cmova,jbe,comp_iv_int,cmovg,jle
      break;
    case BC_GTRV:
      |=>bc:
      |  comp_xv BC_GTRV,InterpDoCompareRV,comp_rv_real,cmova,jbe,comp_rv_int,cmova,jbe
      break;
    case BC_GEIV:
      |=> bc:
      |  comp_xv BC_GEIV,InterpDoCompareIV,comp_iv_real,cmovae,jb,comp_iv_int,cmovge,jl
      break;
    case BC_GERV:
      |=> bc:
      |  comp_xv BC_GERV,InterpDoCompareRV,comp_rv_real,cmovae,jb,comp_rv_int,cmovae,jb
      break;
    case BC_EQIV:
      |=> bc:
      |  comp_xv BC_EQIV,InterpDoCompareIV,comp_iv_real,cmove,jne,comp_iv_int,cmove,jne
      break;
    case BC_EQRV:
      |=> bc:
      |  comp_xv BC_EQRV,InterpDoCompareRV,comp_rv_real,cmove,jne,comp_rv_int,cmove,jne
      break;
    case BC_NEIV:
      |=> bc:
      |  comp_xv BC_NEIV,InterpDoCompareIV,comp_iv_real,cmovne,je,comp_iv_int,cmovne,je
      break;
    case BC_NERV:
      |=> bc:
      |  comp_xv BC_NERV,InterpDoCompareRV,comp_rv_real,cmovne,je,comp_rv_int,cmovne,je
      break;

    /* --------------------------------------------------------------------
     * Comparison VX                                                      |
     * -------------------------------------------------------------------*/
    |.macro comp_vx_pre,BC,SlowPath
    |  instr_B
    |  mov LREG,qword [STK+ARG1F*8]
    |  CheckNum ARG1,LREG,1,2
    |  jmp ->SlowPath
    |.endmacro

    // real/int part for iv/rv
    |.macro comp_vi_real,instr
    |  LdInt2Real xmm1,ARG2F
    |  movd xmm0,LREG
    |  comp_cmp_real,instr
    |  Dispatch
    |.endmacro

    |.macro comp_vi_int,instr
    |  LdInt RREGL,ARG2F
    |  comp_cmp_int,instr
    |  Dispatch
    |.endmacro

    |.macro comp_vr_real,instr
    |  LdReal xmm1,ARG2F
    |  movsd xmm0, qword [STK+ARG1F*8]
    |  comp_cmp_real,instr
    |  Dispatch
    |.endmacro

    |.macro comp_vr_int,instr
    |  LdReal xmm1,ARG2F
    |  cvtsi2sd xmm0,dword [STK+ARG1F*8]
    |  comp_cmp_real,instr
    |  Dispatch
    |.endmacro

    case BC_LTVI:
      |=>bc:
      |  comp_vx_pre,BC_LTVI,InterpDoCompareVI
      |1:
      |  comp_vi_real,cmovl
      |2:
      |  comp_vi_int,cmovl
      break;
    case BC_LTVR:
      |=>bc:
      |  comp_vx_pre,BC_LTVR,InterpDoCompareVR
      |1:
      |  comp_vr_real,cmovl
      |2:
      |  comp_vr_int ,cmovl
      break;
    case BC_LEVI:
      |=>bc:
      |  comp_vx_pre,BC_LEVI,InterpDoCompareVI
      |1:
      |  comp_vi_real,cmovle
      |2:
      |  comp_vi_int ,cmovle
      break;
    case BC_LEVR:
      |=>bc:
      |  comp_vx_pre,BC_LEVR,InterpDoCompareVR
      |1:
      |  comp_vr_real,cmovle
      |2:
      |  comp_vr_int ,cmovle
      break;
    case BC_GTVI:
      |=>bc:
      |  comp_vx_pre,BC_GTVI,InterpDoCompareVI
      |1:
      |  comp_vi_real,cmovg
      |2:
      |  comp_vi_int ,cmovg
      break;
    case BC_GTVR:
      |=>bc:
      |  comp_vx_pre,BC_GTVR,InterpDoCompareVR
      |1:
      |  comp_vr_real, cmovg
      |2:
      |  comp_vr_int , cmovg
      break;
    case BC_GEVI:
      |=>bc:
      |  comp_vx_pre,BC_GEVI,InterpDoCompareVI
      |1:
      |  comp_vi_real ,cmovge
      |2:
      |  comp_vi_int  ,cmovge
      break;
    case BC_GEVR:
      |=>bc:
      |  comp_vx_pre,BC_GEVR,InterpDoCompareVR
      |1:
      |  comp_vr_real ,cmovge
      |2:
      |  comp_vr_int  ,cmovge
      break;
    case BC_EQVI:
      |=>bc:
      |  comp_vx_pre,BC_EQVI,InterpDoCompareVI
      |1:
      |  comp_vi_real ,cmove
      |2:
      |  comp_vi_int  ,cmove
      break;
    case BC_EQVR:
      |=>bc:
      |  comp_vx_pre,BC_EQVR,InterpDoCompareVR
      |1:
      |  comp_vr_real ,cmove
      |2:
      |  comp_vr_int  ,cmove
      break;
    case BC_NEVI:
      |=>bc:
      |  comp_vx_pre,BC_NEVI,InterpDoCompareVI
      |1:
      |  comp_vi_real ,cmovne
      |2:
      |  comp_vi_int  ,cmovne
      break;
    case BC_NEVR:
      |=>bc:
      |  comp_vx_pre,BC_NEVR,InterpDoCompareVR
      |1:
      |  comp_vr_real ,cmovne
      |2:
      |  comp_vr_int  ,cmovne
      break;


    /* --------------------------------------------------------
     * comparison VV
     *
     * We do inline type promotion and comparison for all
     * numeric type
     * --------------------------------------------------------*/
    |.macro comp_vv_pre,BC,instr
    |  instr_E
    |  mov LREG, qword [STK+ARG1F*8]
    |  mov RREG, qword [STK+ARG2F*8]
    |  cmp LREGL, Value::FLAG_INTEGER
    |  jne >1 // int && xx
    |  cmp RREGL, Value::FLAG_INTEGER
    |  jne >2 // int && xx
    |  shr LREG,32
    |  shr RREG,32
    |  mov T1L, Value::FLAG_TRUE
    |  mov T2L, Value::FLAG_FALSE
    |  cmp LREGL,RREGL
    |  instr T1L,T2L
    |  mov dword [STK+ACCFIDX], T1L
    |  Dispatch

    |1:
    |  cmp LREGL, Value::FLAG_REAL
    |  jnb >6
    //  real && xx
    |  cmp RREGL, Value::FLAG_REAL
    |  jb >3
    |  cmp RREGL, Value::FLAG_INTEGER
    |  jne >6
    // promotion real && int
    |  movd xmm0,LREG
    |  shr RREG,32
    |  cvtsi2sd xmm1,RREGL
    |  jmp >3

    |2:
    |  cmp RREGL, Value::FLAG_REAL
    |  jnb >6
    // promotion int && real
    |  shr LREG,32
    |  cvtsi2sd xmm0,LREGL
    |  movd xmm1, RREGL

    |3: // real && real
    |  mov T1L, Value::FLAG_TRUE
    |  mov T2L, Value::FLAG_FALSE
    |  ucomisd xmm0,xmm1
    |  instr T1L,T2L
    |  mov dword [STK+ACCFIDX], T1L
    |  Dispatch

    // slow path
    |6:
    | jmp ->InterpCompareVV

    |.endmacro

    case BC_LTVV:
      |=>bc:
      |  comp_vv_pre,BC_LTVV,cmovl
      break;
    case BC_LEVV:
      |=>bc:
      |  comp_vv_pre,BC_LEVV,cmovle
      break;
    case BC_GTVV:
      |=>bc:
      |  comp_vv_pre,BC_GTVV,cmovg
      break;
    case BC_GEVV:
      |=>bc:
      |  comp_vv_pre,BC_GEVV,cmovge
      break;
    case BC_EQVV:
      |=>bc:
      |  comp_vv_pre,BC_EQVV,cmove
      break;
    case BC_NEVV:
      |=>bc:
      |  comp_vv_pre,BC_NEVV,cmovne
      break;

    /* ------------------------------------------------------------
     * Comparison SV/VS
     *
     * For this sort of cases, we don't inline anything for none EQ/NE
     * comparison but just call the function to perform the comparison
     * -----------------------------------------------------------*/
    |.macro comp_str,BC,instrDecoder,SlowPath
    |  instrDecoder
    |  jmp ->SlowPath
    |.endmacro

    case BC_LTSV:
      |=> bc:
      |  comp_str BC_LTSV,instr_C,InterpCompareSV
      break;
    case BC_LTVS:
      |=> bc:
      |  comp_str BC_LTSV,instr_B,InterpCompareVS
      break;
    case BC_LESV:
      |=> bc:
      |  comp_str BC_LESV,instr_C,InterpCompareSV
      break;
    case BC_LEVS:
      |=> bc:
      |  comp_str BC_LEVS,instr_B,InterpCompareVS
      break;
    case BC_GTSV:
      |=> bc:
      |  comp_str BC_GTSV,instr_C,InterpCompareSV
      break;
    case BC_GTVS:
      |=> bc:
      |  comp_str BC_GTVS,instr_B,InterpCompareVS
      break;
    case BC_GESV:
      |=> bc:
      |  comp_str BC_GESV,instr_C,InterpCompareSV
      break;
    case BC_GEVS:
      |=> bc:
      |  comp_str BC_GEVS,instr_B,InterpCompareVS
      break;

    |.macro comp_sv,BC,SlowPath,instr
    |  instr_B
    |  LdStr LREG,ARG1F
    |  mov RREG  ,qword [STK+ARG2F*8]
    |  CheckSSO LREG,1
    |  CheckSSOV RREG,1
    |  mov T1L, Value::FLAG_FALSE
    |  mov T2L, Value::FLAG_TRUE
    |  test LREG,RREG
    |  instr T1L,T2L
    |  mov dword [STK+ACCFIDX],T1L
    |  Dispatch

    |1:
    |  jmp ->SlowPath
    |.endmacro

    |.macro comp_vs,BC,SlowPath,instr
    |  instr_C
    |  mov LREG, qword [STK+ARG1F*8]
    |  LdStr RREG,ARG2F
    |  CheckSSOV LREG,1
    |  CheckSSO  RREG,1
    |  mov T1L, Value::FLAG_FALSE
    |  mov T2L, Value::FLAG_TRUE
    |  test LREG,RREG
    |  instr T1L,T2L
    |  mov dword [STK+ACCFIDX],T1L
    |  Dispatch

    |1:
    |  jmp ->SlowPath
    |.endmacro

    case BC_EQSV:
      |=> bc:
      |  comp_sv BC_EQSV,InterpCompareSV,cmove
      break;
    case BC_EQVS:
      |=> bc:
      |  comp_vs BC_EQVS,InterpCompareVS,cmove
      break;
    case BC_NESV:
      |=>bc:
      |  comp_sv BC_NESV,InterpCompareSV,cmovne
      break;
    case BC_NEVS:
      |=>bc:
      |  comp_vs BC_NEVS,InterpCompareVS,cmovne
      break;

    /* -------------------------------------------------
     * Unary                                           |
     * ------------------------------------------------*/

    // inline integers and reals inlined to be processed
    // and other types are throwed away to the slower
    // functions to help since we may need to support meta
    // function in the future
    case BC_NEGATE:
      |=> bc:
      |  instr_F
      |  mov LREG, qword [STK+ARG1F*8]
      |  CheckNum ARG1,LREG,1,2
      |  jmp ->InterpNegate

      // real
      |1:
      |  movd xmm0,LREG
      |  LdRConst_sign xmm1
      |  xorpd xmm0, xmm1
      |  movsd qword [STK+ARG1F*8], xmm0
      |  Dispatch

      // int
      |2:
      |  neg dword [STK+ARG1F*8]
      // TODO:: overflow ??
      |  Dispatch
      break;

    case BC_NOT:
      |=> bc:
      |  instr_F
      |  mov LREG, qword [STK+ARG1F*8]
      |  mov RREGL, dword [STK+ARG1F*8+4]

      // TODO::Optimize
      //
      // The following *flat* comparison table is not
      // good since in worst cases for (null) we need
      // 5 comparison to be executed. Maybe we can have
      // a better comparison table for the following
      // comparison
      |  cmp RREGL, Value::FLAG_TRUE;    je >1
      |  cmp RREGL, Value::FLAG_FALSE;   je >2
      |  cmp RREGL, Value::FLAG_INTEGER; je >3
      |  cmp RREGL, Value::FLAG_REAL;    jb >4
      |  cmp RREGL, Value::FLAG_NULL;    je >5
      |  jmp ->InterpNot

      |1: // true
      |  mov dword [STK+ARG1F*8+4], Value::FLAG_FALSE
      |  jmp >6

      |2: // false
      |  mov dword [STK+ARG1F*8+4], Value::FLAG_TRUE
      |  jmp >6

      |3: // int
      |.if 0
      |  test LREGL, LREGL
      |  je >7
      |  mov dword [STK+ARG1F*8+4], Value::FLAG_FALSE
      |  jmp >6
      |7:
      |  mov dword [STK+ARG1F*8+4], Value::FLAG_TRUE
      |  jmp >6
      |.else
      |  mov T1L, Value::FLAG_FALSE
      |  mov T2L, Value::FLAG_TRUE
      |  test LREGL,LREGL
      |  cmove T1L, T2L
      |  mov dword [STK+ARG1F*8+4], T1L
      |  jmp >6
      |.endif

      |4: // real
      |  movd xmm0, LREG
      |  pxor xmm1,xmm1
      |  mov T1L, Value::FLAG_FALSE
      |  mov T2L, Value::FLAG_TRUE
      |  ucomisd xmm0,xmm1
      |  cmove T1L,T2L
      |  mov dword [STK+ARG1F*8+4],T1L
      |  jmp >6

      |5: // null
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
      |  jmp >6

      |6:
      |  Dispatch
      break;

    // ------------------------------------------------
    // Branch                                         |
    // -----------------------------------------------*/

    // branch PC
    |.macro branch_to,where
    |  mov T1,qword SAVED_PC
    |  lea PC,[T1+where*4]
    |.endmacro

    // jump macro -------------------------------------------------
    // inline int/real/true/false/null here to perform the jump
    // rest of the type goes to slow path to *convert* to boolean
    //
    // assume T1 holds the flag; REG holds the actual Value;REGL holds
    // the lower 32 bits
    |.macro do_cond_jmp,SlowPath,REG,REGL,tflag,fflag,last_jmp

    |  cmp T1L, Value::FLAG_TRUE ;    je >tflag
    |  cmp T1L, Value::FLAG_FALSE;    je >fflag
    |  cmp T1L, Value::FLAG_NULL ;    je >fflag
    |  cmp T1L, Value::FLAG_INTEGER;  je >7
    |  cmp T1L, Value::FLAG_REAL;     jb >8
    |  jmp ->SlowPath

    |7:  // int
    |  test REGL,REGL
    |  je >fflag
    |  jmp >tflag

    |8:  // real
    |  pxor xmm1,xmm1
    |  movd xmm0,REG
    |  ucomisd xmm0,xmm1
    |  last_jmp
    |.endmacro


    case BC_JMPT:
      |=>bc:
      |  instr_B
      |  mov LREG,qword [STK+ARG1F*8]
      |  mov T1,LREG
      |  shr T1,32
      |  do_cond_jmp InterpJmpT,LREG,LREGL,1,2, je >2
      |1:  // true branch
      |  branch_to ARG2
      |2:  // false branch
      |  Dispatch
      break;

    case BC_JMPF:
      |=>bc:
      |  instr_B
      |  mov LREG,qword [STK+ARG1F*8]
      |  mov T1,LREG
      |  shr T1,32
      |  do_cond_jmp InterpJmpF,LREG,LREGL,2,1, jne >2
      |1: // false condition
      |  branch_to ARG2
      |2: // true condition
      |  Dispatch
      break;

    case BC_AND:
      |=>bc:
      |  instr_G
      |  mov LREG,qword [ACC]
      |  mov T1,LREG
      |  shr T1,32
      |  do_cond_jmp InterpAnd,LREG,LREGL,2,1, jne >2
      |1: // false condition
      |  branch_to ARG1
      |2: // true condition
      |  Dispatch
      break;

    case BC_OR:
      |=>bc:
      |  instr_G
      |  mov LREG,qword [ACC]
      |  mov T1,LREG
      |  shr T1,32
      |  do_cond_jmp InterpOr,LREG,LREGL,1,2, je >2
      |1:  // true condition
      |  branch_to ARG1
      |2:
      |  Dispatch
      break;

    case BC_JMP:
      |=>bc:
      |  instr_G
      |  branch_to ARG1
      |  Dispatch
      break;

    // ----------------------------------------------------------
    // Property/Upvalue/Global
    // ---------------------------------------------------------*/
    static_assert( sizeof(Map::Entry) == 24 );

    // A better way to implement property get/set is via IC (inline cache)
    // but currently we don't have IC states at bytecode level and we will
    // add it guide the JIT compilation phase. For interpreter, we will use
    // something simpler but good to capture most of the cases. Since we force
    // our internal hash use SSO's default hash value to serve as hash value
    // of the key, so we will use a trick that is used in LuaJIT here. For
    // key that is SSO, we will retrieve its hash value out and directly generate
    // index to anchor its main position inside of the *chain* and if we miss
    // we will fallback to the slow path

    // LREG --> Object*
    // RREG --> SSO*
    |.macro find_sso_pos,output
    |  mov T2,LREG

    || if(MapLayout::kCapacityOffset) {
    |    mov T2L, dword [T2+MapLayout::kCapacityOffset]
    || } else {
    |    mov T2L, dword [T2]
    || }

    || if(SSOLayout::kHashOffset) {
    |    mov T1L, dword [RREG+SSOLayout::kHashOffset]
    || } else {
    |    mov T1L, dword [RREG]
    || }

    // T2L capacity , T1L size
    |  sub T2L,1

    // T1L -> index
    |  and T1L,T2L

    // index into the array
    |  lea T2L, [LREG+(MapLayout::kArrayOffset)]
    |  lea T1L, [T1L+T1L*2]
    |  lea T2L, [T2L+T1L*8]

    // save map's starting address
    |  lea T1 , [LREG+MapLayout::kArrayOffset]

    // 1. check if this entry is *deleted* or *used*
    |  mov LREGL, dword [T2L+MapEntryLayout::kFlagOffset]
    |  test LREGL,((1<<30))
    |  je >7  // not found main position is empty

    |1:
    // 2. check if it is deleted
    |  test LREGL,((1<<31))
    |  jne >6 // deleted slots

    // 3. check if the key is a SSO
    |  mov LREG, qword [T2L]
    |  CheckSSO LREG,6
    |  mov LREG, qword [LREG]
    |  cmp LREG, RREG
    |  jne >6 // string not identical

    // now we find the entry
    |  mov T2,qword [T2L+MapEntryLayout::kValueOffset]
    |  mov qword [STK+output*8], T2
    |  Dispatch

    // move to next iteration
    |6:
    |  mov LREGL, dword [T2L+MapEntryLayout::kFlagOffset]
    |  test LREGL,((1<<29))
    |  je >7
    |  and LREGL, ((bits::BitOn<std::uint32_t,0,29>::value))
    |  lea T2L  , [LREGL+LREGL*2]
    |  lea T2L  , [T1+T2L*8]
    |  mov LREGL, dword [T2L*8+MapEntryLayout::kFlagOffset]
    |  jmp <1

    |7:
    |  jmp ->InterpPropGetNotFound

    |.endmacro

    case BC_PROPGET:
      |=>bc:
      |  instr_B

      |.if 1
      |  cmp word [STK+ARG1F*8+6],Value::FLAG_HEAP
      |  jne >8
      |  mov LREG, qword [STK+ARG1F*8]
      |  CheckObj LREG,9
      |.else
      |  mov LREG, qword [STK+ARG1F*8]
      |  CheckObjV LREG,9
      |.endif

      |  LdStr RREG,ARG2F
      // assume RREG is an heap object since this should be guaranteed
      // by front-end
      |  DerefPtrFromV RREG
      |  CheckSSO RREG,8

      // find sso's position
      |  find_sso_pos ACCIDX

      |8: // should be done by slow path of InterpPorpGet
      |  jmp ->InterpPropGet

      |9: // failed at *object*
      |  jmp ->InterpPropGetNotObject
      break;

    case BC_PROPSET:
      // propset is directly yielded back to C++ functions
      |=>bc:
      |  jmp ->InterpPropSet
      break;

    case BC_IDXGET:
      |=>bc:
      |  jmp ->InterpIdxGet
      break;
    case BC_IDXSET:
      |=>bc:
      |  jmp ->InterpIdxSet
      break;

    // IDXGETI means using integer index to fetch a value from object
    // we will optimize cases that the object is an List. Basically
    // inline the memory access right inside of the assembly code. For
    // rest of the cases, we yield back to C++ functions to take care of
    case BC_IDXGETI:
      |=>bc:
      |  instr_B

      // check if object is a list
      |.if 1
      |  cmp word [STK+ARG1F*8+6],Value::FLAG_HEAP
      |  jne >9
      |  mov LREG,qword [STK+ARG1F*8]
      |  CheckList LREG,9
      |.else
      |  mov LREG,qword [STK+ARG1F*8]
      |  CheckListV LREG,9
      |.endif

      // load the integer into RREGL
      |  LdInt RREGL,ARG2F

      // check if index out of boundary
      |  mov T1L, dword [LREG+ListLayout::kSizeOffset]
      |  cmp T1L, RREGL
      |  jnb >8 // index outof boundary

      // check if T1L is negative value since we don't
      // handle the negative value right here
      |  test T1L,T1L
      |  js >9

      // get the Slice object out of List
      |  mov LREG, qword [LREG+ListLayout::kSliceOffset]
      |  mov LREG, qword [LREG]  // Slice*

      // grab the element out of the array
      |  mov LREG, qword [LREG+LREG*8+SliceLayout::kArrayOffset]
      |  mov qword [ACC], LREG
      |  Dispatch

      |9:
      |  jmp ->InterpIdxGetI

      |8:
      |  jmp ->InterpIdxGetIOutOfBoundary
      break;

    case BC_UVGET:
      |=>bc:
      |  instr_B
      |  LdUV LREG,ARG2F
      |  mov  qword [STK+ARG1F*8], LREG
      |  Dispatch
      break;

    case BC_UVSET:
      |=>bc:
      |  instr_C
      |  mov RREG, qword [STK+ARG2F*8]
      |  StUV ARG1F,RREG
      |  Dispatch
      break;

    case BC_GSET:
      |=>bc:
      |  jmp ->InterpGSet
      break;

    case BC_GGET:
      |=>bc:
      |  jmp ->InterpGGet
      break;

    default:
      |=> bc:
      |  Break
      break;
  }
}

// Help Dasm to resolve external address via Index idx
int ResolveExternAddress( void** ctx , unsigned char* addr ,
                                       int idx,
                                       int type ) {
  (void)ctx;

  ExternSymbolTable* t = GetExternSymbolTable();
  ExternSymbolTable::iterator itr = t->find(extnames[idx]);

  lava_verify( itr != t->end() );

  void* ptr = itr->second;
  lava_verify(CheckAddress(reinterpret_cast<std::uintptr_t>(ptr)));

  int iptr = HorribleCast(ptr);
  lava_verify(reinterpret_cast<void*>(iptr) == ptr);

  if(type) {
    int end = HorribleCast(addr+4);

    // Check whether the address is overflowed or not. I think this is
    // not needed but just in cases we have a bug so we don't end up
    // calling into some wired places into our code
    std::int64_t ptr64 = static_cast<std::int64_t>(iptr);
    std::int64_t end64 = static_cast<std::int64_t>(end);

    lava_verify( (ptr64-end64) >= std::numeric_limits<int>::min() &&
                 (ptr64-end64) <= std::numeric_limits<int>::max() );

    return iptr - HorribleCast(addr+4);
  } else {
    return iptr;
  }
}

} // namespace

AssemblyInterpreter::AssemblyInterpreter():
  dispatch_interp_(),
  dispatch_record_(),
  dispatch_jit_   (),
  interp_helper_  (),
  interp_entry_   (),
  code_buffer_    (),
  code_size_      (),
  buffer_size_    ()
{}

AssemblyInterpreter::~AssemblyInterpreter() {
  if(interp_entry_) OS::FreeCodePage(code_buffer_,buffer_size_);
}

std::shared_ptr<AssemblyInterpreter> AssemblyInterpreter::Generate() {
  static std::shared_ptr<AssemblyInterpreter> interp;
  if(interp) return interp; // return interp if we already have a interpreter pointer

  // create a new interp object since this is our first time
  interp.reset( new AssemblyInterpreter() );

  // create a build context
  BuildContext bctx;

  // initialize dasm_State object
  dasm_init(&(bctx.dasm_ctx),2);

  // setup the freaking global
  void* glb_arr[GLBNAME__MAX];
  dasm_setupglobal(&(bctx.dasm_ctx),glb_arr,GLBNAME__MAX);

  // setup the dasm
  dasm_setup(&(bctx.dasm_ctx),actions);

  // initialize the tag value needed , at least for each BC we need one
  bctx.tag = DASM_GROWABLE_PC_SIZE;
  dasm_growpc(&(bctx.dasm_ctx), DASM_GROWABLE_PC_SIZE );

  // Order matters, it may change profile of our icache

  // build the helper
  GenerateHelper(&bctx);

  // build the prolog
  GenerateInterpMisc(&bctx);

  // generate all bytecode's routine
  for( int i = static_cast<int>(BC_ADDIV) ; i < SIZE_OF_BYTECODE ; ++i ) {
    GenerateOneBytecode(&bctx,static_cast<Bytecode>(i));
  }

  std::size_t code_size;

  // we should never fail at *linking* if our code is *correct*
  lava_verify(dasm_link(&(bctx.dasm_ctx),&code_size) ==0);

  // generate a buffer and set the proper protection field for that piece of
  // memory to make our code *work*
  std::size_t new_size;

  void* buffer = OS::CreateCodePage(code_size,&new_size);
  if(!buffer) {
    return std::shared_ptr<AssemblyInterpreter>();
  }

  // encode the assembly code into the buffer
  dasm_encode(&(bctx.dasm_ctx),buffer);

  // get all pc labels for entry of bytecode routine
  for( int i = static_cast<int>(BC_ADDIV) ; i < SIZE_OF_BYTECODE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp->dispatch_interp_[i] =
      reinterpret_cast<void*>(static_cast<char*>(buffer) + off);
  }

  // get all pc labels for helper routines
  for( int i = INTERP_HELPER_START ; i < DASM_GROWABLE_PC_SIZE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp->interp_helper_.push_back(
        reinterpret_cast<void*>(static_cast<char*>(buffer)+off));
  }

  // start of the code buffer
  interp->code_buffer_  = buffer;

  // get the *interpreter's* entry
  int off = dasm_getpclabel(&(bctx.dasm_ctx),INTERP_START);
  interp->interp_entry_ = reinterpret_cast<void*>(
      static_cast<char*>(buffer) + off);

  interp->buffer_size_  = new_size;
  interp->code_size_    = code_size;
  return interp;
}

Bytecode AssemblyInterpreter::CheckBytecodeRoutine( void* pc ) const {
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    void* p = reinterpret_cast<void*>(pc);
    if(p == dispatch_interp_[i]) {
      return static_cast<Bytecode>(i);
    }
  }
  return SIZE_OF_BYTECODE;
}

int AssemblyInterpreter::CheckHelperRoutine( void* pc ) const {
  std::vector<void*>::const_iterator itr =
    std::find( interp_helper_.begin() , interp_helper_.end() , pc );
  if(itr != interp_helper_.end()) {
    return (static_cast<int>(std::distance(interp_helper_.begin(),itr))+INTERP_HELPER_START);
  } else {
    return -1;
  }
}

void AssemblyInterpreter::Dump( DumpWriter* writer ) const {
  ZydisDecoder decoder;
  ZydisDecoderInit( &decoder, ZYDIS_MACHINE_MODE_LONG_64,
                              ZYDIS_ADDRESS_WIDTH_64);

  ZydisFormatter formatter;
  ZydisFormatterInit(&formatter,ZYDIS_FORMATTER_STYLE_INTEL);

  std::uint64_t pc = reinterpret_cast<std::uint64_t>(code_buffer_);
  std::uint8_t* rp = static_cast<std::uint8_t*>(code_buffer_);
  std::size_t size = code_size_;

  writer->WriteL("CodeSize:%zu",code_size_);
  ZydisDecodedInstruction instr;
  while(ZYDIS_SUCCESS(
        ZydisDecoderDecodeBuffer(&decoder,rp,size,pc,&instr))) {

    char buffer[256];
    ZydisFormatterFormatInstruction(
        &formatter,&instr,buffer,sizeof(buffer));
    // check labels
    {
      Bytecode bc = CheckBytecodeRoutine(reinterpret_cast<void*>(pc));
      if(bc != SIZE_OF_BYTECODE) {
        writer->WriteL("Bytecode ===========> %s:",GetBytecodeName(bc));
      } else {
        int idx = CheckHelperRoutine(reinterpret_cast<void*>(pc));
        if(idx >= 0) {
          writer->WriteL("Helper ===========> %s:",GetInterpHelperName(idx));
        }
      }
    }
    writer->WriteL("%016" PRIX64 " (%d) %s",pc,instr.length,buffer);
    rp += instr.length;
    size -= instr.length;
    pc += instr.length;
  }
}

AssemblyInterpreter::Instance::Instance( const std::shared_ptr<AssemblyInterpreter>& interp ):
  dispatch_interp_(),
  dispatch_record_(),
  dispatch_jit_   (),
  interp_         (interp)
{
  memcpy(dispatch_interp_,interp->dispatch_interp_,sizeof(dispatch_interp_));
  memcpy(dispatch_record_,interp->dispatch_record_,sizeof(dispatch_record_));
  memcpy(dispatch_jit_   ,interp->dispatch_jit_   ,sizeof(dispatch_jit_   ));
}

bool AssemblyInterpreter::Instance::Run( Context* context , const Handle<Script>& script ,
                                                            const Handle<Object>& globals,
                                                            std::string* error,
                                                            Value* rval ) {

  Runtime* rt = context->gc()->GetInterpreterRuntime(script.ref(),
                                                     globals.ref(),
                                                      error);
  // Entry of our assembly interpreter
  Main m = reinterpret_cast<Main>(interp_->interp_entry_);

  // Interpret the bytecode
  bool ret = m(rt,rt->cur_proto,reinterpret_cast<void*>(rt->stack),
                                const_cast<void*>(
                                  reinterpret_cast<const void*>((*(rt->cur_proto))->code_buffer())),
                                dispatch_interp_);
  // Check return
  if(ret) {
    *rval = rt->ret;
  }

  context->gc()->ReturnInterpreterRuntime(rt);
  return ret;
}

} // namespace interpreter
} // namespace lavascript
