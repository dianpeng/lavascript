/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM x64 version 1.3.0
** DO NOT EDIT! The original file is in "src/interpreter/bytecode-interpreter.dasc".
*/

#line 1 "src/interpreter/bytecode-interpreter.dasc"
#include "bytecode-interpreter.h"
#include "interpreter-frame.h"
#include "interpreter-runtime.h"

#include "src/context.h"
#include "src/trace.h"
#include "src/os.h"
#include "src/config.h"

#include <algorithm>
#include <map>
#include <cassert>
#include <climits>

#include <Zydis/Zydis.h>

extern "C" {
double pow(double,double);
}

namespace lavascript {
namespace interpreter{

inline void SetValueFlag( Value* v , std::uint32_t flag ) {
  v->raw_ = static_cast<std::uint64_t>(flag) << 32;
}

inline std::uint32_t GetValueFlag( const Value& v ) {
  return static_cast<std::uint32_t>(v.raw_ >>32);
}

namespace {

// Used in dynasm library
int ResolveExternAddress( void**,unsigned char*,int,int );

// Workaround for ODR
#include "dep/dynasm/dasm_proto.h"

#define DASM_EXTERN_FUNC(a,b,c,d) ResolveExternAddress((void**)a,b,c,d)
#include "dep/dynasm/dasm_x86.h"

// -------------------------------------------------------------
// BuildContext
//
// Build phase context, used to *generate* templated interpreter
// -------------------------------------------------------------
struct BuildContext {
  dasm_State* dasm_ctx;
  int tag;

  BuildContext():
    dasm_ctx(NULL),
    tag(0)
  {}

  ~BuildContext() {
    if(dasm_ctx) dasm_free(&dasm_ctx);
  }
};


// Shut the GCC's mouth fucked up
template< typename T >
int HorribleCast( T* ptr ) {
  std::uint64_t iptr = reinterpret_cast<std::uint64_t>(ptr);
  int ret = static_cast<int>(iptr);
  lava_verify(reinterpret_cast<T*>(ret) == ptr);
  return ret;
}


// ------------------------------------------------------------------
// Prototype for the main interpreter function
//
// @ARG1: runtime
// @ARG2: Prototype** of the function
// @ARG3: start of the stack
// @ARG4: start of the code buffer for the *Prototype*
// @ARG5: start of the dispatch table
typedef bool (*Main)(Runtime*,Prototype**,void*,void*,void*);

// ------------------------------------------------------------------
// Helper function/macros to register its literal name into a global
// table to help resolve the function's address during assembly link
// phase
// ------------------------------------------------------------------
typedef std::map<std::string,void*> ExternSymbolTable;

ExternSymbolTable* GetExternSymbolTable() {
  static ExternSymbolTable kTable;
  return &kTable;
}

// Macro to register a external function's symbol name into global table
#define INTERPRETER_REGISTER_EXTERN_SYMBOL(XX)                               \
  struct XX##_Registry {                                                     \
    XX##_Registry() {                                                        \
      ExternSymbolTable* table = GetExternSymbolTable();                     \
      table->insert(std::make_pair(#XX,reinterpret_cast<void*>(&XX)));       \
    }                                                                        \
  };                                                                         \
  static XX##_Registry k##XX##_Registry;


// ------------------------------------------------------------------
// Builtin libc function exposure section
// ------------------------------------------------------------------
INTERPRETER_REGISTER_EXTERN_SYMBOL(pow)


// -------------------------------------------------------------------
// Helper to set Value object to indicate special meaning
// -------------------------------------------------------------------
#define VALUE_FAIL Value::FLAG_1

/* --------------------------------------------------------------------------
 *
 * Interpreter C++ Part Function Implementation
 *
 * -------------------------------------------------------------------------*/

// ----------------------------------------------------------------------------
// Type Conversion
// ----------------------------------------------------------------------------
inline Value InterpreterToBoolean  ( Runtime* sandbox , Value val ) {
  (void)sandbox;
  (void)val;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterToBoolean)


// --------------------------------------------------------------------------
// Arithmetic Helper
// --------------------------------------------------------------------------
Value InterpreterDoArithmetic( Runtime* sandbox ,
                               Value left ,
                               Value right ) {
  (void)sandbox;
  (void)left;
  (void)right;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoArithmetic)

Value InterpreterPow         ( Runtime* sandbox ,
                               Value left,
                               Value right ) {
  (void)sandbox;
  (void)left;
  (void)right;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPow)

void InterpreterModByReal    ( Runtime* sandbox , std::uint32_t* pc ) {
  (void)sandbox;
  (void)pc;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterModByReal)

void InterpreterDivByZero    ( Runtime* sandbox , std::uint32_t* pc ) {
  (void)sandbox;
  (void)pc;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDivByZero)


// ---------------------------------------------------------------------------
// Comparison Helper
// ---------------------------------------------------------------------------
Value InterpreterDoCompare  ( Runtime* sandbox , Value left ,
                                                 Value right ) {
  (void)sandbox;
  (void)left;
  (void)right;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCompare)

// ----------------------------------------------------------------------------
// Unary Helper
// ----------------------------------------------------------------------------
bool InterpreterDoNegate   ( Runtime* sandbox , Value* operand ) {
  (void)sandbox;
  (void)operand;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNegate)

bool InterpreterDoNot      ( Runtime* sandbox , Value* operand ) {
  (void)sandbox;
  (void)operand;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNot)

// ----------------------------------------------------------------------------
// Jump Helper
// ----------------------------------------------------------------------------
void* InterpreterDoCondJmpT  ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondJmpT)

void* InterpreterDoCondJmpF  ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondJmpF)


void* InterpreterDoCondAnd   ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondAnd)

void* InterpreterDoCondOr    ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondOr)

// ----------------------------------------------------------------------------
// Literal Loader Helper
// ----------------------------------------------------------------------------
bool InterpreterDoLoadList0  ( Runtime* sandbox , Value* output ) {
  (void)sandbox;
  (void)output;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadList0)

bool InterpreterDoLoadList1  ( Runtime* sandbox , Value* output ,
                                                  Value e1 ) {
  (void)sandbox;
  (void)output;
  (void)e1;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadList1)

bool InterpreterDoLoadList2  ( Runtime* sandbox , Value* output ,
                                                  Value e1,
                                                  Value e2 ) {
  (void)sandbox;
  (void)output;
  (void)e1;
  (void)e2;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadList2)

bool InterpreterDoNewList   ( Runtime* sandbox , Value* output ,
                                                  std::uint32_t narg ) {
  (void)sandbox;
  (void)output;
  (void)narg;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNewList)

bool InterpreterDoAddList   ( Runtime* sandbox , Value* output ,
                                                 Value  val ) {
  (void)sandbox;
  (void)output;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoAddList)

bool InterpreterDoLoadObj0   ( Runtime* sandbox , Value* output ) {
  (void)sandbox;
  (void)output;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadObj0)

bool InterpreterDoLoadObj1   ( Runtime* sandbox , Value* output ,
                                                  Value  key,
                                                  Value  val ) {
  (void)sandbox;
  (void)output;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadObj1)

bool InterpreterDoNewObj    ( Runtime* sandbox , Value* output ,
                                                 std::uint32_t narg ) {
  (void)sandbox;
  (void)output;
  (void)narg;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNewObj)

bool InterpreterDoAddObj    ( Runtime* sandbox , Value* output ,
                                                 Value  key,
                                                 Value  val ) {
  (void)sandbox;
  (void)output;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoAddObj)

bool InterpreterDoLoadCls   ( Runtime* sandbox , Value* start_of_stack ,
                                                 std::uint32_t prototype_id ) {
  (void)sandbox;
  (void)start_of_stack;
  (void)prototype_id;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoLoadCls)

// ----------------------------------------------------------------------------
// Property Get/Set
// ----------------------------------------------------------------------------
Value InterpreterDoPropGet   ( Runtime* sandbox , Value obj , String** key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoPropGet)

void InterpreterPropGetNotFound( Runtime* sandbox , Value obj , String** key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGetNotFound)

void InterpreterPropGetNotObject( Runtime* sandbox, Value obj , String** key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGetNotObject)

bool InterpreterDoPropSet      ( Runtime* sandbox , Value obj , String** key ,
                                                                Value val ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoPropSet)

Value InterpreterDoIdxGet      ( Runtime* sandbox , Value obj , Value key ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoIdxGet)

Value InterpreterDoIdxGetI     ( Runtime* sandbox , Value obj , std::int32_t idx ) {
  (void)sandbox;
  (void)obj;
  (void)idx;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoIdxGetI)

bool InterpreterDoIdxSet      ( Runtime* sandbox , Value obj , Value key ,
                                                               Value val ) {
  (void)sandbox;
  (void)obj;
  (void)key;
  (void)val;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoIdxSet)

bool InterpreterDoGGet       ( Runtime* sandbox , Value* output , String** key ) {
  (void)sandbox;
  (void)key;
  (void)output;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoGGet)

bool InterpreterDoGSet       ( Runtime* sandbox , String** key , Value value ) {
  (void)sandbox;
  (void)key;
  (void)value;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoGSet)


/* ---------------------------------------------------------------------
 *
 * Implementation of AssemblyIntepreter
 *
 * --------------------------------------------------------------------*/
//|.arch x64
#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif
#line 454 "src/interpreter/bytecode-interpreter.dasc"
//|.actionlist actions
static const unsigned char actions[11298] = {
  254,1,248,10,237,237,255,248,11,237,237,255,248,12,0,0,0,0,0,0,0,0,255,254,
  0,249,248,13,255,72,131,252,236,72,76,137,100,36,40,76,137,108,36,32,76,137,
  116,36,24,76,137,124,36,16,72,137,108,36,8,72,137,92,36,48,255,73,137,252,
  252,73,137,252,245,73,137,214,72,137,205,77,137,199,255,72,137,12,36,255,
  139,69,0,72,15,182,200,72,137,207,255,232,251,1,0,255,72,184,237,237,252,
  255,208,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,
  255,249,248,14,49,192,76,139,100,36,40,76,139,108,36,32,76,139,116,36,24,
  76,139,124,36,16,72,139,108,36,8,72,139,92,36,48,72,131,196,72,195,255,249,
  248,15,73,139,134,252,248,7,0,0,73,137,132,253,36,233,72,199,192,1,0,0,0,
  255,249,248,16,15,182,216,73,137,172,253,36,233,76,137,231,73,141,52,222,
  255,232,251,1,1,255,133,192,15,132,244,14,139,69,0,72,15,182,200,72,137,207,
  255,249,248,17,15,182,216,193,232,8,73,137,172,253,36,233,76,137,231,73,141,
  52,222,73,139,52,198,255,232,251,1,2,255,249,248,18,72,15,182,216,193,232,
  8,15,182,204,13,252,255,0,0,0,73,137,172,253,36,233,76,137,231,73,141,52,
  222,73,139,20,198,73,139,12,206,255,232,251,1,3,255,249,248,19,72,15,182,
  216,193,232,8,73,137,172,253,36,233,76,137,231,73,141,52,222,137,194,255,
  232,251,1,4,255,249,248,20,15,182,216,193,232,8,73,137,172,253,36,233,76,
  137,231,73,141,52,222,73,139,20,198,255,232,251,1,5,255,249,248,21,15,182,
  216,73,137,172,253,36,233,76,137,231,73,141,52,222,255,232,251,1,6,255,249,
  248,22,72,15,182,216,193,232,8,15,182,204,13,252,255,0,0,0,73,137,172,253,
  36,233,76,137,231,73,141,52,222,73,139,20,198,73,139,12,206,255,232,251,1,
  7,255,249,248,23,72,15,182,216,193,232,8,73,137,172,253,36,233,76,137,231,
  73,141,52,222,137,194,255,232,251,1,8,255,249,248,24,72,15,182,216,193,232,
  8,15,182,204,13,252,255,0,0,0,73,137,172,253,36,233,76,137,231,73,141,52,
  222,73,139,20,198,73,139,12,206,255,232,251,1,9,255,249,248,25,72,15,183,
  216,73,137,172,253,36,233,76,137,231,76,137,252,246,137,218,255,232,251,1,
  10,255,249,248,26,73,137,172,253,36,233,76,137,231,77,139,93,0,77,139,147,
  233,72,190,237,237,65,11,52,154,255,232,251,1,11,255,73,137,195,73,193,252,
  235,32,73,129,252,251,239,15,132,244,14,73,137,134,252,248,7,0,0,139,69,0,
  72,15,182,200,72,137,207,255,249,248,27,73,137,172,253,36,233,76,137,231,
  77,139,93,0,77,139,147,233,72,186,237,237,65,11,20,130,255,249,248,28,73,
  137,172,253,36,233,76,137,231,77,139,93,0,77,139,147,233,73,139,52,218,255,
  249,248,29,73,137,172,253,36,233,76,137,231,77,139,93,0,77,139,147,233,73,
  139,20,194,255,249,248,30,73,137,172,253,36,233,76,137,231,73,139,52,222,
  73,139,20,198,255,249,248,31,73,137,172,253,36,233,76,137,231,77,139,93,0,
  77,139,147,233,72,190,237,237,65,11,52,154,73,139,20,198,255,232,251,1,12,
  255,249,248,32,73,137,172,253,36,233,76,137,231,77,139,93,0,77,139,147,233,
  73,139,52,218,73,139,20,198,255,249,248,33,73,137,172,253,36,233,76,137,231,
  73,139,52,222,77,139,93,0,77,139,147,233,72,186,237,237,65,11,20,130,255,
  249,248,34,73,137,172,253,36,233,76,137,231,73,139,52,222,77,139,93,0,77,
  139,147,233,73,139,20,194,255,249,248,35,73,137,172,253,36,233,76,137,231,
  73,139,52,222,77,139,93,0,77,139,147,233,73,139,20,194,255,249,248,36,76,
  137,231,72,141,117,252,252,255,232,251,1,13,255,252,233,244,14,255,249,248,
  37,76,137,231,72,141,117,252,252,255,232,251,1,14,255,249,248,38,73,137,172,
  253,36,233,76,137,231,77,139,93,0,77,139,147,233,72,190,237,237,65,11,52,
  154,73,139,20,198,255,232,251,1,15,255,249,248,39,73,137,172,253,36,233,76,
  137,231,73,139,52,222,77,139,93,0,77,139,147,233,72,186,237,237,65,11,20,
  130,255,249,248,40,73,137,172,253,36,233,76,137,231,77,139,93,0,77,139,147,
  233,73,139,52,194,73,139,20,198,255,249,248,41,73,137,172,253,36,233,76,137,
  231,73,139,52,222,77,139,93,0,77,139,147,233,73,139,20,194,255,249,248,42,
  73,137,172,253,36,233,76,137,231,73,139,52,222,73,139,20,198,255,249,248,
  43,72,15,183,216,193,232,16,73,137,172,253,36,233,76,137,231,77,139,93,0,
  77,139,147,233,77,139,28,218,72,199,198,237,72,193,230,48,76,9,222,73,139,
  52,198,255,249,248,44,72,15,182,216,193,232,8,73,137,172,253,36,233,76,137,
  231,73,139,52,222,77,139,93,0,77,139,147,233,77,139,28,194,72,199,194,237,
  72,193,226,48,76,9,218,255,249,248,45,73,137,172,253,36,233,76,137,231,73,
  141,52,222,255,232,251,1,16,255,249,248,46,73,137,172,253,36,233,76,137,231,
  73,141,52,222,255,232,251,1,17,255,249,248,47,73,137,172,253,36,233,76,137,
  231,73,139,52,222,77,139,93,0,77,139,147,233,73,139,20,194,255,232,251,1,
  18,255,249,248,48,73,137,172,253,36,233,76,137,231,73,139,52,222,77,139,93,
  0,77,139,147,233,73,139,20,218,255,232,251,1,19,255,249,248,49,73,137,172,
  253,36,233,76,137,231,73,139,52,222,77,139,93,0,77,139,147,233,73,139,20,
  194,255,232,251,1,20,255,249,248,50,72,15,182,216,193,232,8,73,137,172,253,
  36,233,76,137,231,73,139,182,252,248,7,0,0,73,139,20,222,77,139,93,0,77,139,
  147,233,73,139,12,194,255,232,251,1,21,255,249,248,51,15,182,216,193,232,
  8,73,137,172,253,36,233,76,137,231,73,139,52,222,73,139,20,198,255,232,251,
  1,22,255,249,248,52,73,137,172,253,36,233,76,137,231,73,139,52,222,77,139,
  93,0,77,139,147,233,65,139,20,130,255,232,251,1,23,255,249,248,53,72,15,183,
  216,193,232,16,73,137,172,253,36,233,76,137,231,77,139,93,0,77,139,147,233,
  73,139,52,218,73,139,20,198,255,232,251,1,24,255,249,248,54,72,15,182,216,
  193,232,8,73,137,172,253,36,233,76,137,231,73,141,52,222,77,139,93,0,77,139,
  147,233,73,139,20,194,255,232,251,1,25,255,249,65,199,134,252,252,7,0,0,237,
  252,233,244,15,255,249,252,233,244,15,255,249,15,182,216,193,232,8,77,139,
  28,198,77,137,28,222,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,
  216,193,232,8,77,139,93,0,77,139,147,233,65,139,52,130,65,137,52,222,65,199,
  68,222,4,237,139,69,0,72,15,182,200,72,137,207,255,249,15,182,216,65,199,
  4,222,0,0,0,0,65,199,68,222,4,237,139,69,0,72,15,182,200,72,137,207,255,249,
  15,182,216,65,199,4,222,1,0,0,0,65,199,68,222,4,237,139,69,0,72,15,182,200,
  72,137,207,255,249,15,182,216,65,199,4,222,252,255,252,255,252,255,252,255,
  65,199,68,222,4,237,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,
  193,232,8,77,139,93,0,77,139,147,233,252,242,65,15,16,4,194,252,242,65,15,
  17,4,222,139,69,0,72,15,182,200,72,137,207,255,249,15,182,216,65,199,68,222,
  4,237,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,8,77,
  139,93,0,77,139,147,233,77,139,28,194,72,199,198,237,72,193,230,48,76,9,222,
  73,137,52,222,139,69,0,72,15,182,200,72,137,207,255,249,252,233,244,16,255,
  249,252,233,244,17,255,249,252,233,244,18,255,249,252,233,244,19,255,249,
  252,233,244,20,255,249,252,233,244,21,255,249,252,233,244,22,255,249,252,
  233,244,23,255,249,252,233,244,24,255,249,252,233,244,25,255,249,72,15,183,
  216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,
  255,65,139,12,198,77,139,93,0,77,139,147,233,65,139,4,154,133,192,15,132,
  244,36,153,252,247,252,249,65,137,134,252,248,7,0,0,65,199,134,252,252,7,
  0,0,237,255,77,139,93,0,77,139,147,233,65,139,52,154,1,214,65,137,182,252,
  248,7,0,0,65,199,134,252,252,7,0,0,237,255,139,69,0,72,15,182,200,72,131,
  197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,26,77,
  139,93,0,77,139,147,233,252,242,65,15,42,4,154,102,72,15,110,202,252,242,
  15,88,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,
  207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,
  249,239,15,133,244,248,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,
  252,242,15,42,202,252,242,15,88,193,252,242,65,15,17,134,252,248,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,
  232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,28,77,139,93,0,77,
  139,147,233,252,242,65,15,16,4,218,102,72,15,110,202,252,242,15,88,193,252,
  242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,77,139,
  93,0,77,139,147,233,65,139,52,154,41,214,65,137,182,252,248,7,0,0,65,199,
  134,252,252,7,0,0,237,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,
  252,255,36,207,248,2,129,252,249,239,15,131,244,26,77,139,93,0,77,139,147,
  233,252,242,65,15,42,4,154,102,72,15,110,202,252,242,15,92,193,252,242,65,
  15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,
  216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,
  77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,252,242,15,42,202,252,242,
  15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,
  207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,
  2,129,252,249,239,15,131,244,28,77,139,93,0,77,139,147,233,252,242,65,15,
  16,4,218,102,72,15,110,202,252,242,15,92,193,252,242,65,15,17,134,252,248,
  7,0,0,139,69,0,72,15,182,200,72,137,207,255,77,139,93,0,77,139,147,233,65,
  139,52,154,15,175,252,242,65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,
  0,237,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,
  248,2,129,252,249,239,15,131,244,26,77,139,93,0,77,139,147,233,252,242,65,
  15,42,4,154,102,72,15,110,202,252,242,15,89,193,252,242,65,15,17,134,252,
  248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,
  16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,4,218,252,242,15,42,202,252,242,15,89,193,
  252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,
  139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,
  252,249,239,15,131,244,28,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,
  102,72,15,110,202,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,
  232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,26,77,139,93,0,77,
  139,147,233,252,242,65,15,42,4,154,102,72,15,110,202,252,242,15,94,193,252,
  242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,
  72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,
  133,244,248,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,252,242,15,
  42,202,252,242,15,94,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,
  182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,
  255,36,207,248,2,129,252,249,239,15,131,244,28,77,139,93,0,77,139,147,233,
  252,242,65,15,16,4,218,102,72,15,110,202,252,242,15,94,193,252,242,65,15,
  17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,
  216,193,232,16,65,129,124,253,198,4,239,15,133,244,37,255,65,139,12,198,77,
  139,93,0,77,139,147,233,65,139,4,154,255,133,192,15,132,244,36,255,153,252,
  247,252,249,65,137,150,252,248,7,0,0,65,199,134,252,252,7,0,0,237,139,69,
  0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,8,73,139,52,222,
  65,139,76,222,4,129,252,249,239,15,133,244,248,255,77,139,93,0,77,139,147,
  233,65,139,12,130,137,252,240,133,192,15,132,244,36,153,252,247,252,249,65,
  137,134,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,77,139,93,0,77,139,
  147,233,65,139,20,130,1,214,65,137,182,252,248,7,0,0,65,199,134,252,252,7,
  0,0,237,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,
  248,2,129,252,249,239,15,131,244,27,77,139,93,0,77,139,147,233,252,242,65,
  15,42,12,130,102,72,15,110,198,252,242,15,88,193,252,242,65,15,17,134,252,
  248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,15,42,198,252,242,15,88,
  193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,
  255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,
  129,252,249,239,15,131,244,29,77,139,93,0,77,139,147,233,252,242,65,15,16,
  12,194,102,72,15,110,198,252,242,15,88,193,252,242,65,15,17,134,252,248,7,
  0,0,139,69,0,72,15,182,200,72,137,207,255,77,139,93,0,77,139,147,233,65,139,
  20,130,41,214,65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,27,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,8,73,139,52,222,
  65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,147,233,
  252,242,65,15,16,12,194,252,242,15,42,198,252,242,15,92,193,252,242,65,15,
  17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,
  182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,
  131,244,29,77,139,93,0,77,139,147,233,252,242,65,15,16,12,194,102,72,15,110,
  198,252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,
  200,72,137,207,255,77,139,93,0,77,139,147,233,65,139,20,130,15,175,252,242,
  65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,139,69,0,72,15,
  182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,
  131,244,27,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,102,72,15,110,
  198,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,
  200,72,137,207,255,249,72,15,182,216,193,232,8,73,139,52,222,65,139,76,222,
  4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,147,233,252,242,65,15,
  16,12,194,252,242,15,42,198,252,242,15,89,193,252,242,65,15,17,134,252,248,
  7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,
  197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,29,77,
  139,93,0,77,139,147,233,252,242,65,15,16,12,194,102,72,15,110,198,252,242,
  15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,
  207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,
  2,129,252,249,239,15,131,244,27,77,139,93,0,77,139,147,233,252,242,65,15,
  42,12,130,102,72,15,110,198,252,242,15,94,193,252,242,65,15,17,134,252,248,
  7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,8,73,
  139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,0,77,
  139,147,233,252,242,65,15,16,12,194,252,242,15,42,198,252,242,15,94,193,252,
  242,65,15,17,134,252,248,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,55,77,139,93,0,77,139,147,233,252,242,65,15,16,12,194,
  102,72,15,110,198,252,242,15,94,193,252,242,65,15,17,134,252,248,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,8,65,129,124,
  253,222,4,239,15,133,244,37,255,77,139,93,0,77,139,147,233,65,139,12,130,
  133,201,15,132,244,36,255,65,139,4,222,255,249,15,182,216,193,232,8,73,139,
  52,222,129,252,254,239,15,133,244,247,73,139,20,198,129,252,250,239,15,133,
  244,250,255,72,193,252,234,32,137,209,72,193,252,238,32,137,252,240,133,192,
  15,132,244,36,153,252,247,252,249,65,137,134,252,248,7,0,0,65,199,134,252,
  252,7,0,0,237,255,72,193,252,234,32,137,209,72,193,252,238,32,137,252,240,
  133,192,15,132,244,36,153,252,247,252,249,65,137,150,252,248,7,0,0,65,199,
  134,252,252,7,0,0,237,255,65,139,52,222,65,3,52,198,65,137,182,252,248,7,
  0,0,65,199,134,252,252,7,0,0,237,255,139,69,0,72,15,182,200,72,131,197,4,
  193,232,8,65,252,255,36,207,248,1,73,139,20,198,129,252,250,239,15,131,244,
  30,129,252,250,239,15,130,244,251,129,252,250,239,15,133,244,30,72,193,252,
  234,32,252,242,15,42,202,102,72,15,110,198,252,233,244,251,248,4,129,252,
  250,239,15,131,244,30,72,193,252,238,32,252,242,15,42,198,102,72,15,110,202,
  248,5,255,252,233,244,37,255,252,242,15,88,193,252,242,65,15,17,134,252,248,
  7,0,0,255,65,139,52,222,65,43,52,198,65,137,182,252,248,7,0,0,65,199,134,
  252,252,7,0,0,237,255,252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,
  0,255,65,139,52,222,65,15,175,52,198,65,137,182,252,248,7,0,0,65,199,134,
  252,252,7,0,0,237,255,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,
  0,255,252,242,15,94,193,252,242,65,15,17,134,252,248,7,0,0,255,249,72,15,
  183,216,193,232,16,77,139,93,0,77,139,147,233,252,242,65,15,42,4,154,65,139,
  84,198,4,129,252,250,239,15,131,244,248,252,242,65,15,16,12,198,255,232,251,
  1,26,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,
  248,2,129,252,250,239,15,133,244,31,252,242,65,15,42,12,198,255,249,72,15,
  182,216,193,232,8,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,65,139,
  116,222,4,129,252,254,239,15,131,244,248,252,242,65,15,16,4,222,255,139,69,
  0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,254,
  239,15,133,244,33,252,242,65,15,42,4,222,255,249,72,15,183,216,193,232,16,
  77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,65,139,84,198,4,129,252,
  250,239,15,131,244,248,252,242,65,15,16,12,198,255,139,69,0,72,15,182,200,
  72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,250,239,15,133,244,
  32,252,242,65,15,42,12,198,255,249,72,15,182,216,193,232,8,77,139,93,0,77,
  139,147,233,252,242,65,15,16,12,194,65,139,116,222,4,129,252,254,239,15,131,
  244,248,252,242,65,15,16,4,222,255,139,69,0,72,15,182,200,72,131,197,4,193,
  232,8,65,252,255,36,207,248,2,129,252,254,239,15,133,244,34,252,242,65,15,
  42,4,222,255,249,72,15,183,216,193,232,16,252,233,244,35,255,249,72,15,183,
  216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,
  77,139,93,0,77,139,147,233,65,139,52,154,187,237,184,237,57,214,15,76,216,
  65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,
  15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,
  15,131,244,56,77,139,93,0,77,139,147,233,252,242,65,15,42,4,154,102,72,15,
  110,202,187,237,184,237,102,15,46,193,15,66,216,65,137,158,252,252,7,0,0,
  139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,16,73,139,
  20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,
  147,233,252,242,65,15,16,4,218,252,242,15,42,202,187,237,184,237,102,15,46,
  193,15,66,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,
  255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,
  129,252,249,239,15,131,244,57,77,139,93,0,77,139,147,233,252,242,65,15,16,
  4,218,102,72,15,110,202,187,237,184,237,102,15,46,193,15,66,216,65,137,158,
  252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,193,
  232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,77,139,
  93,0,77,139,147,233,65,139,52,154,187,237,184,237,57,214,15,78,216,65,137,
  158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,
  200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,
  244,56,77,139,93,0,77,139,147,233,252,242,65,15,42,4,154,102,72,15,110,202,
  187,237,184,237,102,15,46,193,15,70,216,65,137,158,252,252,7,0,0,139,69,0,
  72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,
  139,76,198,4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,147,233,252,
  242,65,15,16,4,218,252,242,15,42,202,187,237,184,237,102,15,46,193,15,70,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,
  0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,
  239,15,131,244,57,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,102,72,
  15,110,202,187,237,184,237,102,15,46,193,15,70,216,65,137,158,252,252,7,0,
  0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,16,73,139,
  20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,
  147,233,65,139,52,154,187,237,184,237,57,214,15,79,216,65,137,158,252,252,
  7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,
  197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,56,77,
  139,93,0,77,139,147,233,252,242,65,15,42,4,154,102,72,15,110,202,187,237,
  184,237,102,15,46,193,15,71,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,
  200,72,137,207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,
  4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,147,233,252,242,65,15,
  16,4,218,252,242,15,42,202,187,237,184,237,102,15,46,193,15,71,216,65,137,
  158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,
  200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,
  244,57,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,102,72,15,110,202,
  187,237,184,237,102,15,46,193,15,71,216,65,137,158,252,252,7,0,0,139,69,0,
  72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,
  139,76,198,4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,147,233,65,
  139,52,154,187,237,184,237,57,214,15,77,216,65,137,158,252,252,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,
  232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,56,77,139,93,0,77,
  139,147,233,252,242,65,15,42,4,154,102,72,15,110,202,187,237,184,237,102,
  15,46,193,15,67,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,
  207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,
  249,239,15,133,244,248,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,
  252,242,15,42,202,187,237,184,237,102,15,46,193,15,67,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,
  131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,57,
  77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,102,72,15,110,202,187,237,
  184,237,102,15,46,193,15,67,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,
  200,72,137,207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,
  4,129,252,249,239,15,133,244,248,77,139,93,0,77,139,147,233,65,139,52,154,
  187,237,184,237,57,214,15,68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,
  182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,
  255,36,207,248,2,129,252,249,239,15,131,244,56,77,139,93,0,77,139,147,233,
  252,242,65,15,42,4,154,102,72,15,110,202,187,237,184,237,102,15,46,193,15,
  68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,
  72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,
  133,244,248,77,139,93,0,77,139,147,233,252,242,65,15,16,4,218,252,242,15,
  42,202,187,237,184,237,102,15,46,193,15,68,216,65,137,158,252,252,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,
  232,8,65,252,255,36,207,248,2,129,252,249,239,15,131,244,57,77,139,93,0,77,
  139,147,233,252,242,65,15,16,4,218,102,72,15,110,202,187,237,184,237,102,
  15,46,193,15,68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,
  207,255,249,72,15,183,216,193,232,16,73,139,20,198,65,139,76,198,4,129,252,
  249,239,15,133,244,248,77,139,93,0,77,139,147,233,65,139,52,154,187,237,184,
  237,57,214,15,69,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,
  207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,
  2,129,252,249,239,15,131,244,56,77,139,93,0,77,139,147,233,252,242,65,15,
  42,4,154,102,72,15,110,202,187,237,184,237,102,15,46,193,15,69,216,65,137,
  158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,
  193,232,16,73,139,20,198,65,139,76,198,4,129,252,249,239,15,133,244,248,77,
  139,93,0,77,139,147,233,252,242,65,15,16,4,218,252,242,15,42,202,187,237,
  184,237,102,15,46,193,15,69,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,
  200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,
  36,207,248,2,129,252,249,239,15,131,244,57,77,139,93,0,77,139,147,233,252,
  242,65,15,16,4,218,102,72,15,110,202,187,237,184,237,102,15,46,193,15,69,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,
  15,182,216,193,232,8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,
  244,248,77,139,93,0,77,139,147,233,65,139,20,130,187,237,184,237,57,214,15,
  76,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,58,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,187,237,184,237,102,15,46,193,15,66,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,65,15,42,4,222,187,237,184,
  237,102,15,46,193,15,66,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,
  207,248,2,129,252,249,239,15,131,244,59,77,139,93,0,77,139,147,233,252,242,
  65,15,16,12,194,252,242,65,15,16,4,222,187,237,184,237,102,15,46,193,15,66,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,
  15,182,216,193,232,8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,
  244,248,77,139,93,0,77,139,147,233,65,139,20,130,187,237,184,237,57,214,15,
  78,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,58,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,187,237,184,237,102,15,46,193,15,70,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,65,15,42,4,222,187,237,184,
  237,102,15,46,193,15,70,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,
  207,248,2,129,252,249,239,15,131,244,59,77,139,93,0,77,139,147,233,252,242,
  65,15,16,12,194,252,242,65,15,16,4,222,187,237,184,237,102,15,46,193,15,70,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,
  15,182,216,193,232,8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,
  244,248,77,139,93,0,77,139,147,233,65,139,20,130,187,237,184,237,57,214,15,
  79,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,58,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,187,237,184,237,102,15,46,193,15,71,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,65,15,42,4,222,187,237,184,
  237,102,15,46,193,15,71,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,
  207,248,2,129,252,249,239,15,131,244,59,77,139,93,0,77,139,147,233,252,242,
  65,15,16,12,194,252,242,65,15,16,4,222,187,237,184,237,102,15,46,193,15,71,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,
  15,182,216,193,232,8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,
  244,248,77,139,93,0,77,139,147,233,65,139,20,130,187,237,184,237,57,214,15,
  77,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,58,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,187,237,184,237,102,15,46,193,15,67,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,65,15,42,4,222,187,237,184,
  237,102,15,46,193,15,67,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,
  207,248,2,129,252,249,239,15,131,244,59,77,139,93,0,77,139,147,233,252,242,
  65,15,16,12,194,252,242,65,15,16,4,222,187,237,184,237,102,15,46,193,15,67,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,
  15,182,216,193,232,8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,
  244,248,77,139,93,0,77,139,147,233,65,139,20,130,187,237,184,237,57,214,15,
  68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,58,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,187,237,184,237,102,15,46,193,15,68,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,65,15,42,4,222,187,237,184,
  237,102,15,46,193,15,68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,
  207,248,2,129,252,249,239,15,131,244,59,77,139,93,0,77,139,147,233,252,242,
  65,15,16,12,194,252,242,65,15,16,4,222,187,237,184,237,102,15,46,193,15,68,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,
  15,182,216,193,232,8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,
  244,248,77,139,93,0,77,139,147,233,65,139,20,130,187,237,184,237,57,214,15,
  69,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,
  69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,2,129,252,
  249,239,15,131,244,58,77,139,93,0,77,139,147,233,252,242,65,15,42,12,130,
  102,72,15,110,198,187,237,184,237,102,15,46,193,15,69,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,182,216,193,232,
  8,73,139,52,222,65,139,76,222,4,129,252,249,239,15,133,244,248,77,139,93,
  0,77,139,147,233,252,242,65,15,16,12,194,252,242,65,15,42,4,222,187,237,184,
  237,102,15,46,193,15,69,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,
  207,248,2,129,252,249,239,15,131,244,59,77,139,93,0,77,139,147,233,252,242,
  65,15,16,12,194,252,242,65,15,16,4,222,187,237,184,237,102,15,46,193,15,69,
  216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,15,
  182,216,193,232,8,73,139,52,222,129,252,254,239,15,133,244,247,73,139,20,
  198,129,252,250,239,15,133,244,248,72,193,252,238,32,72,193,252,234,32,187,
  237,184,237,57,214,15,76,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,
  200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,
  36,207,248,1,73,139,20,198,129,252,254,239,15,131,244,42,129,252,250,239,
  15,130,244,249,129,252,250,239,15,133,244,42,102,72,15,110,198,72,193,252,
  234,32,252,242,15,42,202,252,233,244,249,248,2,129,252,250,239,15,131,244,
  42,72,193,252,238,32,252,242,15,42,198,102,15,110,202,248,3,187,237,184,237,
  102,15,46,193,15,66,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,
  137,207,255,249,15,182,216,193,232,8,73,139,52,222,129,252,254,239,15,133,
  244,247,73,139,20,198,129,252,250,239,15,133,244,248,72,193,252,238,32,72,
  193,252,234,32,187,237,184,237,57,214,15,78,216,65,137,158,252,252,7,0,0,
  139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,
  193,232,8,65,252,255,36,207,248,1,73,139,20,198,129,252,254,239,15,131,244,
  42,129,252,250,239,15,130,244,249,129,252,250,239,15,133,244,42,102,72,15,
  110,198,72,193,252,234,32,252,242,15,42,202,252,233,244,249,248,2,129,252,
  250,239,15,131,244,42,72,193,252,238,32,252,242,15,42,198,102,15,110,202,
  248,3,187,237,184,237,102,15,46,193,15,70,216,65,137,158,252,252,7,0,0,139,
  69,0,72,15,182,200,72,137,207,255,249,15,182,216,193,232,8,73,139,52,222,
  129,252,254,239,15,133,244,247,73,139,20,198,129,252,250,239,15,133,244,248,
  72,193,252,238,32,72,193,252,234,32,187,237,184,237,57,214,15,79,216,65,137,
  158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,
  200,72,131,197,4,193,232,8,65,252,255,36,207,248,1,73,139,20,198,129,252,
  254,239,15,131,244,42,129,252,250,239,15,130,244,249,129,252,250,239,15,133,
  244,42,102,72,15,110,198,72,193,252,234,32,252,242,15,42,202,252,233,244,
  249,248,2,129,252,250,239,15,131,244,42,72,193,252,238,32,252,242,15,42,198,
  102,15,110,202,248,3,187,237,184,237,102,15,46,193,15,71,216,65,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,15,182,216,193,232,8,
  73,139,52,222,129,252,254,239,15,133,244,247,73,139,20,198,129,252,250,239,
  15,133,244,248,72,193,252,238,32,72,193,252,234,32,187,237,184,237,57,214,
  15,77,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,
  139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,248,1,73,
  139,20,198,129,252,254,239,15,131,244,42,129,252,250,239,15,130,244,249,129,
  252,250,239,15,133,244,42,102,72,15,110,198,72,193,252,234,32,252,242,15,
  42,202,252,233,244,249,248,2,129,252,250,239,15,131,244,42,72,193,252,238,
  32,252,242,15,42,198,102,15,110,202,248,3,187,237,184,237,102,15,46,193,15,
  67,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,
  15,182,216,193,232,8,73,139,52,222,129,252,254,239,15,133,244,247,73,139,
  20,198,129,252,250,239,15,133,244,248,72,193,252,238,32,72,193,252,234,32,
  187,237,184,237,57,214,15,68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,
  182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,
  255,36,207,248,1,73,139,20,198,129,252,254,239,15,131,244,42,129,252,250,
  239,15,130,244,249,129,252,250,239,15,133,244,42,102,72,15,110,198,72,193,
  252,234,32,252,242,15,42,202,252,233,244,249,248,2,129,252,250,239,15,131,
  244,42,72,193,252,238,32,252,242,15,42,198,102,15,110,202,248,3,187,237,184,
  237,102,15,46,193,15,68,216,65,137,158,252,252,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,249,15,182,216,193,232,8,73,139,52,222,129,252,254,239,15,
  133,244,247,73,139,20,198,129,252,250,239,15,133,244,248,72,193,252,238,32,
  72,193,252,234,32,187,237,184,237,57,214,15,69,216,65,137,158,252,252,7,0,
  0,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,
  4,193,232,8,65,252,255,36,207,248,1,73,139,20,198,129,252,254,239,15,131,
  244,42,129,252,250,239,15,130,244,249,129,252,250,239,15,133,244,42,102,72,
  15,110,198,72,193,252,234,32,252,242,15,42,202,252,233,244,249,248,2,129,
  252,250,239,15,131,244,42,72,193,252,238,32,252,242,15,42,198,102,15,110,
  202,248,3,187,237,184,237,102,15,46,193,15,69,216,65,137,158,252,252,7,0,
  0,139,69,0,72,15,182,200,72,137,207,255,249,252,233,244,43,255,249,252,233,
  244,44,255,249,72,15,182,216,193,232,8,77,139,93,0,77,139,147,233,73,139,
  52,218,73,139,20,198,72,139,54,128,190,233,235,15,133,244,247,72,139,54,73,
  137,211,73,193,252,235,48,65,129,252,251,239,15,133,244,247,72,11,21,244,
  11,72,139,18,128,186,233,235,15,133,244,247,72,139,18,65,187,237,65,186,237,
  72,133,214,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,72,15,182,200,72,
  137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,8,65,252,255,36,207,
  248,1,252,233,244,43,255,249,72,15,183,216,193,232,16,73,139,52,222,77,139,
  93,0,77,139,147,233,73,139,20,194,73,137,252,243,73,193,252,235,48,65,129,
  252,251,239,15,133,244,247,72,11,53,244,11,72,139,54,128,190,233,235,15,133,
  244,247,72,139,54,72,139,18,128,186,233,235,15,133,244,247,72,139,18,65,187,
  237,65,186,237,72,133,214,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,
  72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,193,232,
  8,65,252,255,36,207,248,1,252,233,244,44,255,249,72,15,182,216,193,232,8,
  77,139,93,0,77,139,147,233,73,139,52,218,73,139,20,198,72,139,54,128,190,
  233,235,15,133,244,247,72,139,54,73,137,211,73,193,252,235,48,65,129,252,
  251,239,15,133,244,247,72,11,21,244,11,72,139,18,128,186,233,235,15,133,244,
  247,72,139,18,65,187,237,65,186,237,72,133,214,69,15,69,218,69,137,158,252,
  252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,
  16,73,139,52,222,77,139,93,0,77,139,147,233,73,139,20,194,73,137,252,243,
  73,193,252,235,48,65,129,252,251,239,15,133,244,247,72,11,53,244,11,72,139,
  54,128,190,233,235,15,133,244,247,72,139,54,72,139,18,128,186,233,235,15,
  133,244,247,72,139,18,65,187,237,65,186,237,72,133,214,69,15,69,218,69,137,
  158,252,252,7,0,0,139,69,0,72,15,182,200,72,137,207,255,249,15,182,216,73,
  139,52,222,65,129,124,253,222,4,239,15,130,244,247,65,129,124,253,222,4,239,
  15,132,244,248,252,233,244,45,255,248,1,102,72,15,110,198,73,187,237,237,
  102,73,15,110,203,102,15,87,193,252,242,65,15,17,4,222,139,69,0,72,15,182,
  200,72,137,207,255,248,2,65,252,247,28,222,255,249,15,182,216,65,139,84,222,
  4,255,129,252,250,239,15,133,244,247,255,248,1,129,252,250,239,15,133,244,
  248,255,248,2,129,252,250,239,15,133,244,249,255,65,139,52,222,65,187,237,
  65,186,237,133,252,246,69,15,68,218,69,137,92,222,4,139,69,0,72,15,182,200,
  72,137,207,255,248,3,129,252,250,239,15,131,244,250,252,242,65,15,16,4,222,
  255,102,15,252,239,201,65,187,237,65,186,237,102,15,46,193,69,15,68,218,69,
  137,92,222,4,139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,
  72,131,197,4,193,232,8,65,252,255,36,207,248,4,129,252,250,239,15,133,244,
  46,255,249,72,15,182,216,193,232,8,73,139,52,222,73,137,252,243,73,193,252,
  235,32,65,129,252,251,239,15,132,244,247,65,129,252,251,239,15,132,244,248,
  65,129,252,251,239,15,132,244,248,65,129,252,251,239,15,132,244,253,65,129,
  252,251,239,15,130,244,254,252,233,244,60,248,7,133,252,246,15,132,244,248,
  255,252,233,244,247,248,8,102,15,252,239,201,102,72,15,110,198,102,15,46,
  193,15,132,244,248,248,1,72,139,12,36,72,141,44,129,248,2,139,69,0,72,15,
  182,200,72,137,207,255,249,72,15,182,216,193,232,8,73,139,52,222,73,137,252,
  243,73,193,252,235,32,65,129,252,251,239,15,132,244,248,65,129,252,251,239,
  15,132,244,247,65,129,252,251,239,15,132,244,247,65,129,252,251,239,15,132,
  244,253,65,129,252,251,239,15,130,244,254,252,233,244,61,248,7,133,252,246,
  15,132,244,247,255,252,233,244,248,248,8,102,15,252,239,201,102,72,15,110,
  198,102,15,46,193,15,133,244,248,248,1,72,139,12,36,72,141,44,129,248,2,139,
  69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,73,139,182,252,248,7,
  0,0,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,132,244,248,65,
  129,252,251,239,15,132,244,247,65,129,252,251,239,15,132,244,247,65,129,252,
  251,239,15,132,244,253,65,129,252,251,239,15,130,244,254,252,233,244,62,248,
  7,133,252,246,15,132,244,247,255,252,233,244,248,248,8,102,15,252,239,201,
  102,72,15,110,198,102,15,46,193,15,133,244,248,248,1,72,139,12,36,72,141,
  44,153,248,2,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,73,139,
  182,252,248,7,0,0,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,
  132,244,247,65,129,252,251,239,15,132,244,248,65,129,252,251,239,15,132,244,
  248,65,129,252,251,239,15,132,244,253,65,129,252,251,239,15,130,244,254,252,
  233,244,63,248,7,133,252,246,15,132,244,248,255,252,233,244,247,248,8,102,
  15,252,239,201,102,72,15,110,198,102,15,46,193,15,132,244,248,248,1,72,139,
  12,36,72,141,44,153,248,2,139,69,0,72,15,182,200,72,137,207,255,249,72,15,
  183,216,72,139,12,36,72,141,44,153,139,69,0,72,15,182,200,72,137,207,255,
  249,72,15,182,216,193,232,8,255,102,65,129,124,253,222,6,238,15,133,244,254,
  73,139,52,222,72,11,53,244,11,72,139,54,128,190,233,235,15,133,244,255,255,
  72,11,21,244,64,72,139,18,128,186,233,235,15,133,244,254,72,139,18,255,73,
  137,252,242,255,69,139,146,233,255,69,139,18,255,68,139,154,233,255,68,139,
  26,255,65,131,252,234,1,69,33,211,68,141,150,233,71,141,28,91,71,141,20,218,
  76,141,158,233,65,139,178,233,252,247,198,237,15,132,244,253,248,1,252,247,
  198,237,15,133,244,252,73,139,50,72,139,54,128,190,233,235,15,133,244,252,
  72,139,54,72,139,54,72,57,214,15,133,244,252,77,139,146,233,77,137,150,233,
  139,69,0,72,15,182,200,72,137,207,255,139,69,0,72,15,182,200,72,131,197,4,
  193,232,8,65,252,255,36,207,248,6,65,139,178,233,252,247,198,237,15,132,244,
  253,129,230,239,68,141,20,118,71,141,20,211,66,139,52,213,237,252,233,244,
  1,248,7,252,233,244,48,255,248,8,252,233,244,47,255,248,9,252,233,244,49,
  255,249,252,233,244,50,255,249,252,233,244,51,255,249,252,233,244,65,255,
  102,65,129,124,253,222,6,238,15,133,244,255,73,139,52,222,72,11,53,244,11,
  72,139,54,128,190,233,235,15,133,244,255,255,68,139,158,233,65,57,211,15,
  131,244,254,255,69,133,219,15,136,244,255,255,72,139,182,233,72,139,54,255,
  72,139,180,253,252,246,233,73,137,182,252,248,7,0,0,139,69,0,72,15,182,200,
  72,137,207,255,248,9,252,233,244,52,255,248,8,252,233,244,66,255,249,72,15,
  182,216,193,232,8,77,139,156,253,36,233,77,139,147,233,73,139,52,194,73,137,
  52,222,139,69,0,72,15,182,200,72,137,207,255,249,72,15,183,216,193,232,16,
  73,139,20,198,77,139,156,253,36,233,77,139,147,233,73,137,20,218,139,69,0,
  72,15,182,200,72,137,207,255,249,252,233,244,53,255,249,252,233,244,54,255,
  249,205,3,255
};

#line 455 "src/interpreter/bytecode-interpreter.dasc"
//|.globals GLBNAME_
enum {
  GLBNAME_ValueHeapMaskStore,
  GLBNAME_ValueHeapMaskLoad,
  GLBNAME_RealZero,
  GLBNAME_InterpStart,
  GLBNAME_InterpFail,
  GLBNAME_InterpReturn,
  GLBNAME_InterpLoadList0,
  GLBNAME_InterpLoadList1,
  GLBNAME_InterpLoadList2,
  GLBNAME_InterpNewList,
  GLBNAME_InterpAddList,
  GLBNAME_InterpLoadObj0,
  GLBNAME_InterpLoadObj1,
  GLBNAME_InterpNewObj,
  GLBNAME_InterpAddObj,
  GLBNAME_InterpLoadCls,
  GLBNAME_InterpArithIntL,
  GLBNAME_InterpArithIntR,
  GLBNAME_InterpArithRealL,
  GLBNAME_InterpArithRealR,
  GLBNAME_InterpArithVV,
  GLBNAME_InterpPowSlowIV,
  GLBNAME_InterpPowSlowRV,
  GLBNAME_InterpPowSlowVI,
  GLBNAME_InterpPowSlowVR,
  GLBNAME_InterpPowSlowVV,
  GLBNAME_DivByZero,
  GLBNAME_ModByReal,
  GLBNAME_InterpCompareIV,
  GLBNAME_InterpCompareVI,
  GLBNAME_InterpCompareRV,
  GLBNAME_InterpCompareVR,
  GLBNAME_InterpCompareVV,
  GLBNAME_InterpCompareSV,
  GLBNAME_InterpCompareVS,
  GLBNAME_InterpNegate,
  GLBNAME_InterpNot,
  GLBNAME_InterpPropGet,
  GLBNAME_InterpPropGetNotFound,
  GLBNAME_InterpPropGetNotObject,
  GLBNAME_InterpPropSet,
  GLBNAME_InterpIdxGet,
  GLBNAME_InterpIdxGetI,
  GLBNAME_InterpGSet,
  GLBNAME_InterpGGet,
  GLBNAME_InterpArithReralR,
  GLBNAME_InterpDoCompareIV,
  GLBNAME_InterpDoCompareRV,
  GLBNAME_InterpDoCompareVI,
  GLBNAME_InterpDoCompareVR,
  GLBNAME_InterpJmpT,
  GLBNAME_InterpJmpF,
  GLBNAME_InterpAnd,
  GLBNAME_InterpOr,
  GLBNAME_ValueHeapLoadMask,
  GLBNAME_InterpIdxSet,
  GLBNAME_InterpIdxGetIOutOfBoundary,
  GLBNAME__MAX
};
#line 456 "src/interpreter/bytecode-interpreter.dasc"
//|.globalnames glbnames
static const char *const glbnames[] = {
  "ValueHeapMaskStore",
  "ValueHeapMaskLoad",
  "RealZero",
  "InterpStart",
  "InterpFail",
  "InterpReturn",
  "InterpLoadList0",
  "InterpLoadList1",
  "InterpLoadList2",
  "InterpNewList",
  "InterpAddList",
  "InterpLoadObj0",
  "InterpLoadObj1",
  "InterpNewObj",
  "InterpAddObj",
  "InterpLoadCls",
  "InterpArithIntL",
  "InterpArithIntR",
  "InterpArithRealL",
  "InterpArithRealR",
  "InterpArithVV",
  "InterpPowSlowIV",
  "InterpPowSlowRV",
  "InterpPowSlowVI",
  "InterpPowSlowVR",
  "InterpPowSlowVV",
  "DivByZero",
  "ModByReal",
  "InterpCompareIV",
  "InterpCompareVI",
  "InterpCompareRV",
  "InterpCompareVR",
  "InterpCompareVV",
  "InterpCompareSV",
  "InterpCompareVS",
  "InterpNegate",
  "InterpNot",
  "InterpPropGet",
  "InterpPropGetNotFound",
  "InterpPropGetNotObject",
  "InterpPropSet",
  "InterpIdxGet",
  "InterpIdxGetI",
  "InterpGSet",
  "InterpGGet",
  "InterpArithReralR",
  "InterpDoCompareIV",
  "InterpDoCompareRV",
  "InterpDoCompareVI",
  "InterpDoCompareVR",
  "InterpJmpT",
  "InterpJmpF",
  "InterpAnd",
  "InterpOr",
  "ValueHeapLoadMask",
  "InterpIdxSet",
  "InterpIdxGetIOutOfBoundary",
  (const char *)0
};
#line 457 "src/interpreter/bytecode-interpreter.dasc"
//|.externnames extnames
static const char *const extnames[] = {
  "PrintOP",
  "InterpreterDoLoadList0",
  "InterpreterDoLoadList1",
  "InterpreterDoLoadList2",
  "InterpreterDoNewList",
  "InterpreterDoAddList",
  "InterpreterDoLoadObj0",
  "InterpreterDoLoadObj1",
  "InterpreterDoNewObj",
  "InterpreterDoAddObj",
  "InterpreterDoLoadCls",
  "InterpreterDoArithmetic",
  "InterpreterPow",
  "InterpreterDivByZero",
  "InterpreterModByReal",
  "InterpreterDoCompare",
  "InterpreterDoNegate",
  "InterpreterDoNot",
  "InterpreterDoPropGet",
  "InterpreterPropGetNotFound",
  "InterpreterPropGetNotObject",
  "InterpreterDoPropSet",
  "InterpreterDoIdxGet",
  "InterpreterDoIdxGetI",
  "InterpreterDoGSet",
  "InterpreterDoGGet",
  "pow",
  (const char *)0
};
#line 458 "src/interpreter/bytecode-interpreter.dasc"
//|.section code,data
#define DASM_SECTION_CODE	0
#define DASM_SECTION_DATA	1
#define DASM_MAXSECTION		2
#line 459 "src/interpreter/bytecode-interpreter.dasc"

/* -------------------------------------------------------------------
 * Preprocessor option for dynasm
 * ------------------------------------------------------------------*/
//|.define CHECK_DIV_BY_ZERO
//|.define CHECK_NUMBER_MEMORY
//|.define TRACE_OP
//|.define USE_CMOV_COMP
//|.define USE_CMOV_NEG

/* -------------------------------------------------------------------
 * 64 bits call
 *
 * Since 64 bits call cannot accept a imm value due to it is too long,
 * we need to generate different *types* of call instruction based on
 * the callsite
 * -------------------------------------------------------------------*/
inline bool CheckAddress( std::uintptr_t addr ) {
  static const std::uintptr_t k2G = 0x80000000;
  if(addr > 0 && addr < k2G)
    return true;
  else
    return false;
}

//|.macro fcall,FUNC
//|| if(CheckAddress(reinterpret_cast<std::uintptr_t>(FUNC))) {
//|    call extern FUNC
//|| } else {
//||   lava_warn("%s","Function FUNC address is not in 0-2GB");
//|.if 0
// I don't know whether this is faster than use rax , need profile. I see
// this one is used in MoarVM. It uses memory address to work araoud the
// address space problem. But I am kind of unsure about it since it maybe
// because MoarVM already allocate rax for other things
//|9:
//|.dword (std::uint32_t)((std::uintptr_t)(FUNC)),(std::uint32_t)((std::uintptr_t)((FUNC)>>32))
//|    call qword[<9]
//|.else
//|    mov64 rax, reinterpret_cast<std::uintptr_t>(FUNC)
//|    call rax
//|.endif
//|| }
//|.endmacro

/* ---------------------------------------------------------------
 * summary of register usage                                     |
 * --------------------------------------------------------------*/
// Runtime pointer
//|.define RUNTIME,               r12   // callee saved

// Current prototype's GCRef pointer
//|.define PROTO,                 r13   // callee saved

// Top stack's pointer
//|.define STK,                   r14   // callee saved
//|.define ACCIDX,                2040
//|.define ACCFIDX,               2044
//|.define ACC,                   STK+ACCIDX

// Dispatch table pointer
//|.define DISPATCH,              r15  // callee saved

// Bytecode array
//|.define PC,                    rbp  // callee saved

// Hold the decoded unit
//|.define INSTR,                 eax
//|.define INSTR_OP,              al
//|.define INSTR_A8L,             al
//|.define INSTR_A8H,             ah
//|.define INSTR_A16,             ax

// Frame -------------------------------------------------------
// We store the frame sizeof(IFrame) above STK pointer
static_assert( sizeof(IFrame) == 16 );
//|.define CFRAME,                STK-16
//|.define FRAMELEN,              16

/** ------------------------------------------------------------
 *
 * NOTES: A notes on movzx/movsx instruction.
 *
 *        The movzx/movsx zero out or sign out the *whole* 64 bit
 *        register regardless the dest is a 32 bits or 64 bits
 *        register
 *
 * --------------------------------------------------------------*/

// Instruction's argument
//|.define ARG1_8,                bl
//|.define ARG1_16,               bx
//|.define ARG1,                  ebx  // must *not* be 64 bits due to we use ah
//|.define ARG1F,                 rbx

// Used to help decode function's call argument
//|.define FARG,                  ebx  // aliased with ARG1
//|.define FARG16,                bx
//|.define FARG8L,                bl
//|.define FARG8H,                bh

//|.define ARG2_8,                al
//|.define ARG2_16,               ax
//|.define ARG2,                  eax
//|.define ARG2F,                 rax

//|.define ARG3_8,                cl
//|.define ARG3_16,               cx
//|.define ARG3,                  ecx
//|.define ARG3F,                 rcx

// temporarily alias OP to be ARG3 because during the
// decoding time , we don't need to hold anything there
//|.define OP,                    rcx

// temporary register are r10 and r11
//|.define LREG,                  rsi
//|.define LREGL,                 esi
//|.define RREG,                  rdx
//|.define RREGL,                 edx

//|.define T1,                    r11
//|.define T1L,                   r11d
//|.define T1L16,                 r11w
//|.define T2,                    r10
//|.define T2L,                   r10d
//|.define T2L16,                 r10w

// registers for normal C function calling ABI
//|.define CARG1,                 rdi
//|.define CARG2,                 rsi    // LREG
//|.define CARG3,                 rdx    // RREG
//|.define CARG4,                 rcx
//|.define CARG5,                 r8
//|.define CARG6,                 r9

//|.define CARG1L,                edi
//|.define CARG2L,                esi
//|.define CARG3L,                edx
//|.define CARG4L,                ecx
//|.define CARG5L,                r8d
//|.define CARG6L,                r9d

//|.define CARG1LL,               dil
//|.define CARG2LL,               sil
//|.define CARG3LL,               dl
//|.define CARG4LL,               cl
//|.define CARG5LL,               r8b
//|.define CARG6LL,               r9b

// saved callee registers plus some other important stuff
// 72 = 64 + (8 padding for function call)
//|.define RESERVE_RSP,           72
//|.define SAVED_RBX,             [rsp+48]
//|.define SAVED_R12,             [rsp+40]
//|.define SAVED_R13,             [rsp+32]
//|.define SAVED_R14,             [rsp+24]
//|.define SAVED_R15,             [rsp+16]
//|.define SAVED_RBP,             [rsp+8]

// DO NOT MODIFY IT UNLESS YOU KNOW SHIT
//|.define SAVED_PPC,             rsp
//|.define SAVED_PC ,             [rsp]

// Used to save certain registers while we call cross the function
// boundary. Like we may call into ToBoolean function to get value
// of certain register's Boolean value and we may need to save register
// like rax which is part of our argument/operand of isntructions
//|.define SAVED_SLOT1,           [rsp+56]
//|.define SAVED_SLOT2,           [rsp+64]

/* ---------------------------------------------------------------
 * debug helper                                                  |
 * --------------------------------------------------------------*/
//|.macro Break
//|  int 3
//|.endmacro

void PrintOP( int op ) {
  lava_error("OP:%s",GetBytecodeName(static_cast<Bytecode>(op)));
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintOP)

void Print2( int a , int b ) {
  lava_error("L:%d,R:%d",a,b);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(Print2)

void PrintF( double v ) {
  lava_error("Value:%f",v);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintF)

/* ---------------------------------------------------------------
 * dispatch table                                                |
 * --------------------------------------------------------------*/
//|.macro Dispatch
//|.if TRACE_OP
//|  mov INSTR,dword [PC]
//|  movzx OP,INSTR_OP
//|  mov CARG1,OP
//|  fcall PrintOP
//|.endif
// IFETCH starts, one of the hottest code segement
// The top 4 instructions are ordered as 4-1-1-1 to optimize decoder so
// it can be decoded in one cycle.
//|  mov INSTR,dword [PC]  // 2 uops
//|  movzx OP,INSTR_OP     // 1 uops
//|  add PC,4              // fused 1uops
//|  shr INSTR,8           // fused 1uops
//|  jmp aword [DISPATCH+OP*8]
//|.endmacro

/* ---------------------------------------------------------------
 * decode each instruction's argument/operand                    |
 * --------------------------------------------------------------*/

//|.macro instr_B
// cannot use ARG1F due to INSTR_A8 uses ah
//|  movzx ARG1F,INSTR_A8L
//|  shr INSTR,8
//|.endmacro

//|.macro instr_C
//|  movzx ARG1F,INSTR_A16
//|  shr INSTR,16
//|.endmacro

//|.macro instr_D
//|  movzx ARG1F,INSTR_A8L
//|  shr INSTR,8
// do not change ARG3 --> ARG3F even if it is better, due to the fact
// we cannot use ax register when rex prefix is used in instruction.
//|  movzx ARG3,INSTR_A8H
//|  or ARG2,0xff
//|.endmacro

//|.macro instr_E
//|  movzx ARG1,INSTR_A8L
//|  shr INSTR,8
//|.endmacro

//|.macro instr_F
//|  movzx ARG1,INSTR_A8L
//|.endmacro

//|.macro instr_G
//|  movzx ARG1F,INSTR_A16
//|.endmacro

//|.macro instr_X
//|.endmacro

//|.macro instr_N
//|  instr_D
//|.endmacro

/* -----------------------------------------------------------
 * Special Constant for Real                                 |
 * ----------------------------------------------------------*/
//|.macro LdRConstH,XREG,HIGH
//|  mov64 T1,(static_cast<std::uint64_t>(HIGH)<<32)
//|  movd XREG,T1
//|.endmacro

//|.macro LdRConstL,XREG,LOW
//|  mov64 T1,(static_cast<std::uint64_t>(LOW))
//|  movd XREG,T1
//|.endmacro

//|.macro LdRConst,XREG,X64V
//|  mov64 T1,X64V
//|  movd  XREG,T1
//|.endmacro

// Used to negate the double precision number's sign bit
//|.macro LdRConst_sign,XREG; LdRConstH XREG,0x80000000; .endmacro

/* -----------------------------------------------------------
 * constant loading                                          |
 * ----------------------------------------------------------*/

// Currently our constant loading is *slow* due to the design of our GC
// and also the layout of each constant array. I think we have a way to
// optimize away one memory move. LuaJIT's constant loading is just one
// single instruction since they only get one constant array and they don't
// need to worry about GC move the reference
//|.macro LdInt,reg,index
//|  mov T1,qword [PROTO]
//|  mov T2,qword [T1+PrototypeLayout::kIntTableOffset]
//|  mov reg, [T2+index*4]
//|.endmacro

// TODO:: Optimize this piece of shit
//|.macro LdIntV,reg,regL,index
//|  mov T1,qword [PROTO]
//|  mov T2,qword [T1+PrototypeLayout::kIntTableOffset]

//|.if 0
//|  mov reg, Value::FLAG_INTEGER
//|  shl reg,32
//|  or regL,dword [T2+index*4]
//|.else
//|  mov64 reg, static_cast<std::uint64_t>(Value::TAG_INTEGER)
//|  or regL,dword [T2+index*4]
//|.endif

//|.endmacro

//|.macro LdReal,reg,index
//|  mov T1,qword [PROTO]
//|  mov T2,qword [T1+PrototypeLayout::kRealTableOffset]
//|  movsd reg,qword[T2+index*8]
//|.endmacro

//|.macro LdRealV,reg,index
//|  mov T1,qword [PROTO]
//|  mov T2,qword [T1+PrototypeLayout::kRealTableOffset]
// not a xmm register
//|  mov reg,qword[T2+index*8]
//|.endmacro

//|.macro LdInt2Real,reg,index
//|  mov T1,qword [PROTO]
//|  mov T2,qword [T1+PrototypeLayout::kIntTableOffset]
//|  cvtsi2sd reg, dword [T2+index*4]
//|.endmacro

//|.macro StIntACC,reg
//|  mov dword [STK+ACCIDX],reg
//|  mov dword [STK+ACCFIDX],Value::FLAG_INTEGER
//|.endmacro

//|.macro StInt,index,reg
//|  mov dword [STK+index*8],reg
//|  mov dword [STK+index*8+4],Value::FLAG_INTEGER
//|.endmacro

//|.macro StRealACC,reg
//|  movsd qword [ACC],reg
//|.endmacro

// --------------------------------------------
// load upvalue value into register
//|.macro LdUV,reg,index
//|  mov T1,qword [RUNTIME+RuntimeLayout::kCurClsOffset]
//|  mov T2,qword [T1+ClosureLayout::kUpValueOffset]
//|  mov reg, qword [T2+index*8]
//|.endmacro

//|.macro StUV,index,reg
//|  mov T1,qword [RUNTIME+RuntimeLayout::kCurClsOffset]
//|  mov T2,qword [T1+ClosureLayout::kUpValueOffset]
//|  mov qword [T2+index*8], reg
//|.endmacro

//|.macro CheckNum,index,val,real_label,int_label
// TODO:: profile these 2 implementations
//|.if 1
//|  cmp dword[STK+index*8+4],Value::FLAG_REAL
//|  jb >real_label
//|  cmp dword[STK+index*8+4],Value::FLAG_INTEGER
//|  je >int_label
//|.else
//|  mov T1,val
//|  shr T1,32
//|  cmp T1L,Value::FLAG_REAL
//|  jb >real_label
//|  cmp T1L,Value::FLAG_INTEGER
//|  je >int_label
//|.endif
//|.endmacro

// Check whether a Value is a HeapObject
//|.macro CheckHeap,val,fail_label
//|  mov T1,val
//|  shr T1,48
//|  cmp T1L, Value::FLAG_HEAP
//|  jne >fail_label
//|.endmacro

// Set a pointer into a register , this is really painful
//|.macro StHeap,reg,val

//|.if 1
//|  mov reg,Value::FLAG_HEAP
//|  shl reg,48
//|  or reg ,val
//|.else
//|  mov reg,val
//|  or  reg,qword [->ValueHeapMaskStore]
//|.endif

//|.endmacro

// Store a pointer into memory pointed by index
//|.macro StHeapMem,index,ptr
//|  mov qword[STK+index*8]  ,ptr
//|  mov word [STK+index*8+6],Value::FLAG_HEAP
//|.endmacro

// Load a pointer from Value object , assume this object
// is a pointer type
//|.macro LdPtrFromV,dest,val
//|.if 1
//|  mov dest,Value::FLAG_HEAP_UNMASK
//|  shl dest,48
//|  or  dest,val
//|.else
//|  mov dest,val
//|  or  dest,qword [->ValueHeapLoadMask]
//|.endif
//|.endmacro

//|.macro DerefPtrFromV,v
//|  or v, qword [->ValueHeapLoadMask]
//|.endmacro

// It is painful to load a string into its Value format
//|.macro LdStrV,val,index
//|  mov T1 , qword [PROTO]
//|  mov T2 , qword [T1+PrototypeLayout::kStringTableOffset]
//|  mov T1 , qword [T2+index*8]
//|  StHeap val,T1
//|.endmacro

//|.macro LdStr,val,index
//|  mov T1 , qword [PROTO]
//|  mov T2 , qword [T1+PrototypeLayout::kStringTableOffset]
//|  mov val, qword [T2+index*8]
//|.endmacro

// General macro to check a heap object is certain type
//|.macro CheckHeapPtrT,val,pattern,fail_label
//|  cmp byte [val-(HeapObjectHeader::kHeapObjectHeaderSize+6)], pattern
//|  jne >fail_label
//|.endmacro

//|.macro CheckHeapT,val,pattern,fail_label
//|  or val,qword [->ValueHeapMaskLoad]
//|  mov val, qword [val]
//|  CheckHeapPtrT val,pattern,fail_label
//|.endmacro

// -------------------------------------------------------------------------
// Object bit pattern

#define OBJECT_BIT_PATTERN TYPE_OBJECT

#define LIST_BIT_PATTERN TYPE_LIST

#define SSO_BIT_PATTERN TYPE_STRING

#define CLOSURE_BIT_PATTERN TYPE_CLOSURE

#define EXTENSION_BIT_PATTERN TYPE_EXTENSION

// -------------------------------------------------------------------------
// Check an *GCRef* is Object or not

//|.macro CheckObj,val,fail_label
//|  CheckHeapT val,OBJECT_BIT_PATTERN,fail_label
//|.endmacro

//|.macro CheckObjV,val,fail_label
//|  CheckHeap val,fail_label
//|  CheckObj val,fail_label
//|.endmacro

// --------------------------------------------------------------------------
// Check an *GCRef* is List or not

//|.macro CheckList,val,fail_label
//|  CheckHeapT val,LIST_BIT_PATTERN,fail_label
//|.endmacro

//|.macro CheckListV,val,fail_label
//|  CheckHeap val,fail_label
//|  CheckObj val,fail_label
//|.endmacro

// --------------------------------------------------------------------------
// Check a *GCRef* is SSO or not , not stored in Value

// reg : pointer of String
//|.macro CheckSSO,reg,fail
//|  mov reg, qword [reg]
//|  CheckHeapPtrT reg,SSO_BIT_PATTERN,fail
// dereference *once* from String* --> SSO*
//|  mov reg, qword [reg]
//|.endmacro

//|.macro CheckSSOV,reg,fail
//|  CheckHeap reg,fail
//|  CheckHeapT,reg,SSO_BIT_PATTERN,fail
// dereference *once* from String* --> SSO*
//|  mov reg, qword [reg]
//|.endmacro

#define INTERP_HELPER_LIST(__) \
  /* arithmetic */                           \
  __(INTERP_START,InterpStart)               \
  __(INTERP_FAIL ,InterpFail)                \
  __(INTERP_RETURN,InterpReturn)             \
  __(INTERP_ARITH_INTL,InterpArithIntL)      \
  __(INTERP_ARITH_INTR,InterpArithIntR)      \
  __(INTERP_ARITH_REALL,InterpArithRealL)    \
  __(INTERP_ARITH_REALR,InterpArithRealR)    \
  __(INTERP_ARITH_VV,InterpArithVV)          \
  __(INTERP_POW_SLOWVI,InterpPowSlowVI)      \
  __(INTERP_POW_SLOWIV,InterpPowSlowIV)      \
  __(INTERP_POW_SLOWVR,InterpPowSlowVR)      \
  __(INTERP_POW_SLOWRV,InterpPowSlowRV)      \
  __(INTERP_POW_SLOWVV,InterpPowSlowVV)      \
  __(DIV_BY_ZERO,DivByZero)                  \
  __(MOD_BY_REAL,ModByReal)                  \
  /* comparison */                           \
  __(INTERP_COMPAREIV,InterpCompareIV)       \
  __(INTERP_COMPAREVI,InterpCompareVI)       \
  __(INTERP_COMPARERV,InterpCompareRV)       \
  __(INTERP_COMPAREVR,InterpCompareVR)       \
  __(INTERP_COMPAREVV,InterpCompareVV)       \
  __(INTERP_COMPARESV,InterpCompareSV)       \
  __(INTERP_COMPAREVS,InterpCompareVS)       \
  /* loading obj/list/cls */                 \
  __(INTERP_LOADOBJ0 ,InterpLoadObj0)        \
  __(INTERP_LOADOBJ1 ,InterpLoadObj1)        \
  __(INTERP_NEWOBJ   ,InterpNewObj  )        \
  __(INTERP_ADDOBJ   ,InterpAddObj  )        \
  __(INTERP_LOADLIST0,InterpLoadList0)       \
  __(INTERP_LOADLIST1,InterpLoadList1)       \
  __(INTERP_LOADLIST2,InterpLoadList2)       \
  __(INTERP_NEWLIST  ,InterpNewList  )       \
  __(INTERP_ADDLIST  ,InterpAddList  )       \
  __(INTERP_LOADCLS  ,InterpLoadCls  )       \
  /* unary */                                \
  __(INTERP_NEGATE,InterpNegate)             \
  __(INTERP_NOT,InterpNot)                   \
  /* property get/set */                     \
  __(INTERP_PROPGET_NOTFOUND,InterpPropGetNotFound)      \
  __(INTERP_PROPGET_NOTOBJECT,InterpPropGetNotObject)    \
  __(INTERP_PROPGET,InterpPropGet)           \
  __(INTERP_PROPSET,InterpPropSet)           \
  __(INTERP_IDXGETI,InterpIdxGetI)           \
  __(INTERP_IDXGET ,InterpIdxGet )           \
  __(INTERP_IDXSET ,InterpIdxSet )           \
  __(INTERP_GSET   ,InterpGGset  )           \
  __(INTERP_GGET   ,InterpGGet   )           \
  /* ---- debug helper ---- */               \
  __(PRINT_OP,PrintOP)                       \
  __(PRINT2  ,Print2 )                       \
  __(PRINTF  ,PrintF )

enum {
  INTERP_HELPER_DUMMY = SIZE_OF_BYTECODE,

#define __(A,B) A,
  INTERP_HELPER_LIST(__)
#undef __

  DASM_GROWABLE_PC_SIZE
};

#define INTERP_HELPER_START (INTERP_HELPER_DUMMY+1)
#define INTERP_HELPER_SIZE (DASM_GROWABLE_PC_SIZE-INTERP_HELPER_ROUTINE_ENUM-1)

const char* GetInterpHelperName( int idx ) {
  switch(idx) {
#define __(A,B) case A: return #B;
    INTERP_HELPER_LIST(__)
    default:
      lava_unreachF("unknown helper with index:%d",idx);
      return NULL;
#undef __ // __
  }
}

/* -----------------------------------------------------------
 * Macro Interfaces for Dynasm                               |
 * ----------------------------------------------------------*/
#define Dst (&(bctx->dasm_ctx))

/* -----------------------------------------------------------
 * Interpreter Prolog                                        |
 * ----------------------------------------------------------*/
void GenerateInterpMisc( BuildContext* bctx ) {
  /* -------------------------------------------
   * Constant value needed for the interpreter |
   * ------------------------------------------*/
  //|.data
  dasm_put(Dst, 0);
#line 1049 "src/interpreter/bytecode-interpreter.dasc"
  //|->ValueHeapMaskStore:
  //|.dword Value::TAG_HEAP_STORE_MASK_HIGHER,Value::TAG_HEAP_STORE_MASK_LOWER
  dasm_put(Dst, 2, Value::TAG_HEAP_STORE_MASK_HIGHER, Value::TAG_HEAP_STORE_MASK_LOWER);
#line 1051 "src/interpreter/bytecode-interpreter.dasc"

  //|->ValueHeapMaskLoad:
  //|.dword Value::TAG_HEAP_LOAD_MASK_HIGHER,Value::TAG_HEAP_LOAD_MASK_LOWER
  dasm_put(Dst, 7, Value::TAG_HEAP_LOAD_MASK_HIGHER, Value::TAG_HEAP_LOAD_MASK_LOWER);
#line 1054 "src/interpreter/bytecode-interpreter.dasc"

  //|->RealZero:
  //|.dword 0,0
  dasm_put(Dst, 12);
#line 1057 "src/interpreter/bytecode-interpreter.dasc"

  //|.code
  dasm_put(Dst, 23);
#line 1059 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------
   * Start of the code                         |
   * ------------------------------------------*/

  //|.macro interp_prolog
  //|  sub   rsp, RESERVE_RSP             // make room on the stack

  //|  mov qword SAVED_R12,r12            // runtime
  //|  mov qword SAVED_R13,r13            // proto
  //|  mov qword SAVED_R14,r14            // stack
  //|  mov qword SAVED_R15,r15            // dispatch
  //|  mov qword SAVED_RBP,rbp            // PC
  //|  mov qword SAVED_RBX,rbx            // used by ARG2 , this may be changed in the future
  //|.endmacro

  //|.macro interp_epilog
  //|  mov r12, qword SAVED_R12
  //|  mov r13, qword SAVED_R13
  //|  mov r14, qword SAVED_R14
  //|  mov r15, qword SAVED_R15
  //|  mov rbp, qword SAVED_RBP
  //|  mov rbx, qword SAVED_RBX

  //|  add rsp, RESERVE_RSP
  //|.endmacro

  /* -------------------------------------------
   * Interpreter Prolog                        |
   * ------------------------------------------*/
  //|=> INTERP_START:
  //|->InterpStart:
  dasm_put(Dst, 25,  INTERP_START);
#line 1091 "src/interpreter/bytecode-interpreter.dasc"
  // save all callee saved register since we use them to keep tracking of
  // our most important data structure
  //|  interp_prolog
  dasm_put(Dst, 29);
#line 1094 "src/interpreter/bytecode-interpreter.dasc"

  //|  mov RUNTIME ,CARG1                 // runtime
  //|  mov PROTO   ,CARG2                 // proto
  //|  mov STK     ,CARG3                 // stack
  //|  mov PC      ,CARG4                 // pc
  //|  mov DISPATCH,CARG5                 // dispatch
  dasm_put(Dst, 65);
#line 1100 "src/interpreter/bytecode-interpreter.dasc"

  //|  mov qword SAVED_PC,CARG4           // save the *start* of bc array
  dasm_put(Dst, 83);
#line 1102 "src/interpreter/bytecode-interpreter.dasc"
  // run
  //|  Dispatch
  dasm_put(Dst, 88);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1104 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------
   * Interpreter exit handler                  |
   * ------------------------------------------*/
  //|=> INTERP_FAIL:
  //|->InterpFail:
  //|  xor eax,eax
  //|  interp_epilog
  //|  ret
  dasm_put(Dst, 132,  INTERP_FAIL);
#line 1113 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_RETURN:
  //|->InterpReturn:
  //|  mov rax, qword [ACC]
  //|  mov qword [RUNTIME+RuntimeLayout::kRetOffset],rax
  //|  mov rax,1
  dasm_put(Dst, 173,  INTERP_RETURN, RuntimeLayout::kRetOffset);
#line 1119 "src/interpreter/bytecode-interpreter.dasc"

  //|  interp_epilog
  //|  ret
  dasm_put(Dst, 137);
#line 1122 "src/interpreter/bytecode-interpreter.dasc"
}

/* ------------------------------------------
 * helper functions/routines generation     |
 * -----------------------------------------*/
void GenerateHelper( BuildContext* bctx ) {
  // ----------------------------------------
  // helper macros
  // ----------------------------------------
  //|.macro ret2acc
  //|  mov T1,rax
  //|  shr T1,32
  //|  cmp T1,VALUE_FAIL
  //|  je ->InterpFail
  //|  mov qword [ACC], rax
  //|  Dispatch
  //|.endmacro

  //|.macro retbool
  //|  test eax,eax
  //|  je ->InterpFail
  //|  Dispatch
  //|.endmacro

  // saving the current PC into the Runtime object, this is
  // needed for GC to figure out the correct active register
  // layout during the GC marking phase
  //|.macro savepc
  //|  mov qword [RUNTIME+RuntimeLayout::kCurPCOffset], PC
  //|.endmacro

  /* ----------------------------------------
   * Load object/list/closure               |
   * ---------------------------------------*/
  //|=> INTERP_LOADLIST0:
  //|->InterpLoadList0:
  //|  instr_F
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  lea CARG2,[STK+ARG1F*8]
  //|  fcall InterpreterDoLoadList0
  dasm_put(Dst, 198,  INTERP_LOADLIST0, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList0))) {
  dasm_put(Dst, 218);
   } else {
     lava_warn("%s","Function InterpreterDoLoadList0 address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList0)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList0))>>32));
   }
#line 1163 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1164 "src/interpreter/bytecode-interpreter.dasc"


  //|=> INTERP_LOADLIST1:
  //|->InterpLoadList1:
  //|  instr_E
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG2, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoLoadList1
  dasm_put(Dst, 240,  INTERP_LOADLIST1, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList1))) {
  dasm_put(Dst, 267);
   } else {
     lava_warn("%s","Function InterpreterDoLoadList1 address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList1)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList1))>>32));
   }
#line 1174 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1175 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_LOADLIST2:
  //|->InterpLoadList2:
  //|  instr_D
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  mov CARG4, qword [STK+ARG3F*8]
  //|  fcall InterpreterDoLoadList2
  dasm_put(Dst, 272,  INTERP_LOADLIST2, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList2))) {
  dasm_put(Dst, 313);
   } else {
     lava_warn("%s","Function InterpreterDoLoadList2 address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList2)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoLoadList2))>>32));
   }
#line 1185 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1186 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_NEWLIST:
  //|->InterpNewList:
  //|  instr_B
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG3L, ARG2
  //|  fcall InterpreterDoNewList
  dasm_put(Dst, 318,  INTERP_NEWLIST, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoNewList))) {
  dasm_put(Dst, 344);
   } else {
     lava_warn("%s","Function InterpreterDoNewList address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoNewList)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoNewList))>>32));
   }
#line 1195 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1196 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ADDLIST:
  //|->InterpAddList:
  //|  instr_E
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoAddList
  dasm_put(Dst, 349,  INTERP_ADDLIST, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoAddList))) {
  dasm_put(Dst, 376);
   } else {
     lava_warn("%s","Function InterpreterDoAddList address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoAddList)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoAddList))>>32));
   }
#line 1205 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1206 "src/interpreter/bytecode-interpreter.dasc"


  //|=> INTERP_LOADOBJ0:
  //|->InterpLoadObj0:
  //|  instr_F
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  fcall InterpreterDoLoadObj0
  dasm_put(Dst, 381,  INTERP_LOADOBJ0, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadObj0))) {
  dasm_put(Dst, 401);
   } else {
     lava_warn("%s","Function InterpreterDoLoadObj0 address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadObj0)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoLoadObj0))>>32));
   }
#line 1215 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1216 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_LOADOBJ1:
  //|->InterpLoadObj1:
  //|  instr_D
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  mov CARG4, qword [STK+ARG3F*8]
  //|  fcall InterpreterDoLoadObj1
  dasm_put(Dst, 406,  INTERP_LOADOBJ1, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadObj1))) {
  dasm_put(Dst, 447);
   } else {
     lava_warn("%s","Function InterpreterDoLoadObj1 address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadObj1)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoLoadObj1))>>32));
   }
#line 1226 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1227 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_NEWOBJ:
  //|->InterpNewObj:
  //|  instr_B
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG3L, ARG2
  //|  fcall InterpreterDoNewObj
  dasm_put(Dst, 452,  INTERP_NEWOBJ, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoNewObj))) {
  dasm_put(Dst, 478);
   } else {
     lava_warn("%s","Function InterpreterDoNewObj address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoNewObj)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoNewObj))>>32));
   }
#line 1236 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1237 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ADDOBJ:
  //|->InterpAddObj:
  //|  instr_D
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  mov CARG4, qword [STK+ARG3F*8]
  //|  fcall InterpreterDoAddObj
  dasm_put(Dst, 483,  INTERP_ADDOBJ, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoAddObj))) {
  dasm_put(Dst, 524);
   } else {
     lava_warn("%s","Function InterpreterDoAddObj address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoAddObj)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoAddObj))>>32));
   }
#line 1247 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1248 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_LOADCLS:
  //|->InterpLoadCls:
  //|  instr_G
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, STK
  //|  mov CARG3L, ARG1
  //|  fcall InterpreterDoLoadCls
  dasm_put(Dst, 529,  INTERP_LOADCLS, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadCls))) {
  dasm_put(Dst, 552);
   } else {
     lava_warn("%s","Function InterpreterDoLoadCls address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoLoadCls)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoLoadCls))>>32));
   }
#line 1257 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1258 "src/interpreter/bytecode-interpreter.dasc"

  /* ----------------------------------------
   * InterpArithXXX                         |
   * ---------------------------------------*/
  //|=> INTERP_ARITH_INTL:
  //|->InterpArithIntL:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  LdIntV CARG2,CARG2L,ARG1F
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 557,  INTERP_ARITH_INTL, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 586);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 1268 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1269 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_INTR:
  //|->InterpArithIntR:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  LdIntV CARG3,CARG3L,ARG2F
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 627,  INTERP_ARITH_INTR, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 586);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 1276 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1277 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_REALL:
  //|->InterpArithRealL:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  LdRealV CARG2,ARG1F
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 656,  INTERP_ARITH_REALL, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 586);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 1284 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1285 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_REALR:
  //|->InterpArithRealR:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  LdRealV CARG3,ARG2F
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 681,  INTERP_ARITH_REALR, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 586);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 1292 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1293 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_VV:
  //|->InterpArithVV:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 706,  INTERP_ARITH_VV, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 586);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 1301 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1302 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWIV:
  //|->InterpPowSlowIV:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  LdIntV CARG2,CARG2L,ARG1F
  //|  mov CARG3,qword [STK+ARG2F*8]
  //|  fcall InterpreterPow
  dasm_put(Dst, 727,  INTERP_POW_SLOWIV, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 760);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 1310 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1311 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWRV:
  //|->InterpPowSlowRV:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  LdRealV CARG2,ARG1F
  //|  mov CARG3,qword [STK+ARG2F*8]
  //|  fcall InterpreterPow
  dasm_put(Dst, 765,  INTERP_POW_SLOWRV, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 760);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 1319 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1320 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWVI:
  //|->InterpPowSlowVI:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdIntV CARG3,CARG3L,ARG2F
  //|  fcall InterpreterPow
  dasm_put(Dst, 794,  INTERP_POW_SLOWVI, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 760);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 1328 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1329 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWVR:
  //|->InterpPowSlowVR:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdRealV CARG3,ARG2F
  //|  fcall InterpreterPow
  dasm_put(Dst, 827,  INTERP_POW_SLOWVR, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 760);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 1337 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1338 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWVV:
  //|->InterpPowSlowVV:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2,qword [STK+ARG1F*8]
  //|  LdRealV CARG3,ARG2F
  //|  fcall InterpreterPow
  dasm_put(Dst, 856,  INTERP_POW_SLOWVV, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 760);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 1346 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1347 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------
   * Interp Arithmetic Exception               |
   * ------------------------------------------*/
  //|=> DIV_BY_ZERO:
  //|->DivByZero:
  //|  mov CARG1,RUNTIME
  //|  lea CARG2,[PC-4]
  //|  fcall InterpreterDivByZero
  dasm_put(Dst, 885,  DIV_BY_ZERO);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDivByZero))) {
  dasm_put(Dst, 897);
   } else {
     lava_warn("%s","Function InterpreterDivByZero address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDivByZero)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDivByZero))>>32));
   }
#line 1356 "src/interpreter/bytecode-interpreter.dasc"
  //|  jmp ->InterpFail
  dasm_put(Dst, 902);
#line 1357 "src/interpreter/bytecode-interpreter.dasc"

  //|=> MOD_BY_REAL:
  //|->ModByReal:
  //|  mov CARG1,RUNTIME
  //|  lea CARG2,[PC-4]
  //|  fcall InterpreterModByReal
  dasm_put(Dst, 907,  MOD_BY_REAL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterModByReal))) {
  dasm_put(Dst, 919);
   } else {
     lava_warn("%s","Function InterpreterModByReal address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterModByReal)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterModByReal))>>32));
   }
#line 1363 "src/interpreter/bytecode-interpreter.dasc"
  //|  jmp ->InterpFail
  dasm_put(Dst, 902);
#line 1364 "src/interpreter/bytecode-interpreter.dasc"


  /* -------------------------------------------
   * Interp Comparison                         |
   * ------------------------------------------*/
  //|=> INTERP_COMPAREIV:
  //|->InterpCompareIV:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  LdIntV CARG2,CARG2L,ARG1F
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 924,  INTERP_COMPAREIV, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1376 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1377 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVI:
  //|->InterpCompareVI:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdIntV CARG3,CARG3L,ARG2F
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 962,  INTERP_COMPAREVI, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1385 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1386 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPARERV:
  //|->InterpCompareRV:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  LdRealV CARG2,ARG2F
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 995,  INTERP_COMPARERV, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1394 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1395 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVR:
  //|->InterpCompareVR:
  //|  savepc
  //|  mov CARG1,RUNTIME
  //|  mov CARG2,qword [STK+ARG1F*8]
  //|  LdRealV CARG3,ARG2F
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 1024,  INTERP_COMPAREVR, RuntimeLayout::kCurPCOffset, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1403 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1404 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVV:
  //|->InterpCompareVV:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 1053,  INTERP_COMPAREVV, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1412 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1413 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPARESV:
  //|->InterpCompareSV:
  //|  instr_C
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  LdStrV CARG2,ARG1F
  //|  mov CARG2, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 1074,  INTERP_COMPARESV, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1422 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1423 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVS:
  //|->InterpCompareVS:
  //|  instr_B
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdStrV CARG3,ARG2F
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 1121,  INTERP_COMPAREVS, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 957);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1432 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1433 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------------
   * Unary                                           |
   * ------------------------------------------------*/
  //|=> INTERP_NEGATE:
  //|->InterpNegate:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, qword [STK+ARG1F*8]
  //|  fcall InterpreterDoNegate
  dasm_put(Dst, 1168,  INTERP_NEGATE, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoNegate))) {
  dasm_put(Dst, 1185);
   } else {
     lava_warn("%s","Function InterpreterDoNegate address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoNegate)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoNegate))>>32));
   }
#line 1443 "src/interpreter/bytecode-interpreter.dasc"
  // return value is a *boolean*
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1445 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_NOT:
  //|->InterpNot:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, qword [STK+ARG1F*8]
  //|  fcall InterpreterDoNot
  dasm_put(Dst, 1190,  INTERP_NOT, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoNot))) {
  dasm_put(Dst, 1207);
   } else {
     lava_warn("%s","Function InterpreterDoNot address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoNot)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoNot))>>32));
   }
#line 1452 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1453 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------------
   * Property Get/Set                                |
   * ------------------------------------------------*/
  //|=> INTERP_PROPGET:
  //|->InterpPropGet:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdStr CARG3, ARG2F
  //|  fcall InterpreterDoPropGet
  dasm_put(Dst, 1212,  INTERP_PROPGET, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoPropGet))) {
  dasm_put(Dst, 1241);
   } else {
     lava_warn("%s","Function InterpreterDoPropGet address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoPropGet)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoPropGet))>>32));
   }
#line 1464 "src/interpreter/bytecode-interpreter.dasc"
  //|  ret2acc
  dasm_put(Dst, 591, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1465 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_PROPGET_NOTFOUND:
  //|->InterpPropGetNotFound:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdStr CARG3,ARG1F
  //|  fcall InterpreterPropGetNotFound
  dasm_put(Dst, 1246,  INTERP_PROPGET_NOTFOUND, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPropGetNotFound))) {
  dasm_put(Dst, 1275);
   } else {
     lava_warn("%s","Function InterpreterPropGetNotFound address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPropGetNotFound)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPropGetNotFound))>>32));
   }
#line 1473 "src/interpreter/bytecode-interpreter.dasc"
  //|  jmp ->InterpFail
  dasm_put(Dst, 902);
#line 1474 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_PROPGET_NOTOBJECT:
  //|->InterpPropGetNotObject:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdStr CARG3, ARG2F
  //|  fcall InterpreterPropGetNotObject
  dasm_put(Dst, 1280,  INTERP_PROPGET_NOTOBJECT, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPropGetNotObject))) {
  dasm_put(Dst, 1309);
   } else {
     lava_warn("%s","Function InterpreterPropGetNotObject address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPropGetNotObject)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPropGetNotObject))>>32));
   }
#line 1482 "src/interpreter/bytecode-interpreter.dasc"
  //|  jmp ->InterpFail
  dasm_put(Dst, 902);
#line 1483 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_PROPSET:
  //|->InterpPropSet:
  //|  instr_B
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [ACC]
  //|  mov CARG3, qword [STK+ARG1F*8]
  //|  LdStr CARG4, ARG2F
  //|  fcall InterpreterDoPropSet
  dasm_put(Dst, 1314,  INTERP_PROPSET, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoPropSet))) {
  dasm_put(Dst, 1358);
   } else {
     lava_warn("%s","Function InterpreterDoPropSet address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoPropSet)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoPropSet))>>32));
   }
#line 1493 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1494 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_IDXGET:
  //|->InterpIdxGet:
  //|  instr_E
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoIdxGet
  dasm_put(Dst, 1363,  INTERP_IDXGET, RuntimeLayout::kCurPCOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoIdxGet))) {
  dasm_put(Dst, 1390);
   } else {
     lava_warn("%s","Function InterpreterDoIdxGet address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoIdxGet)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoIdxGet))>>32));
   }
#line 1503 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1504 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_IDXGETI:
  //|->InterpIdxGetI:
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1F*8]
  //|  LdInt CARG3L,ARG2F
  //|  fcall InterpreterDoIdxGetI
  dasm_put(Dst, 1395,  INTERP_IDXGETI, RuntimeLayout::kCurPCOffset, PrototypeLayout::kIntTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoIdxGetI))) {
  dasm_put(Dst, 1424);
   } else {
     lava_warn("%s","Function InterpreterDoIdxGetI address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoIdxGetI)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoIdxGetI))>>32));
   }
#line 1512 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1513 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_GSET:
  //|->InterpGSet:
  //|  instr_C
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  LdStr CARG2,ARG1F
  //|  mov CARG3, qword [STK+ARG2F*8]
  //|  fcall InterpreterDoGSet
  dasm_put(Dst, 1429,  INTERP_GSET, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoGSet))) {
  dasm_put(Dst, 1465);
   } else {
     lava_warn("%s","Function InterpreterDoGSet address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoGSet)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoGSet))>>32));
   }
#line 1522 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1523 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_GGET:
  //|->InterpGGet:
  //|  instr_B
  //|  savepc
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, [STK+ARG1F*8]
  //|  LdStr CARG3, ARG2F
  //|  fcall InterpreterDoGGet
  dasm_put(Dst, 1470,  INTERP_GGET, RuntimeLayout::kCurPCOffset, PrototypeLayout::kStringTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoGGet))) {
  dasm_put(Dst, 1506);
   } else {
     lava_warn("%s","Function InterpreterDoGGet address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoGGet)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoGGet))>>32));
   }
#line 1532 "src/interpreter/bytecode-interpreter.dasc"
  //|  retbool
  dasm_put(Dst, 223);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1533 "src/interpreter/bytecode-interpreter.dasc"
}

void GenerateOneBytecode( BuildContext* bctx, Bytecode bc ) {
  // hack around idiv operator which are used to implement the
  // BC_MODXX and BC_DIVXX instruction. It has a different format
  // and different result/output
  bool arith_div = false;
  bool arith_mod = false;

  switch(bc) {
    /** =====================================================
     *  Call handling                                       |
     *  ====================================================*/
    case BC_RETNULL:
      //|=> bc:
      //|  instr_X
      //|  mov dword [STK+ACCFIDX],Value::FLAG_NULL
      //|  jmp ->InterpReturn
      dasm_put(Dst, 1511,  bc, Value::FLAG_NULL);
#line 1551 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_RET:
      //|=> bc:
      //|  instr_X
      //|  jmp ->InterpReturn
      dasm_put(Dst, 1526,  bc);
#line 1557 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /** =====================================================
     *  Register Move                                       |
     *  ====================================================*/
    case BC_MOVE:
      //|=> bc:
      //|  instr_E
      //|  mov T1,qword [STK+ARG2F*8]
      //|  mov qword [STK+ARG1F*8],T1
      //|  Dispatch
      dasm_put(Dst, 1532,  bc);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1568 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /** =====================================================
     *  Constant Loading                                    |
     *  ====================================================*/
    case BC_LOADI:
      //|=> bc:
      //|  instr_B
      //|  LdInt LREGL,ARG2F
      //|  StInt ARG1F,LREGL
      //|  Dispatch
      dasm_put(Dst, 1558,  bc, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1579 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOAD0:
      //|=> bc:
      //|  instr_F
      //|  StInt ARG1F,0
      //|  Dispatch
      dasm_put(Dst, 1599,  bc, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1586 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOAD1:
      //|=> bc:
      //|  instr_F
      //|  StInt ARG1F,1
      //|  Dispatch
      dasm_put(Dst, 1628,  bc, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1593 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADN1:
      //|=> bc:
      //|  instr_F
      //|  StInt ARG1F,-1
      //|  Dispatch
      dasm_put(Dst, 1657,  bc, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1600 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADR:
      //|=> bc:
      //|  instr_B
      //|  LdReal xmm0,ARG2F
      //|  movsd qword [STK+ARG1F*8],xmm0
      //|  Dispatch
      dasm_put(Dst, 1690,  bc, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1608 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADNULL:
      //|=> bc:
      //|  instr_F
      //|  mov dword [STK+ARG1F*8+4],Value::FLAG_NULL
      //|  Dispatch
      dasm_put(Dst, 1731,  bc, Value::FLAG_NULL);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1615 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADTRUE:
      //|=> bc:
      //|  instr_F
      //|  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
      //|  Dispatch
      dasm_put(Dst, 1731,  bc, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1622 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADFALSE:
      //|=> bc:
      //|  instr_F
      //|  mov dword [STK+ARG1F*8+4],Value::FLAG_FALSE
      //|  Dispatch
      dasm_put(Dst, 1731,  bc, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1629 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADSTR:
      //|=> bc:
      //|  instr_B
      //|  LdStrV LREG,ARG2F
      //|  mov qword [STK+ARG1F*8],LREG
      //|  Dispatch
      dasm_put(Dst, 1752,  bc, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1637 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // -------------------------------------------------
    // Loading List/Object/Cls
    //
    //
    // For these bytecodes, no optimization is performed but
    // directly yield back to C++ function to do the job. It
    // has no points to optimize these cases since they are
    // small amount of bytecodes and also complicated to write
    // in assembly without too much gain
    //
    //
    // To reduce ICache stress, the decode routine is *not*
    // placed inlined with each BC_XXX here but in the slow
    // path. This is purposely to make the main part of
    // interpreter to be small which helps about the icache
    // footprint of hot code
    // ------------------------------------------------*/
    case BC_LOADLIST0:
      //|=> bc:
      //|  jmp ->InterpLoadList0
      dasm_put(Dst, 1798,  bc);
#line 1659 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LOADLIST1:
      //|=>bc:
      //|  jmp ->InterpLoadList1
      dasm_put(Dst, 1804, bc);
#line 1663 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LOADLIST2:
      //|=>bc:
      //|  jmp ->InterpLoadList2
      dasm_put(Dst, 1810, bc);
#line 1667 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEWLIST:
      //|=>bc:
      //|  jmp ->InterpNewList
      dasm_put(Dst, 1816, bc);
#line 1671 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_ADDLIST:
      //|=>bc:
      //|  jmp ->InterpAddList
      dasm_put(Dst, 1822, bc);
#line 1675 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LOADOBJ0:
      //|=>bc:
      //|  jmp ->InterpLoadObj0
      dasm_put(Dst, 1828, bc);
#line 1679 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LOADOBJ1:
      //|=>bc:
      //|  jmp ->InterpLoadObj1
      dasm_put(Dst, 1834, bc);
#line 1683 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEWOBJ:
      //|=>bc:
      //|  jmp ->InterpNewObj
      dasm_put(Dst, 1840, bc);
#line 1687 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_ADDOBJ:
      //|=>bc:
      //|  jmp ->InterpAddObj
      dasm_put(Dst, 1846, bc);
#line 1691 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LOADCLS:
      //|=>bc:
      //|  jmp ->InterpLoadCls
      dasm_put(Dst, 1852, bc);
#line 1695 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /** =====================================================
     *  Arith XV                                            |
     *  ====================================================*/
    //|.macro arith_xv,BC,slow_path,int_handler,int_instr,real_handler,real_instr
    //|  instr_C
    //|  mov RREG, qword [STK+ARG2F*8]

    // Use arg3 as temporary in favoer over T1/T2
    //|.if CHECK_NUMBER_MEMORY
    //|  mov ARG3, dword[STK+ARG2F*8+4]
    //|.else
    //|  mov ARG3F,RREG
    //|  shr ARG3F,32
    //|.endif

    //|  cmp ARG3, Value::FLAG_INTEGER
    //|  jne >2
    // v --> integer
    //|  int_handler int_instr
    //|2:
    //|  cmp ARG3, Value::FLAG_REAL
    //|  jnb ->slow_path
    // v --> real
    //|  real_handler real_instr
    //|.endmacro

    //|.macro arith_iv_real,instr
    //|  LdInt2Real xmm0,ARG1F
    //|  movd xmm1,RREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_rv_real,instr
    //|  LdReal xmm0,ARG1F
    //|  movd xmm1,RREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_iv_do_div
    //|  mov ARG3 ,dword [STK+ARG2F*8]
    //|  LdInt eax,ARG1F
    //|.if CHECK_DIV_BY_ZERO
    //|  test eax,eax
    //|  je ->DivByZero
    //|.endif
    //|  cdq
    //|  idiv ARG3
    //|.endmacro

    //|.macro arith_iv_int,instr
    //|| if( arith_div ) {
    //|    arith_iv_do_div
    //|    StIntACC eax
    //|| } else {
    //|    LdInt LREGL,ARG1F
    //|    instr LREGL,RREGL
    //|    StIntACC LREGL
    //|| }
    //|  Dispatch
    //|.endmacro

    //|.macro arith_rv_int,instr
    //|  LdReal xmm0,ARG1F
    //|  cvtsi2sd xmm1, RREGL
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    case BC_ADDIV:
      //|=> bc:
      //|  arith_xv BC_ADDIV,InterpArithIntL,arith_iv_int,add,arith_iv_real,addsd
      dasm_put(Dst, 1858,  bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 1884, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 1929, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 1961, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1773 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_ADDRV:
      //|=>bc:
      //|  arith_xv BC_ADDRV,InterpArithRealL,arith_rv_int,addsd,arith_rv_real,addsd
      dasm_put(Dst, 2037, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2109, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1778 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBIV:
      //|=>bc:
      //|  arith_xv BC_SUBIV,InterpArithIntL,arith_iv_int,sub,arith_iv_real,subsd
      dasm_put(Dst, 1858, bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 1884, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 2185, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2217, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1783 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBRV:
      //|=>bc:
      //|  arith_xv BC_SUBRV,InterpArithRealL,arith_rv_int,subsd,arith_rv_real,subsd
      dasm_put(Dst, 2293, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2365, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1788 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULIV:
      //|=>bc:
      //|  arith_xv BC_MULIV,InterpArithIntL,arith_iv_int,imul,arith_iv_real,mulsd
      dasm_put(Dst, 1858, bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 1884, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 2441, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2475, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1793 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULRV:
      //|=>bc:
      //|  arith_xv BC_MULRV,InterpArithRealL,arith_rv_int,mulsd,arith_rv_real,mulsd
      dasm_put(Dst, 2551, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2623, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1798 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVIV:
      arith_div = true;
      //|=>bc:
      //|  arith_xv BC_DIVIV,InterpArithIntL,arith_iv_int,imul,arith_iv_real,divsd
      dasm_put(Dst, 1858, bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 1884, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 2441, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2699, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1804 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVRV:
      arith_div = true;
      //|=>bc:
      //|  arith_xv BC_DIVRV,InterpArithRealL,arith_rv_int,divsd,arith_rv_real,divsd
      dasm_put(Dst, 2775, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 2847, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1810 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MODIV:
      //|=>bc:
      //|  instr_C
      //|  cmp dword [STK+ARG2F*8+4], Value::FLAG_INTEGER
      //|  jne ->ModByReal
      dasm_put(Dst, 2923, bc, Value::FLAG_INTEGER);
#line 1817 "src/interpreter/bytecode-interpreter.dasc"

      // do the integer mod
      //|  mov ARG3, dword [STK+ARG2F*8]
      //|  LdInt eax,ARG1F
      dasm_put(Dst, 2943, PrototypeLayout::kIntTableOffset);
#line 1821 "src/interpreter/bytecode-interpreter.dasc"

      //|.if CHECK_DIV_BY_ZERO
      //|  test eax,eax
      //|  je ->DivByZero
      //|.endif
      dasm_put(Dst, 2960);
#line 1826 "src/interpreter/bytecode-interpreter.dasc"

      //|  cdq
      //|  idiv ARG3
      //|  StIntACC edx
      //|  Dispatch
      dasm_put(Dst, 2967, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1831 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* =========================================================
     * Arith VX                                                |
     * ========================================================*/
    //|.macro arith_vx,BC,slow_path,int_handler,int_instr,real_handler,real_instr
    //|  instr_B
    //|  mov LREG,qword [STK+ARG1F*8]

    //|.if CHECK_NUMBER_MEMORY
    //|  mov ARG3,dword [STK+ARG1F*8+4]
    //|.else
    //|  mov ARG3F,LREG
    //|  shr ARG3F,32
    //|.endif

    //|  cmp ARG3,Value::FLAG_INTEGER
    //|  jne >2

    // v --> integer
    //|  int_handler int_instr
    //|2:
    //|  cmp ARG3,Value::FLAG_REAL
    //|  jnb ->slow_path

    // v --> real
    //|  real_handler real_instr
    //|.endmacro

    //|.macro arith_vi_real,instr
    //|  LdInt2Real xmm1,ARG2F
    //|  movd xmm0,LREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_vi_do_div
    //|  LdInt ARG3,ARG2F
    //|  mov eax,LREGL
    //|.if 1
    //|  test eax,eax
    //|  je ->DivByZero
    //|.endif
    //|  cdq
    //|  idiv ARG3
    //|.endmacro

    //|.macro arith_vi_int,instr
    //|| if( arith_div ) {
    //|    arith_vi_do_div
    //|    StIntACC eax
    //|| } else {
    //|    LdInt RREGL,ARG2F
    //|    instr LREGL,RREGL
    //|    StIntACC LREGL
    //|| }
    //|  Dispatch
    //|.endmacro

    //|.macro arith_vr_real,instr
    //|  LdReal xmm1, ARG2F
    //|  movd xmm0,LREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_vr_int,instr
    //|  LdReal xmm1,ARG2F
    //|  cvtsi2sd xmm0, LREGL
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    case BC_ADDVI:
      //|=> bc:
      //|  arith_vx BC_ADDVI,InterpArithIntR,arith_vi_int,add,arith_vi_real,addsd
      dasm_put(Dst, 3000,  bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3026, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3070, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3102, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1910 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_ADDVR:
      //|=> bc:
      //|  arith_vx BC_ADDVR,InterpArithRealR,arith_vr_int,addsd,arith_vr_real,addsd
      dasm_put(Dst, 3178,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3250, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1915 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBVI:
      //|=> bc:
      //|  arith_vx BC_SUBVI,InterpArithIntR,arith_vi_int,sub,arith_vi_real,subsd
      dasm_put(Dst, 3000,  bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3026, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3326, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3358, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1920 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBVR:
      //|=> bc:
      //|  arith_vx BC_SUBVR,InterpArithRealR,arith_vr_int,subsd,arith_vr_real,subsd
      dasm_put(Dst, 3434,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3506, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1925 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULVI:
      //|=> bc:
      //|  arith_vx BC_MULVI,InterpArithIntR,arith_vi_int,imul,arith_vi_real,mulsd
      dasm_put(Dst, 3000,  bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3026, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3582, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3616, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1930 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULVR:
      //|=> bc:
      //|  arith_vx BC_MULVR,InterpArithRealR,arith_vr_int,mulsd,arith_vr_real,mulsd
      dasm_put(Dst, 3692,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3764, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1935 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVVI:
      arith_div = true;
      //|=> bc:
      //|  arith_vx BC_DIVVI,InterpArithIntR,arith_vi_int,sub,arith_vi_real,divsd
      dasm_put(Dst, 3000,  bc, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3026, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3326, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3840, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1941 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVVR:
      arith_div = true;
      //|=> bc:
      //|  arith_vx BC_DIVVR,InterpArithReralR,arith_vr_int,divsd,arith_vr_real,divsd
      dasm_put(Dst, 3916,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3988, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1947 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MODVI:
      //|=>bc:
      //|  instr_B
      //|  cmp dword [STK+ARG1F*8+4], Value::FLAG_INTEGER
      //|  jne ->ModByReal
      dasm_put(Dst, 4064, bc, Value::FLAG_INTEGER);
#line 1954 "src/interpreter/bytecode-interpreter.dasc"

      // do the division
      //|  LdInt ARG3,ARG2F
      //|.if CHECK_DIV_BY_ZERO
      //|  test ARG3,ARG3
      //|  je ->DivByZero
      //|.endif
      dasm_put(Dst, 4084, PrototypeLayout::kIntTableOffset);
#line 1961 "src/interpreter/bytecode-interpreter.dasc"

      //|  mov eax,dword [STK+ARG1F*8]
      dasm_put(Dst, 4103);
#line 1963 "src/interpreter/bytecode-interpreter.dasc"

      //|  cdq
      //|  idiv ARG3
      //|  StIntACC edx
      //|  Dispatch
      dasm_put(Dst, 2967, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1968 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* ========================================================
     * ArithVV
     *
     * The arithVV is also optimized for common path here.
     * We inline all numeric calculation cases, int/real.
     * Other cases will be pushed back to call C++ function
     * which may be extended to support meta function call
     * ========================================================*/
    //|.macro arith_vv_do_div
    //|  shr RREG,32
    //|  mov ARG3,RREGL
    //|  shr LREG,32
    //|  mov eax,LREGL
    //|.if 1
    //|  test eax,eax
    //|  je ->DivByZero
    //|.endif
    //|  cdq
    //|  idiv ARG3
    //|.endmacro

    // perform VV calaculation based on instruction
    //|.macro arith_vv,BC,instrI,setterI,instrR,setterR
    //|=> BC:
    //|  instr_E

    // check the lhs to be integer or not
    //|  mov LREG,qword [STK+ARG1F*8]
    //|  cmp LREGL,Value::FLAG_INTEGER
    //|  jne >1

    //| // int && xx
    //|  mov RREG,qword [STK+ARG2F*8]
    //|  cmp RREGL,Value::FLAG_INTEGER
    //|  jne >4
    // int && int
    //|| if( arith_div ) {
         // order matters
    //|    arith_vv_do_div
    //|    setterI eax
    //|| } else if (arith_mod) {
         // order matters
    //|    arith_vv_do_div
    //|    setterI edx
    //|| } else {
    //|    mov     LREGL,dword [STK+ARG1F*8]
    //|    instrI  LREGL,dword [STK+ARG2F*8]
    //|    setterI LREGL
    //|| }
    //|  Dispatch

    //|1:
    //|  mov RREG,qword [STK+ARG2F*8]
    //|  cmp RREGL,Value::FLAG_REAL
    //|  jnb ->InterpArithVV

    // real && xx
    //|  cmp RREGL,Value::FLAG_REAL
    //|  jb >5  // real && real
    //|  cmp RREGL,Value::FLAG_INTEGER
    //|  jne ->InterpArithVV

    // promoting RHS->real
    //|  shr RREG,32
    //|  cvtsi2sd xmm1,RREGL
    //|  movd xmm0,LREG
    //|  jmp >5


    //|4: // int && xx
    //|  cmp RREGL,Value::FLAG_REAL
    //|  jnb ->InterpArithVV
    // promoting LHS->real
    //|  shr LREG,32
    //|  cvtsi2sd xmm0,LREGL
    //|  movd xmm1,RREG

    // real && real
    //|5:
    //|| if( arith_mod ) {
    //|    jmp ->ModByReal
    //|| } else {
    //|    instrR  xmm0,xmm1
    //|    setterR xmm0
    //|| }
    //|  Dispatch

    //|.endmacro

    case BC_ADDVV:
      //|  arith_vv BC_ADDVV,add,StIntACC,addsd,StRealACC
      dasm_put(Dst, 4108,  BC_ADDVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 4140, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 4184, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 4228, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4254, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 4350);
       } else {
      dasm_put(Dst, 4355);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2061 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_SUBVV:
      //|  arith_vv BC_SUBVV,sub,StIntACC,subsd,StRealACC
      dasm_put(Dst, 4108,  BC_SUBVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 4140, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 4184, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 4372, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4254, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 4350);
       } else {
      dasm_put(Dst, 4398);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2064 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_MULVV:
      //|  arith_vv BC_MULVV,imul,StIntACC,mulsd,StRealACC
      dasm_put(Dst, 4108,  BC_MULVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 4140, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 4184, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 4415, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4254, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 4350);
       } else {
      dasm_put(Dst, 4442);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2067 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_DIVVV:
      arith_div = true;
      //|  arith_vv BC_DIVVV,imul,StIntACC,divsd,StRealACC
      dasm_put(Dst, 4108,  BC_DIVVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 4140, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 4184, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 4415, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4254, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 4350);
       } else {
      dasm_put(Dst, 4459);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2071 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_MODVV:
      arith_mod = true;
      //|  arith_vv BC_MODVV,imul,StIntACC,divsd,StRealACC
      dasm_put(Dst, 4108,  BC_MODVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 4140, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 4184, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 4415, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4254, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 4350);
       } else {
      dasm_put(Dst, 4459);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2075 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* ==============================================================
     * POW part
     *
     * Currently we directly use std::pow/pow in libc for simplicity.
     * For numeric type we will directly call pow for other types
     * we will fallback to slow C++ function
     * =============================================================*/

    //|.macro call_pow
    //|  fcall pow
    //|  movsd qword [ACC], xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_pow,REGL,XREG,ARG,slow_pow
    //|  mov REGL,dword [STK+ARG*8+4]
    //|  cmp REGL,Value::FLAG_REAL
    //|  jnb >2
    //|  movsd XREG,qword [STK+ARG*8]
    //|  call_pow
    //|2:
    //|  cmp REGL,Value::FLAG_INTEGER
    //|  jne ->slow_pow
    //|  cvtsi2sd XREG,dword [STK+ARG*8]
    //|  call_pow
    //|.endmacro

    case BC_POWIV:
      //|=> bc:
      //|  instr_C
      //|  LdInt2Real,xmm0,ARG1F
      //|  arith_pow RREGL,xmm1,ARG2F,InterpPowSlowIV
      dasm_put(Dst, 4476,  bc, PrototypeLayout::kIntTableOffset, Value::FLAG_REAL);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4525, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2109 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWVI:
      //|=> bc:
      //|  instr_B
      //|  LdInt2Real,xmm1,ARG2F
      //|  arith_pow LREGL,xmm0,ARG1F,InterpPowSlowVI
      dasm_put(Dst, 4562,  bc, PrototypeLayout::kIntTableOffset, Value::FLAG_REAL);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4606, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2116 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWRV:
      //|=> bc:
      //|  instr_C
      //|  LdReal xmm0,ARG1F
      //|  arith_pow RREGL,xmm1,ARG2F,InterpPowSlowRV
      dasm_put(Dst, 4643,  bc, PrototypeLayout::kRealTableOffset, Value::FLAG_REAL);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4687, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2123 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWVR:
      //|=> bc:
      //|  instr_B
      //|  LdReal xmm1,ARG2F
      //|  arith_pow LREGL,xmm0,ARG1F,InterpPowSlowVR
      dasm_put(Dst, 4724,  bc, PrototypeLayout::kRealTableOffset, Value::FLAG_REAL);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4768, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(pow))) {
      dasm_put(Dst, 4520);
       } else {
         lava_warn("%s","Function pow address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(pow))>>32));
       }
      dasm_put(Dst, 2015);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2130 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWVV:
      //|=> bc:
      //|  instr_C
      //|  jmp ->InterpPowSlowVV
      dasm_put(Dst, 4805,  bc);
#line 2136 "src/interpreter/bytecode-interpreter.dasc"
      break;


    /* ====================================================================
     * Comparison
     *
     * Inline numeric comparison and also do promotion inline
     * ===================================================================*/

    // Helper comparison routine using cmov instruction. Due to the fact we
    // cannot directly store our result back to the memory so it may not be
    // very optimal to use cmov since a jcc instruction will execute less
    // instruction although it has a branch , need to profile
    //|.macro comp_cmp_real,instr
    //|  mov ARG1, Value::FLAG_FALSE
    //|  mov ARG2, Value::FLAG_TRUE
    //|  ucomisd xmm0,xmm1
    //|  instr ARG1, ARG2
    //|  mov dword [STK+ACCFIDX], ARG1
    //|.endmacro

    //|.macro comp_cmp_int,instr
    //|  mov ARG1, Value::FLAG_FALSE
    //|  mov ARG2, Value::FLAG_TRUE
    //|  cmp LREGL,RREGL
    //|  instr ARG1, ARG2
    //|  mov dword [STK+ACCFIDX], ARG1
    //|.endmacro

    /* --------------------------------------------------------------------
     * Comparison XV                                                      |
     * -------------------------------------------------------------------*/
    //|.macro comp_xv,BC,slow_path,iv_real,iv_real_cmov,iv_real_jmp,iv_int,iv_int_cmov,iv_int_jmp
    //|  instr_C
    //|  mov RREG, qword[STK+ARG2F*8]
    //|.if CHECK_NUMBER_MEMORY
    //|  mov ARG3, dword[STK+ARG2F*8+4]
    //|.else
    //|  mov ARG3F,RREG
    //|  shr ARG3F,32
    //|.endif
    //|  cmp ARG3, Value::FLAG_INTEGER
    //|  jne >2
    //|  iv_int iv_int_cmov,iv_int_jmp
    //|2:
    //|  cmp ARG3, Value::FLAG_REAL
    //|  jnb ->slow_path
    //|  iv_real iv_real_cmov,iv_real_jmp
    //|.endmacro

    // real/int part for iv/rv
    //|.macro comp_iv_real,instr,false_jmp
    //|  LdInt2Real xmm0,ARG1F
    //|  movd xmm1,RREG

    //|.if USE_CMOV_COMP
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    //|.macro comp_iv_int,instr,false_jmp
    //|  LdInt LREGL,ARG1F

    //|.if USE_CMOV_COMP
    //|  comp_cmp_int,instr
    //|  Dispatch
    //|.else
    //|  cmp LREGL,RREGL
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    //|.macro comp_rv_real,instr,false_jmp
    //|  LdReal xmm0,ARG1F
    //|  movd xmm1,RREG

    //|.if USE_CMOV_COMP
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    //|.macro comp_rv_int,instr,false_jmp
    //|  LdReal xmm0,ARG1F
    //|  cvtsi2sd xmm1,RREGL

    //|.if USE_CMOV_COMP
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    case BC_LTIV:
      //|=> bc:
      //|  comp_xv BC_LTIV,InterpDoCompareIV,comp_iv_real,cmovb,jae,comp_iv_int,cmovl,jge
      dasm_put(Dst, 4818,  bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 4883, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2265 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LTRV:
      //|=>bc:
      //|  comp_xv BC_LTRV,InterpDoCompareRV,comp_rv_real,cmovb,jae,comp_rv_int,cmovb,jae
      dasm_put(Dst, 4962, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5037, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2269 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEIV:
      //|=> bc:
      //|  comp_xv BC_LEIV,InterpDoCompareIV,comp_iv_real,cmovbe,ja,comp_iv_int,cmovle,jg
      dasm_put(Dst, 5116,  bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5181, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2273 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LERV:
      //|=> bc:
      //|  comp_xv BC_LERV,InterpDoCompareRV,comp_rv_real,cmovbe,ja,comp_rv_int,cmovbe,ja
      dasm_put(Dst, 5260,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5335, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2277 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTIV:
      //|=> bc:
      //|  comp_xv BC_GTIV,InterpDoCompareIV,comp_iv_real,cmova,jbe,comp_iv_int,cmovg,jle
      dasm_put(Dst, 5414,  bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5479, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2281 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTRV:
      //|=>bc:
      //|  comp_xv BC_GTRV,InterpDoCompareRV,comp_rv_real,cmova,jbe,comp_rv_int,cmova,jbe
      dasm_put(Dst, 5558, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5633, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2285 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEIV:
      //|=> bc:
      //|  comp_xv BC_GEIV,InterpDoCompareIV,comp_iv_real,cmovae,jb,comp_iv_int,cmovge,jl
      dasm_put(Dst, 5712,  bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5777, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2289 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GERV:
      //|=> bc:
      //|  comp_xv BC_GERV,InterpDoCompareRV,comp_rv_real,cmovae,jb,comp_rv_int,cmovae,jb
      dasm_put(Dst, 5856,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 5931, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2293 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQIV:
      //|=> bc:
      //|  comp_xv BC_EQIV,InterpDoCompareIV,comp_iv_real,cmove,jne,comp_iv_int,cmove,jne
      dasm_put(Dst, 6010,  bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6075, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2297 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQRV:
      //|=> bc:
      //|  comp_xv BC_EQRV,InterpDoCompareRV,comp_rv_real,cmove,jne,comp_rv_int,cmove,jne
      dasm_put(Dst, 6154,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6229, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2301 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEIV:
      //|=> bc:
      //|  comp_xv BC_NEIV,InterpDoCompareIV,comp_iv_real,cmovne,je,comp_iv_int,cmovne,je
      dasm_put(Dst, 6308,  bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6373, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2305 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NERV:
      //|=> bc:
      //|  comp_xv BC_NERV,InterpDoCompareRV,comp_rv_real,cmovne,je,comp_rv_int,cmovne,je
      dasm_put(Dst, 6452,  bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6527, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2309 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* --------------------------------------------------------------------
     * Comparison VX                                                      |
     * -------------------------------------------------------------------*/
    //|.macro comp_vx,BC,slow_path,vi_real,vi_real_cmov,vi_real_jmp,vi_int,vi_int_cmov,vi_int_jmp
    //|  instr_B
    //|  mov LREG,qword [STK+ARG1F*8]

    //|.if CHECK_NUMBER_MEMORY
    //|  mov ARG3, dword [STK+ARG1F*8+4]
    //|.else
    //|  mov ARG3F, RREG
    //|  shr ARG3F, 32
    //|.endif

    //|  cmp ARG3, Value::FLAG_INTEGER
    //|  jne >2
    //|  vi_int vi_int_cmov,vi_int_jmp
    //|2:
    //|  cmp ARG3, Value::FLAG_REAL
    //|  jnb ->slow_path
    //|  vi_real vi_real_cmov,vi_real_jmp

    //|.endmacro

    // real/int part for iv/rv
    //|.macro comp_vi_real,instr,false_jmp
    //|  LdInt2Real xmm1,ARG2F
    //|  movd xmm0,LREG

    //|.if USE_CMOV_COMP
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    //|.macro comp_vi_int,instr,false_jmp
    //|  LdInt RREGL,ARG2F

    //|.if USE_CMOV_COMP
    //|  comp_cmp_int,instr
    //|  Dispatch
    //|.else
    //|  cmp LREGL,RREGL
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFDIX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    //|.macro comp_vr_real,instr,false_jmp
    //|  LdReal xmm1,ARG2F
    //|  movsd xmm0, qword [STK+ARG1F*8]

    //|.if USE_CMOV_COMP
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    //|.macro comp_vr_int,instr,false_jmp
    //|  LdReal xmm1,ARG2F
    //|  cvtsi2sd xmm0,dword [STK+ARG1F*8]

    //|.if USE_CMOV_COMP
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    case BC_LTVI:
      //|=>bc:
      //|  comp_vx BC_LTVI,InterpDoCompareVI,comp_vi_real,cmovb,jae,comp_vi_int,cmovl,jge
      dasm_put(Dst, 6606, bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6671, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2414 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LTVR:
      //|=>bc:
      //|  comp_vx BC_LTVR,InterpDoCompareVR,comp_vr_real,cmovb,jae,comp_vr_int,cmovb,jae
      dasm_put(Dst, 6750, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6827, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2418 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVI:
      //|=>bc:
      //|  comp_vx BC_LEVI,InterpDoCompareVI,comp_vi_real,cmovbe,ja,comp_vi_int,cmovle,jg
      dasm_put(Dst, 6908, bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 6973, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2422 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVR:
      //|=>bc:
      //|  comp_vx BC_LEVR,InterpDoCompareVR,comp_vr_real,cmovbe,ja,comp_vr_int,cmovbe,ja
      dasm_put(Dst, 7052, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 7129, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2426 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVI:
      //|=>bc:
      //|  comp_vx BC_GTVI,InterpDoCompareVI,comp_vi_real,cmova,jbe,comp_vi_int,cmovg,jle
      dasm_put(Dst, 7210, bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 7275, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2430 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVR:
      //|=>bc:
      //|  comp_vx BC_GTVR,InterpDoCompareVR,comp_vr_real,cmova,jbe,comp_vr_int,cmova,jbe
      dasm_put(Dst, 7354, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 7431, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2434 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVI:
      //|=>bc:
      //|  comp_vx BC_GEVI,InterpDoCompareVI,comp_vi_real,cmovae,jb,comp_vi_int,cmovge,jl
      dasm_put(Dst, 7512, bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 7577, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2438 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVR:
      //|=>bc:
      //|  comp_vx BC_GEVR,InterpDoCompareVR,comp_vr_real,cmovae,jb,comp_vr_int,cmovae,jb
      dasm_put(Dst, 7656, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 7733, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2442 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVI:
      //|=>bc:
      //|  comp_vx BC_EQVI,InterpDoCompareVI,comp_vi_real,cmove,jne,comp_vi_int,cmove,jne
      dasm_put(Dst, 7814, bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 7879, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2446 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVR:
      //|=>bc:
      //|  comp_vx BC_EQVR,InterpDoCompareVR,comp_vr_real,cmove,jne,comp_vr_int,cmove,jne
      dasm_put(Dst, 7958, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8035, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2450 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVI:
      //|=>bc:
      //|  comp_vx BC_NEVI,InterpDoCompareVI,comp_vi_real,cmovne,je,comp_vi_int,cmovne,je
      dasm_put(Dst, 8116, bc, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8181, Value::FLAG_REAL, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2454 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVR:
      //|=>bc:
      //|  comp_vx BC_NEVR,InterpDoCompareVR,comp_vr_real,cmovne,je,comp_vr_int,cmovne,je
      dasm_put(Dst, 8260, bc, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8337, Value::FLAG_REAL, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2458 "src/interpreter/bytecode-interpreter.dasc"
      break;


    /* --------------------------------------------------------
     * comparison VV
     *
     * We do inline type promotion and comparison for all
     * numeric type
     * --------------------------------------------------------*/
    //|.macro comp_vv_pre,BC,instr_int,jmp_int,instr_real,jmp_real
    //|  instr_E

    //|  mov LREG, qword [STK+ARG1F*8]
    //|  cmp LREGL, Value::FLAG_INTEGER
    //|  jne >1 // int && xx

    //|  mov RREG, qword [STK+ARG2F*8]
    //|  cmp RREGL, Value::FLAG_INTEGER
    //|  jne >2 // int && xx

    //|.if USE_CMOV_COMP
    //|  shr LREG,32
    //|  shr RREG,32
    //|  mov ARG1, Value::FLAG_TRUE
    //|  mov ARG2, Value::FLAG_FALSE
    //|  cmp LREGL,RREGL
    //|  instr_int ARG1,ARG2
    //|  mov dword [STK+ACCFIDX], ARG1
    //|  Dispatch
    //|.else
    //|  shr LREG,32
    //|  cmp LREGL, dword [STK+ARG2F*8]
    //|  jmp_int >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|1:
    //|  mov RREG, qword [STK+ARG2F*8]
    //|  cmp LREGL, Value::FLAG_REAL
    //|  jnb ->InterpCompareVV

    //  real && xx
    //|  cmp RREGL, Value::FLAG_REAL
    //|  jb >3
    //|  cmp RREGL, Value::FLAG_INTEGER
    //|  jne ->InterpCompareVV
    // promotion real && int
    //|  movd xmm0,LREG
    //|  shr RREG,32
    //|  cvtsi2sd xmm1,RREGL
    //|  jmp >3

    //|2:
    //|  cmp RREGL, Value::FLAG_REAL
    //|  jnb ->InterpCompareVV
    // promotion int && real
    //|  shr LREG,32
    //|  cvtsi2sd xmm0,LREGL
    //|  movd xmm1, RREGL

    //|3: // real && real
    //|.if USE_CMOV_COMP
    //|  mov ARG1, Value::FLAG_TRUE
    //|  mov ARG2, Value::FLAG_FALSE
    //|  ucomisd xmm0,xmm1
    //|  instr_real ARG1,ARG2
    //|  mov dword [STK+ACCFIDX], ARG1
    //|  Dispatch
    //|.else
    //|  ucomisd xmm0,xmm1
    //|  jmp_real >8
    //|  mov dword [STK+ACCFIDX], Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX], Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|.endmacro

    case BC_LTVV:
      //|=>bc:
      //|  comp_vv_pre,BC_LTVV,cmovl,jge,cmovb,jae
      dasm_put(Dst, 8418, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8487, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2545 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVV:
      //|=>bc:
      //|  comp_vv_pre,BC_LEVV,cmovle,jg,cmovbe,ja
      dasm_put(Dst, 8611, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8680, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2549 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVV:
      //|=>bc:
      //|  comp_vv_pre,BC_GTVV,cmovg,jle,cmova,jbe
      dasm_put(Dst, 8804, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8873, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2553 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVV:
      //|=>bc:
      //|  comp_vv_pre,BC_GEVV,cmovge,jl,cmovae,jb
      dasm_put(Dst, 8997, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9066, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2557 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVV:
      //|=>bc:
      //|  comp_vv_pre,BC_EQVV,cmove,jne,cmove,jne
      dasm_put(Dst, 9190, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9259, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2561 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVV:
      //|=>bc:
      //|  comp_vv_pre,BC_NEVV,cmovne,je,cmovne,je
      dasm_put(Dst, 9383, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9452, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2565 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* ------------------------------------------------------------
     * Comparison SV/VS
     *
     * For this sort of cases, we don't inline anything for none EQ/NE
     * comparison but just call the function to perform the comparison
     * -----------------------------------------------------------*/
    case BC_LTSV:
      //|=> bc:
      //|  jmp ->InterpCompareSV
      dasm_put(Dst, 9576,  bc);
#line 2576 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LTVS:
      //|=> bc:
      //|  jmp ->InterpCompareVS
      dasm_put(Dst, 9582,  bc);
#line 2580 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LESV:
      //|=> bc:
      //|  jmp ->InterpCompareSV
      dasm_put(Dst, 9576,  bc);
#line 2584 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVS:
      //|=> bc:
      //|  jmp ->InterpCompareVS
      dasm_put(Dst, 9582,  bc);
#line 2588 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTSV:
      //|=> bc:
      //|  jmp ->InterpCompareSV
      dasm_put(Dst, 9576,  bc);
#line 2592 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVS:
      //|=> bc:
      //|  jmp ->InterpCompareVS
      dasm_put(Dst, 9582,  bc);
#line 2596 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GESV:
      //|=> bc:
      //|  jmp ->InterpCompareSV
      dasm_put(Dst, 9576,  bc);
#line 2600 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVS:
      //|=> bc:
      //|  jmp ->InterpCompareVS
      dasm_put(Dst, 9582,  bc);
#line 2604 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // For string equality comparison , we inline SSO comparison since
    // they are just checking the address are equal or not
    //|.macro comp_sv,BC,SlowPath,instr,false_jmp
    //|  instr_B
    //|  LdStr LREG,ARG1F
    //|  mov RREG  ,qword [STK+ARG2F*8]
    //|  CheckSSO LREG,1
    //|  CheckSSOV RREG,1

    //|.if USE_CMOV_COMP
    //|  mov T1L, Value::FLAG_FALSE
    //|  mov T2L, Value::FLAG_TRUE
    //|  test LREG,RREG
    //|  instr T1L,T2L
    //|  mov dword [STK+ACCFIDX],T1L
    //|  Dispatch
    //|.else
    //|  test LREG,RREG
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX],Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX],Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|1:
    //|  jmp ->SlowPath
    //|.endmacro

    //|.macro comp_vs,BC,SlowPath,instr,false_jmp
    //|  instr_C
    //|  mov LREG, qword [STK+ARG1F*8]
    //|  LdStr RREG,ARG2F
    //|  CheckSSOV LREG,1
    //|  CheckSSO  RREG,1

    //|.if USE_CMOV_COMP
    //|  mov T1L, Value::FLAG_FALSE
    //|  mov T2L, Value::FLAG_TRUE
    //|  test LREG,RREG
    //|  instr T1L,T2L
    //|  mov dword [STK+ACCFIDX],T1L
    //|  Dispatch
    //|.else
    //|  test LREG,RREG
    //|  false_jmp >8
    //|  mov dword [STK+ACCFIDX],Value::FLAG_TRUE
    //|  Dispatch
    //|8:
    //|  mov dword [STK+ACCFIDX],Value::FLAG_FALSE
    //|  Dispatch
    //|.endif

    //|1:
    //|  jmp ->SlowPath
    //|.endmacro

    case BC_EQSV:
      //|=> bc:
      //|  comp_sv BC_EQSV,InterpCompareSV,cmove,jne
      dasm_put(Dst, 9588,  bc, PrototypeLayout::kStringTableOffset, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, Value::FLAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9694);
#line 2667 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVS:
      //|=> bc:
      //|  comp_vs BC_EQVS,InterpCompareVS,cmove,jne
      dasm_put(Dst, 9720,  bc, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9827);
#line 2671 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NESV:
      //|=>bc:
      //|  comp_sv BC_NESV,InterpCompareSV,cmovne,je
      dasm_put(Dst, 9853, bc, PrototypeLayout::kStringTableOffset, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, Value::FLAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9694);
#line 2675 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVS:
      //|=>bc:
      //|  comp_vs BC_NEVS,InterpCompareVS,cmovne,je
      dasm_put(Dst, 9959, bc, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9827);
#line 2679 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* -------------------------------------------------
     * Unary                                           |
     * ------------------------------------------------*/

    // inline integers and reals inlined to be processed
    // and other types are throwed away to the slower
    // functions to help since we may need to support meta
    // function in the future
    case BC_NEGATE:
      //|=> bc:
      //|  instr_F
      //|  mov LREG, qword [STK+ARG1F*8]
      //|  CheckNum ARG1,LREG,1,2
      //|  jmp ->InterpNegate
      dasm_put(Dst, 10066,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER);
#line 2695 "src/interpreter/bytecode-interpreter.dasc"

      // real
      //|1:
      //|  movd xmm0,LREG
      //|  LdRConst_sign xmm1
      //|  xorpd xmm0, xmm1
      //|  movsd qword [STK+ARG1F*8], xmm0
      //|  Dispatch
      dasm_put(Dst, 10101, (unsigned int)((static_cast<std::uint64_t>(0x80000000)<<32)), (unsigned int)(((static_cast<std::uint64_t>(0x80000000)<<32))>>32));
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2703 "src/interpreter/bytecode-interpreter.dasc"

      // int
      //|2:
      //|  neg dword [STK+ARG1F*8]
      dasm_put(Dst, 10139);
#line 2707 "src/interpreter/bytecode-interpreter.dasc"
      // TODO:: overflow handling ??
      //|  Dispatch
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2709 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_NOT:
      //|=> bc:
      //|  instr_F
      //|  mov RREGL, dword [STK+ARG1F*8+4]
      dasm_put(Dst, 10147,  bc);
#line 2715 "src/interpreter/bytecode-interpreter.dasc"

      // Put true at very first since most of the test should go to boolean
      // and most of the function returns true to indicate success (which is common)
      // and false indicate failure (which should be rare)
      //|  cmp RREGL, Value::FLAG_TRUE;    jne >1
      dasm_put(Dst, 10157, Value::FLAG_TRUE);
#line 2720 "src/interpreter/bytecode-interpreter.dasc"
      // TRUE
      //|  mov dword [STK+ARG1F*8+4], Value::FLAG_FALSE
      //|  Dispatch
      dasm_put(Dst, 1582, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2723 "src/interpreter/bytecode-interpreter.dasc"

      //|1:
      //|  cmp RREGL, Value::FLAG_FALSE;   jne >2
      dasm_put(Dst, 10166, Value::FLAG_FALSE);
#line 2726 "src/interpreter/bytecode-interpreter.dasc"

      // FALSE
      //|  mov dword [STK+ARG1F*8+4], Value::FLAG_TRUE
      //|  Dispatch
      dasm_put(Dst, 1582, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2730 "src/interpreter/bytecode-interpreter.dasc"

      //|2:
      //|  cmp RREGL, Value::FLAG_INTEGER; jne >3
      dasm_put(Dst, 10177, Value::FLAG_INTEGER);
#line 2733 "src/interpreter/bytecode-interpreter.dasc"

      // INTEGER
      //|  mov LREGL, dword [STK+ARG1F*8]
      //|.if USE_CMOV_NEG
      //|  mov T1L, Value::FLAG_FALSE
      //|  mov T2L, Value::FLAG_TRUE
      //|  test LREGL,LREGL
      //|  cmove T1L, T2L
      //|  mov dword [STK+ARG1F*8+4], T1L
      //|  Dispatch
      dasm_put(Dst, 10188, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 2743 "src/interpreter/bytecode-interpreter.dasc"
      //|.else
      //|  test LREGL, LREGL
      //|  je >7
      //|  mov dword [STK+ARG1F*8+4], Value::FLAG_FALSE
      //|  Dispatch
      //|7:
      //|  mov dword [STK+ARG1F*8+4], Value::FLAG_TRUE
      //|  Dispatch
      //|.endif
      dasm_put(Dst, 112);
#line 2752 "src/interpreter/bytecode-interpreter.dasc"

      //|3:
      //|  cmp RREGL, Value::FLAG_REAL;    jnb >4
      //|  movsd xmm0, qword [STK+ARG1F*8]
      dasm_put(Dst, 10221, Value::FLAG_REAL);
#line 2756 "src/interpreter/bytecode-interpreter.dasc"
      // REAL
      //|.if USE_CMOV_NEG
      //|  pxor xmm1,xmm1
      //|  mov T1L, Value::FLAG_FALSE
      //|  mov T2L, Value::FLAG_TRUE
      //|  ucomisd xmm0,xmm1
      //|  cmove T1L,T2L
      //|  mov dword [STK+ARG1F*8+4],T1L
      //|  Dispatch
      dasm_put(Dst, 10239, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 2765 "src/interpreter/bytecode-interpreter.dasc"
      //|.else
      //|  pxor xmm1,xmm1
      //|  ucomisd xmm0,xmm1
      //|  je >7
      //|  mov dword [STK+ARG1F*8+4],Value::FLAG_FALSE
      //|  Dispatch
      //|7:
      //|  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
      //|  Dispatch
      //|.endif
      //|4:
      //|  cmp RREGL, Value::FLAG_NULL;    jne ->InterpNot
      dasm_put(Dst, 10274, Value::FLAG_NULL);
#line 2777 "src/interpreter/bytecode-interpreter.dasc"
      // NULL
      //|  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
      //|  Dispatch
      dasm_put(Dst, 1582, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2780 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // ------------------------------------------------
    // Branch                                         |
    // -----------------------------------------------*/

    // branch PC
    //|.macro branch_to,where,TEMP
    //|  mov TEMP,qword SAVED_PC
    //|  lea PC,[TEMP+where*4]
    //|.endmacro

    // jump macro -------------------------------------------------
    // inline int/real/true/false/null here to perform the jump
    // rest of the type goes to slow path to *convert* to boolean
    //
    // assume T1 holds the flag; REG holds the actual Value;REGL holds
    // the lower 32 bits
    //|.macro do_cond_jmp,SlowPath,REG,REGL,tflag,fflag,last_jmp

    //|  cmp T1L, Value::FLAG_TRUE ;    je >tflag
    //|  cmp T1L, Value::FLAG_FALSE;    je >fflag
    //|  cmp T1L, Value::FLAG_NULL ;    je >fflag
    //|  cmp T1L, Value::FLAG_INTEGER;  je >7
    //|  cmp T1L, Value::FLAG_REAL;     jb >8
    //|  jmp ->SlowPath

    //|7:  // int
    //|  test REGL,REGL
    //|  je >fflag
    //|  jmp >tflag

    //|8:  // real
    //|  pxor xmm1,xmm1
    //|  movd xmm0,REG
    //|  ucomisd xmm0,xmm1
    //|  last_jmp
    //|.endmacro


    case BC_JMPT:
      //|=>bc:
      //|  instr_B
      //|  mov LREG,qword [STK+ARG1F*8]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpJmpT,LREG,LREGL,1,2, je >2
      dasm_put(Dst, 10304, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2827 "src/interpreter/bytecode-interpreter.dasc"
      //|1:  // true branch
      //|  branch_to ARG2F,ARG3F
      //|2:  // false branch
      //|  Dispatch
      dasm_put(Dst, 10384);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2831 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_JMPF:
      //|=>bc:
      //|  instr_B
      //|  mov LREG,qword [STK+ARG1F*8]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpJmpF,LREG,LREGL,2,1, jne >2
      dasm_put(Dst, 10431, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2840 "src/interpreter/bytecode-interpreter.dasc"
      //|1: // false condition
      //|  branch_to ARG2F,ARG3F
      //|2: // true condition
      //|  Dispatch
      dasm_put(Dst, 10511);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2844 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_AND:
      //|=>bc:
      //|  instr_G
      //|  mov LREG,qword [ACC]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpAnd,LREG,LREGL,2,1, jne >2
      dasm_put(Dst, 10558, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2853 "src/interpreter/bytecode-interpreter.dasc"
      //|1: // false condition
      //|  branch_to ARG1F,ARG3F
      //|2: // true condition
      //|  Dispatch
      dasm_put(Dst, 10639);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2857 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_OR:
      //|=>bc:
      //|  instr_G
      //|  mov LREG,qword [ACC]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpOr,LREG,LREGL,1,2, je >2
      dasm_put(Dst, 10686, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2866 "src/interpreter/bytecode-interpreter.dasc"
      //|1:  // true condition
      //|  branch_to ARG1F,ARG3F
      //|2:
      //|  Dispatch
      dasm_put(Dst, 10767);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2870 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_JMP:
      //|=>bc:
      //|  instr_G
      //|  branch_to ARG1F,ARG3F
      //|  Dispatch
      dasm_put(Dst, 10814, bc);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2877 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // ----------------------------------------------------------
    // Property/Upvalue/Global
    // ---------------------------------------------------------*/
    static_assert( sizeof(Map::Entry) == 24 );

    // A better way to implement property get/set is via IC (inline cache)
    // but currently we don't have IC states at bytecode level and we will
    // add it guide the JIT compilation phase. For interpreter, we will use
    // something simpler but good to capture most of the cases. Since we force
    // our internal hash use SSO's default hash value to serve as hash value
    // of the key, so we will use a trick that is used in LuaJIT here. For
    // key that is SSO, we will retrieve its hash value out and directly generate
    // index to anchor its main position inside of the *chain* and if we miss
    // we will fallback to the slow path

    // LREG --> Object*
    // RREG --> SSO*
    //|.macro find_sso_pos,output
    //|  mov T2,LREG

    //|| if(MapLayout::kCapacityOffset) {
    //|    mov T2L, dword [T2+MapLayout::kCapacityOffset]
    //|| } else {
    //|    mov T2L, dword [T2]
    //|| }

    //|| if(SSOLayout::kHashOffset) {
    //|    mov T1L, dword [RREG+SSOLayout::kHashOffset]
    //|| } else {
    //|    mov T1L, dword [RREG]
    //|| }

    // T2L capacity , T1L size
    //|  sub T2L,1

    // T1L -> index
    //|  and T1L,T2L

    // index into the array
    //|  lea T2L, [LREG+(MapLayout::kArrayOffset)]
    //|  lea T1L, [T1L+T1L*2]
    //|  lea T2L, [T2L+T1L*8]

    // save map's starting address
    //|  lea T1 , [LREG+MapLayout::kArrayOffset]

    // 1. check if this entry is *deleted* or *used*
    //|  mov LREGL, dword [T2L+MapEntryLayout::kFlagOffset]
    //|  test LREGL,((1<<30))
    //|  je >7  // not found main position is empty

    //|1:
    // 2. check if it is deleted
    //|  test LREGL,((1<<31))
    //|  jne >6 // deleted slots

    // 3. check if the key is a SSO
    //|  mov LREG, qword [T2L]
    //|  CheckSSO LREG,6
    //|  mov LREG, qword [LREG]
    //|  cmp LREG, RREG
    //|  jne >6 // string not identical

    // now we find the entry
    //|  mov T2,qword [T2L+MapEntryLayout::kValueOffset]
    //|  mov qword [STK+output*8], T2
    //|  Dispatch

    // move to next iteration
    //|6:
    //|  mov LREGL, dword [T2L+MapEntryLayout::kFlagOffset]
    //|  test LREGL,((1<<29))
    //|  je >7
    //|  and LREGL, ((bits::BitOn<std::uint32_t,0,29>::value))
    //|  lea T2L  , [LREGL+LREGL*2]
    //|  lea T2L  , [T1+T2L*8]
    //|  mov LREGL, dword [T2L*8+MapEntryLayout::kFlagOffset]
    //|  jmp <1

    //|7:
    //|  jmp ->InterpPropGetNotFound

    //|.endmacro

    case BC_PROPGET:
      //|=>bc:
      //|  instr_B
      dasm_put(Dst, 10838, bc);
#line 2966 "src/interpreter/bytecode-interpreter.dasc"

      //|.if 1
      //|  cmp word [STK+ARG1F*8+6],Value::FLAG_HEAP
      //|  jne >8
      //|  mov LREG, qword [STK+ARG1F*8]
      //|  CheckObj LREG,9
      //|.else
      //|  mov LREG, qword [STK+ARG1F*8]
      //|  CheckObjV LREG,9
      //|.endif
      dasm_put(Dst, 10847, Value::FLAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+6), OBJECT_BIT_PATTERN);
#line 2976 "src/interpreter/bytecode-interpreter.dasc"

      //|  LdStr RREG,ARG2F
      dasm_put(Dst, 693, PrototypeLayout::kStringTableOffset);
#line 2978 "src/interpreter/bytecode-interpreter.dasc"
      // assume RREG is an heap object since this should be guaranteed
      // by front-end
      //|  DerefPtrFromV RREG
      //|  CheckSSO RREG,8
      dasm_put(Dst, 10880, -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN);
#line 2982 "src/interpreter/bytecode-interpreter.dasc"

      // find sso's position
      //|  find_sso_pos ACCIDX
      dasm_put(Dst, 10900);
       if(MapLayout::kCapacityOffset) {
      dasm_put(Dst, 10905, MapLayout::kCapacityOffset);
       } else {
      dasm_put(Dst, 10910);
       }
       if(SSOLayout::kHashOffset) {
      dasm_put(Dst, 10914, SSOLayout::kHashOffset);
       } else {
      dasm_put(Dst, 10919);
       }
      dasm_put(Dst, 10923, (MapLayout::kArrayOffset), MapLayout::kArrayOffset, MapEntryLayout::kFlagOffset, ((1<<30)), ((1<<31)), -(HeapObjectHeader::kHeapObjectHeaderSize+6), SSO_BIT_PATTERN, MapEntryLayout::kValueOffset, 2040*8);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 11015, MapEntryLayout::kFlagOffset, ((1<<29)), ((bits::BitOn<std::uint32_t,0,29>::value)), MapEntryLayout::kFlagOffset);
#line 2985 "src/interpreter/bytecode-interpreter.dasc"

      //|8: // should be done by slow path of InterpPorpGet
      //|  jmp ->InterpPropGet
      dasm_put(Dst, 11075);
#line 2988 "src/interpreter/bytecode-interpreter.dasc"

      //|9: // failed at *object*
      //|  jmp ->InterpPropGetNotObject
      dasm_put(Dst, 11082);
#line 2991 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_PROPSET:
      // propset is directly yielded back to C++ functions
      //|=>bc:
      //|  jmp ->InterpPropSet
      dasm_put(Dst, 11089, bc);
#line 2997 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_IDXGET:
      //|=>bc:
      //|  jmp ->InterpIdxGet
      dasm_put(Dst, 11095, bc);
#line 3002 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_IDXSET:
      //|=>bc:
      //|  jmp ->InterpIdxSet
      dasm_put(Dst, 11101, bc);
#line 3006 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // IDXGETI means using integer index to fetch a value from object
    // we will optimize cases that the object is an List. Basically
    // inline the memory access right inside of the assembly code. For
    // rest of the cases, we yield back to C++ functions to take care of
    case BC_IDXGETI:
      //|=>bc:
      //|  instr_B
      dasm_put(Dst, 10838, bc);
#line 3015 "src/interpreter/bytecode-interpreter.dasc"

      // check if object is a list
      //|.if 1
      //|  cmp word [STK+ARG1F*8+6],Value::FLAG_HEAP
      //|  jne >9
      //|  mov LREG,qword [STK+ARG1F*8]
      //|  CheckList LREG,9
      //|.else
      //|  mov LREG,qword [STK+ARG1F*8]
      //|  CheckListV LREG,9
      //|.endif
      dasm_put(Dst, 11107, Value::FLAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+6), LIST_BIT_PATTERN);
#line 3026 "src/interpreter/bytecode-interpreter.dasc"

      // load the integer into RREGL
      //|  LdInt RREGL,ARG2F
      dasm_put(Dst, 1411, PrototypeLayout::kIntTableOffset);
#line 3029 "src/interpreter/bytecode-interpreter.dasc"

      // check if index out of boundary
      //|  mov T1L, dword [LREG+ListLayout::kSizeOffset]
      //|  cmp T1L, RREGL
      //|  jnb >8 // index outof boundary
      dasm_put(Dst, 11140, ListLayout::kSizeOffset);
#line 3034 "src/interpreter/bytecode-interpreter.dasc"

      // check if T1L is negative value since we don't
      // handle the negative value right here
      //|  test T1L,T1L
      //|  js >9
      dasm_put(Dst, 11152);
#line 3039 "src/interpreter/bytecode-interpreter.dasc"

      // get the Slice object out of List
      //|  mov LREG, qword [LREG+ListLayout::kSliceOffset]
      //|  mov LREG, qword [LREG]  // Slice*
      dasm_put(Dst, 11160, ListLayout::kSliceOffset);
#line 3043 "src/interpreter/bytecode-interpreter.dasc"

      // grab the element out of the array
      //|  mov LREG, qword [LREG+LREG*8+SliceLayout::kArrayOffset]
      //|  mov qword [ACC], LREG
      //|  Dispatch
      dasm_put(Dst, 11168, SliceLayout::kArrayOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 3048 "src/interpreter/bytecode-interpreter.dasc"

      //|9:
      //|  jmp ->InterpIdxGetI
      dasm_put(Dst, 11194);
#line 3051 "src/interpreter/bytecode-interpreter.dasc"

      //|8:
      //|  jmp ->InterpIdxGetIOutOfBoundary
      dasm_put(Dst, 11201);
#line 3054 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_UVGET:
      //|=>bc:
      //|  instr_B
      //|  LdUV LREG,ARG2F
      //|  mov  qword [STK+ARG1F*8], LREG
      //|  Dispatch
      dasm_put(Dst, 11208, bc, RuntimeLayout::kCurClsOffset, ClosureLayout::kUpValueOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 3062 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_UVSET:
      //|=>bc:
      //|  instr_C
      //|  mov RREG, qword [STK+ARG2F*8]
      //|  StUV ARG1F,RREG
      //|  Dispatch
      dasm_put(Dst, 11245, bc, RuntimeLayout::kCurClsOffset, ClosureLayout::kUpValueOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 3070 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_GSET:
      //|=>bc:
      //|  jmp ->InterpGSet
      dasm_put(Dst, 11282, bc);
#line 3075 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_GGET:
      //|=>bc:
      //|  jmp ->InterpGGet
      dasm_put(Dst, 11288, bc);
#line 3080 "src/interpreter/bytecode-interpreter.dasc"
      break;

    default:
      //|=> bc:
      //|  Break
      dasm_put(Dst, 11294,  bc);
#line 3085 "src/interpreter/bytecode-interpreter.dasc"
      break;
  }
}

// Help Dasm to resolve external address via Index idx
int ResolveExternAddress( void** ctx , unsigned char* addr ,
                                       int idx,
                                       int type ) {
  (void)ctx;

  ExternSymbolTable* t = GetExternSymbolTable();
  ExternSymbolTable::iterator itr = t->find(extnames[idx]);

  lava_verify( itr != t->end() );

  void* ptr = itr->second;
  lava_verify(CheckAddress(reinterpret_cast<std::uintptr_t>(ptr)));

  int iptr = HorribleCast(ptr);
  lava_verify(reinterpret_cast<void*>(iptr) == ptr);

  if(type) {
    int end = HorribleCast(addr+4);

    // Check whether the address is overflowed or not. I think this is
    // not needed but just in cases we have a bug so we don't end up
    // calling into some wired places into our code
    std::int64_t ptr64 = static_cast<std::int64_t>(iptr);
    std::int64_t end64 = static_cast<std::int64_t>(end);

    lava_verify( (ptr64-end64) >= std::numeric_limits<int>::min() &&
                 (ptr64-end64) <= std::numeric_limits<int>::max() );

    return iptr - HorribleCast(addr+4);
  } else {
    return iptr;
  }
}

} // namespace

AssemblyInterpreter::AssemblyInterpreter():
  dispatch_interp_(),
  dispatch_record_(),
  dispatch_jit_   (),
  interp_helper_  (),
  interp_entry_   (),
  code_buffer_    (),
  code_size_      (),
  buffer_size_    ()
{}

AssemblyInterpreter::~AssemblyInterpreter() {
  if(interp_entry_) OS::FreeCodePage(code_buffer_,buffer_size_);
}

std::shared_ptr<AssemblyInterpreter> AssemblyInterpreter::Generate() {
  static std::shared_ptr<AssemblyInterpreter> interp;
  if(interp) return interp; // return interp if we already have a interpreter pointer

  // create a new interp object since this is our first time
  interp.reset( new AssemblyInterpreter() );

  // create a build context
  BuildContext bctx;

  // initialize dasm_State object
  dasm_init(&(bctx.dasm_ctx),2);

  // setup the freaking global
  void* glb_arr[GLBNAME__MAX];
  dasm_setupglobal(&(bctx.dasm_ctx),glb_arr,GLBNAME__MAX);

  // setup the dasm
  dasm_setup(&(bctx.dasm_ctx),actions);

  // initialize the tag value needed , at least for each BC we need one
  bctx.tag = DASM_GROWABLE_PC_SIZE;
  dasm_growpc(&(bctx.dasm_ctx), DASM_GROWABLE_PC_SIZE );

  // Order matters, it may change profile of our icache

  // build the helper
  GenerateHelper(&bctx);

  // build the prolog
  GenerateInterpMisc(&bctx);

  // generate all bytecode's routine
  for( int i = static_cast<int>(BC_ADDIV) ; i < SIZE_OF_BYTECODE ; ++i ) {
    GenerateOneBytecode(&bctx,static_cast<Bytecode>(i));
  }

  std::size_t code_size;

  // we should never fail at *linking* if our code is *correct*
  lava_verify(dasm_link(&(bctx.dasm_ctx),&code_size) ==0);

  // generate a buffer and set the proper protection field for that piece of
  // memory to make our code *work*
  std::size_t new_size;

  void* buffer = OS::CreateCodePage(code_size,&new_size);
  if(!buffer) {
    return std::shared_ptr<AssemblyInterpreter>();
  }

  // encode the assembly code into the buffer
  dasm_encode(&(bctx.dasm_ctx),buffer);

  // get all pc labels for entry of bytecode routine
  for( int i = static_cast<int>(BC_ADDIV) ; i < SIZE_OF_BYTECODE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp->dispatch_interp_[i] =
      reinterpret_cast<void*>(static_cast<char*>(buffer) + off);
  }

  // get all pc labels for helper routines
  for( int i = INTERP_HELPER_START ; i < DASM_GROWABLE_PC_SIZE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp->interp_helper_.push_back(
        reinterpret_cast<void*>(static_cast<char*>(buffer)+off));
  }

  // start of the code buffer
  interp->code_buffer_  = buffer;

  // get the *interpreter's* entry
  int off = dasm_getpclabel(&(bctx.dasm_ctx),INTERP_START);
  interp->interp_entry_ = reinterpret_cast<void*>(
      static_cast<char*>(buffer) + off);

  interp->buffer_size_  = new_size;
  interp->code_size_    = code_size;
  return interp;
}

Bytecode AssemblyInterpreter::CheckBytecodeRoutine( void* pc ) const {
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    void* p = reinterpret_cast<void*>(pc);
    if(p == dispatch_interp_[i]) {
      return static_cast<Bytecode>(i);
    }
  }
  return SIZE_OF_BYTECODE;
}

int AssemblyInterpreter::CheckHelperRoutine( void* pc ) const {
  std::vector<void*>::const_iterator itr =
    std::find( interp_helper_.begin() , interp_helper_.end() , pc );
  if(itr != interp_helper_.end()) {
    return (static_cast<int>(std::distance(interp_helper_.begin(),itr))+INTERP_HELPER_START);
  } else {
    return -1;
  }
}

void AssemblyInterpreter::Dump( DumpWriter* writer ) const {
  ZydisDecoder decoder;
  ZydisDecoderInit( &decoder, ZYDIS_MACHINE_MODE_LONG_64,
                              ZYDIS_ADDRESS_WIDTH_64);

  ZydisFormatter formatter;
  ZydisFormatterInit(&formatter,ZYDIS_FORMATTER_STYLE_INTEL);

  std::uint64_t pc = reinterpret_cast<std::uint64_t>(code_buffer_);
  std::uint8_t* rp = static_cast<std::uint8_t*>(code_buffer_);
  std::size_t size = code_size_;

  writer->WriteL("CodeSize:%zu",code_size_);
  ZydisDecodedInstruction instr;
  while(ZYDIS_SUCCESS(
        ZydisDecoderDecodeBuffer(&decoder,rp,size,pc,&instr))) {

    char buffer[256];
    ZydisFormatterFormatInstruction(
        &formatter,&instr,buffer,sizeof(buffer));
    // check labels
    {
      Bytecode bc = CheckBytecodeRoutine(reinterpret_cast<void*>(pc));
      if(bc != SIZE_OF_BYTECODE) {
        writer->WriteL("Bytecode ===========> %s:",GetBytecodeName(bc));
      } else {
        int idx = CheckHelperRoutine(reinterpret_cast<void*>(pc));
        if(idx >= 0) {
          writer->WriteL("Helper ===========> %s:",GetInterpHelperName(idx));
        }
      }
    }
    writer->WriteL("%016" PRIX64 " (%d) %s",pc,instr.length,buffer);
    rp += instr.length;
    size -= instr.length;
    pc += instr.length;
  }
}

AssemblyInterpreter::Instance::Instance( const std::shared_ptr<AssemblyInterpreter>& interp ):
  dispatch_interp_(),
  dispatch_record_(),
  dispatch_jit_   (),
  interp_         (interp)
{
  memcpy(dispatch_interp_,interp->dispatch_interp_,sizeof(dispatch_interp_));
  memcpy(dispatch_record_,interp->dispatch_record_,sizeof(dispatch_record_));
  memcpy(dispatch_jit_   ,interp->dispatch_jit_   ,sizeof(dispatch_jit_   ));
}

bool AssemblyInterpreter::Instance::Run( Context* context , const Handle<Script>& script ,
                                                            const Handle<Object>& globals,
                                                            std::string* error,
                                                            Value* rval ) {

  Runtime* rt = context->gc()->GetInterpreterRuntime(script.ref(),
                                                     globals.ref(),
                                                      error);
  // Entry of our assembly interpreter
  Main m = reinterpret_cast<Main>(interp_->interp_entry_);

  // Interpret the bytecode
  bool ret = m(rt,rt->cur_proto,reinterpret_cast<void*>(rt->stack),
                                const_cast<void*>(
                                  reinterpret_cast<const void*>((*(rt->cur_proto))->code_buffer())),
                                dispatch_interp_);
  // Check return
  if(ret) {
    *rval = rt->ret;
  }

  context->gc()->ReturnInterpreterRuntime(rt);
  return ret;
}

} // namespace interpreter
} // namespace lavascript
