/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM x64 version 1.3.0
** DO NOT EDIT! The original file is in "src/interpreter/bytecode-interpreter.dasc".
*/

#line 1 "src/interpreter/bytecode-interpreter.dasc"
#include "bytecode-interpreter.h"
#include "src/trace.h"
#include "src/os.h"

#include <algorithm>
#include <cmath>
#include <map>
#include <cassert>
#include <climits>

#include <Zydis/Zydis.h>

namespace lavascript {
namespace interpreter{

inline void SetValueFlag( Value* v , std::uint32_t flag ) {
  v->raw_ = static_cast<std::uint64_t>(flag) << 32;
}

inline std::uint32_t GetValueFlag( const Value& v ) {
  return static_cast<std::uint32_t>(v.raw_ >>32);
}

namespace {

// Used in dynasm library
int ResolveExternAddress( void**,unsigned char*,int,int );

// Workaround for ODR
#include "dep/dynasm/dasm_proto.h"

#define DASM_EXTERN_FUNC(a,b,c,d) ResolveExternAddress((void**)a,b,c,d)
#include "dep/dynasm/dasm_x86.h"

// -------------------------------------------------------------
// BuildContext
//
// Build phase context, used to *generate* templated interpreter
// -------------------------------------------------------------
struct BuildContext {
  dasm_State* dasm_ctx;
  int tag;

  BuildContext():
    dasm_ctx(NULL),
    tag(0)
  {}

  ~BuildContext() {
    if(dasm_ctx) dasm_free(&dasm_ctx);
  }
};


// Shut the GCC's mouth fucked up
template< typename T >
int HorribleCast( T* ptr ) {
  std::uint64_t iptr = reinterpret_cast<std::uint64_t>(ptr);
  int ret = static_cast<int>(iptr);
  lava_verify(reinterpret_cast<T*>(ret) == ptr);
  return ret;
}

// --------------------------------------------------------------
// Runtime
//
// Used in the interpretation phase for the interpreter
// --------------------------------------------------------------
struct Runtime {
  // TODO:: This is for test purpose , no going into production
  Prototype** cur;
  Script** script;
  Object** global;
  Value ret;
  std::string* error;
  std::uint64_t stack[1024];

  Runtime( const Handle<Script>& script , const Handle<Object>& glb ,
                                          std::string* err ):
    cur     (script->main().ref()),
    script  (script.ref()),
    global  (glb.ref()),
    ret     (),
    error   (err),
    stack   ()
  {}
};

static_assert( std::is_standard_layout<Runtime>::value );

struct RuntimeLayout {
  static const std::uint32_t kRetOffset = offsetof(Runtime,ret);
};

// prototype for the interpreter's main
//                    runtime  proto     stk    pc    dispatch
typedef bool (*Main)(Runtime*,Prototype**,void*,void*,void*);

// ------------------------------------------------------------------
// Helper function/macros to register its literal name into a global
// table to help resolve the function's address during assembly link
// phase
// ------------------------------------------------------------------
typedef std::map<std::string,void*> ExternSymbolTable;

ExternSymbolTable* GetExternSymbolTable() {
  static ExternSymbolTable kTable;
  return &kTable;
}

// Macro to register a external function's symbol name into global table
#define INTERPRETER_REGISTER_EXTERN_SYMBOL(XX)                               \
  struct XX##_Registry {                                                     \
    XX##_Registry() {                                                        \
      ExternSymbolTable* table = GetExternSymbolTable();                     \
      table->insert(std::make_pair(#XX,reinterpret_cast<void*>(&XX)));       \
    }                                                                        \
  };                                                                         \
  static XX##_Registry k##XX##_Registry;


// -------------------------------------------------------------------------
// Helper to set Value object to indicate special meaning
// -------------------------------------------------------------------------
#define VALUE_FAIL Value::FLAG_1

// ----------------------------------------------------------------------------
// Type Conversion
// ----------------------------------------------------------------------------
inline Value InterpreterToBoolean  ( Runtime* sandbox , Value val ) {
  (void)sandbox;
  (void)val;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterToBoolean)


// --------------------------------------------------------------------------
// Arithmetic Helper
// --------------------------------------------------------------------------
Value InterpreterDoArithmetic( Runtime* sandbox ,
                               Value left ,  // rsi
                               Value right , // rdx
                               Bytecode bc ) {
  (void)sandbox;
  (void)left;
  (void)right;
  (void)bc;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoArithmetic)

Value InterpreterPow         ( Runtime* sandbox ,
                               Value left,
                               Value right,
                               Bytecode bc ) {
  (void)sandbox;
  (void)left;
  (void)right;
  (void)bc;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPow)

void InterpreterModByReal    ( Runtime* sandbox , std::uint32_t* pc ) {
  (void)sandbox;
  (void)pc;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterModByReal)

void InterpreterDivByZero    ( Runtime* sandbox , std::uint32_t* pc ) {
  (void)sandbox;
  (void)pc;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDivByZero)

double Pow( double a , double b ) {
  return std::pow(a,b);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(Pow)


// ---------------------------------------------------------------------------
// Comparison Helper
// ---------------------------------------------------------------------------
Value InterpreterDoCompare  ( Runtime* sandbox , Value left ,
                                                 Value right,
                                                 Bytecode bc ) {
  (void)sandbox;
  (void)left;
  (void)right;
  (void)bc;
  {
    Value r;
    SetValueFlag( &r, VALUE_FAIL );
    return r;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCompare)

// ----------------------------------------------------------------------------
// Unary Helper
// ----------------------------------------------------------------------------
bool InterpreterDoNegate   ( Runtime* sandbox , Value* operand ) {
  (void)sandbox;
  (void)operand;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNegate)

bool InterpreterDoNot      ( Runtime* sandbox , Value* operand ) {
  (void)sandbox;
  (void)operand;
  return false;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoNot)

// ----------------------------------------------------------------------------
// Jump Helper
// ----------------------------------------------------------------------------
void* InterpreterDoCondJmpT  ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondJmpT)

void* InterpreterDoCondJmpF  ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondJmpF)


void* InterpreterDoCondAnd   ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondAnd)

void* InterpreterDoCondOr    ( Runtime* sandbox , Value condition ,
                                                  std::uint32_t where ,
                                                  void* start_of_pc ) {
  (void)sandbox;
  (void)condition;
  (void)where;
  (void)start_of_pc;
  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterDoCondOr)


/* ======================================================================
 *
 * Implementation of AssemblyIntepreter
 *
 * =====================================================================*/
//|.arch x64
#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif
#line 285 "src/interpreter/bytecode-interpreter.dasc"
//|.actionlist actions
static const unsigned char actions[10662] = {
  254,1,248,10,237,237,255,248,11,237,237,255,248,12,0,0,0,0,0,0,0,0,255,254,
  0,249,248,13,255,72,131,252,236,64,76,137,100,36,40,76,137,108,36,32,76,137,
  116,36,24,76,137,124,36,16,72,137,108,36,8,72,137,92,36,48,255,73,137,252,
  252,73,137,252,245,73,137,214,72,137,205,77,137,199,255,72,137,12,36,255,
  139,69,0,76,15,182,216,76,137,223,255,232,251,1,0,255,72,184,237,237,252,
  255,208,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,255,249,
  248,14,72,49,192,255,76,139,100,36,40,76,139,108,36,32,76,139,116,36,24,76,
  139,124,36,16,72,139,108,36,8,72,139,92,36,48,72,131,196,64,195,255,249,248,
  15,73,139,134,252,248,7,0,0,73,137,132,253,36,233,72,199,192,1,0,0,0,255,
  249,248,16,76,137,231,77,139,93,0,77,139,155,233,72,190,237,237,65,11,52,
  155,15,182,77,252,252,255,232,251,1,1,255,73,137,195,73,193,252,235,32,73,
  129,252,251,239,15,132,244,14,73,137,134,252,248,7,0,0,139,69,0,76,15,182,
  216,76,137,223,255,249,248,17,76,137,231,77,139,93,0,77,139,155,233,72,186,
  237,237,65,11,20,131,15,182,77,252,252,255,249,248,18,76,137,231,77,139,93,
  0,77,139,155,233,73,139,52,219,15,182,77,252,252,255,249,248,19,76,137,231,
  77,139,93,0,77,139,155,233,73,139,20,195,15,182,77,252,252,255,249,248,20,
  76,137,231,73,139,52,222,73,139,20,198,15,182,77,252,252,255,249,248,21,255,
  232,251,1,2,255,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,249,248,22,76,137,231,77,139,93,0,77,139,155,233,72,190,237,
  237,65,11,52,155,73,139,20,198,15,182,77,252,252,255,232,251,1,3,255,249,
  248,23,76,137,231,77,139,93,0,77,139,155,233,73,139,52,219,73,139,20,198,
  15,182,77,252,252,255,249,248,24,76,137,231,73,139,52,222,77,139,93,0,77,
  139,155,233,72,186,237,237,65,11,20,131,15,182,77,252,252,255,249,248,25,
  76,137,231,73,139,52,222,77,139,93,0,77,139,155,233,73,139,20,195,15,182,
  77,252,252,255,249,248,26,76,137,231,73,139,52,222,77,139,93,0,77,139,155,
  233,73,139,20,195,15,182,77,252,252,255,249,248,27,76,137,231,72,141,117,
  252,252,255,232,251,1,4,255,252,233,244,14,255,249,248,28,76,137,231,72,141,
  117,252,252,255,232,251,1,5,255,249,248,29,76,137,231,77,139,93,0,77,139,
  155,233,72,190,237,237,65,11,52,155,73,139,20,198,15,182,77,252,252,255,232,
  251,1,6,255,249,248,30,76,137,231,73,139,52,222,77,139,93,0,77,139,155,233,
  72,186,237,237,65,11,20,131,15,182,77,252,252,255,249,248,31,76,137,231,77,
  139,93,0,77,139,155,233,73,139,52,195,73,139,20,198,15,182,77,252,252,255,
  249,248,32,76,137,231,73,139,52,222,77,139,93,0,77,139,155,233,73,139,20,
  195,15,182,77,252,252,255,249,248,33,76,137,231,73,139,52,222,73,139,20,198,
  15,182,77,252,252,255,249,248,34,76,137,231,77,139,93,0,77,139,155,233,77,
  139,28,219,72,199,198,237,72,193,230,48,76,9,222,73,139,52,198,15,182,77,
  252,252,255,249,248,35,76,137,231,73,139,52,222,77,139,93,0,77,139,155,233,
  77,139,28,195,72,199,194,237,72,193,226,48,76,9,218,72,15,182,77,252,252,
  255,249,248,36,76,137,231,73,141,52,222,255,232,251,1,7,255,132,192,252,233,
  244,14,139,69,0,76,15,182,216,76,137,223,255,249,248,37,76,137,231,73,141,
  52,222,255,232,251,1,8,255,249,65,199,134,252,252,7,0,0,237,252,233,244,15,
  255,249,252,233,244,15,255,249,15,182,220,193,232,16,77,139,28,198,77,137,
  28,222,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,77,
  139,93,0,77,139,155,233,65,139,52,131,65,137,52,222,65,199,68,222,4,237,139,
  69,0,76,15,182,216,76,137,223,255,249,15,182,220,65,199,4,222,0,0,0,0,65,
  199,68,222,4,237,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,65,
  199,4,222,1,0,0,0,65,199,68,222,4,237,139,69,0,76,15,182,216,76,137,223,255,
  249,15,182,220,65,199,4,222,252,255,252,255,252,255,252,255,65,199,68,222,
  4,237,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,77,
  139,93,0,77,139,155,233,252,242,65,15,16,4,195,252,242,65,15,17,4,222,139,
  69,0,76,15,182,216,76,137,223,255,249,15,182,220,65,199,68,222,4,237,139,
  69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,77,139,93,0,77,
  139,155,233,77,139,28,195,72,199,198,237,72,193,230,48,76,9,222,73,137,52,
  222,139,69,0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,
  16,73,139,20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,
  247,65,129,252,251,239,15,132,244,248,252,233,244,16,248,1,77,139,93,0,77,
  139,155,233,252,242,65,15,42,4,155,102,72,15,110,202,252,242,15,88,193,252,
  242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,
  69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,255,69,139,28,198,
  77,139,93,0,77,139,155,233,65,139,4,155,133,192,15,132,244,27,153,65,252,
  247,252,251,65,137,134,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,69,
  139,28,198,77,139,93,0,77,139,155,233,65,139,4,155,133,192,15,132,244,27,
  153,65,252,247,252,251,65,137,150,252,248,7,0,0,65,199,134,252,252,7,0,0,
  237,255,77,139,93,0,77,139,155,233,65,139,52,155,1,214,65,137,182,252,248,
  7,0,0,65,199,134,252,252,7,0,0,237,255,249,193,232,8,15,183,216,193,232,16,
  73,139,20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,
  247,65,129,252,251,239,15,132,244,248,252,233,244,18,248,1,77,139,93,0,77,
  139,155,233,252,242,65,15,16,4,219,102,72,15,110,202,252,242,15,88,193,252,
  242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,
  69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,
  155,233,252,242,65,15,16,4,219,252,242,15,42,202,252,242,15,88,193,252,242,
  65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,193,
  232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,32,65,
  129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,
  244,16,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,4,155,102,72,15,
  110,202,252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,
  15,182,216,76,137,223,255,77,139,93,0,77,139,155,233,65,139,52,155,41,214,
  65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,249,193,232,8,15,
  183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,32,65,129,252,
  251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,244,18,248,
  1,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,102,72,15,110,202,252,
  242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,
  137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,
  139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,15,42,202,252,242,
  15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,
  223,255,249,193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,
  252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,
  248,252,233,244,16,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,4,155,
  102,72,15,110,202,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,
  69,0,76,15,182,216,76,137,223,255,77,139,93,0,77,139,155,233,65,139,52,155,
  15,175,252,242,65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,
  249,193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,18,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,102,72,
  15,110,202,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,
  36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,15,
  42,202,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,73,139,20,198,
  73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,
  251,239,15,132,244,248,252,233,244,18,248,1,77,139,93,0,77,139,155,233,252,
  242,65,15,16,4,219,102,72,15,110,202,252,242,15,94,193,252,242,65,15,17,134,
  252,248,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,
  72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,
  15,16,4,219,252,242,15,42,202,252,242,15,94,193,252,242,65,15,17,134,252,
  248,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,
  193,232,16,73,139,20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,
  15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,244,16,248,1,252,
  233,244,28,248,2,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,
  73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,
  132,244,248,252,233,244,17,248,1,77,139,93,0,77,139,155,233,252,242,65,15,
  42,12,131,102,72,15,110,198,252,242,15,88,193,252,242,65,15,17,134,252,248,
  7,0,0,139,69,0,76,15,182,216,76,137,223,255,133,252,246,252,233,244,27,77,
  139,93,0,77,139,155,233,69,139,28,131,137,252,240,153,65,252,247,252,251,
  65,137,134,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,77,139,93,0,77,
  139,155,233,69,139,28,131,133,252,246,252,233,244,27,77,139,93,0,77,139,155,
  233,69,139,28,131,137,252,240,153,65,252,247,252,251,65,137,150,252,248,7,
  0,0,65,199,134,252,252,7,0,0,237,255,77,139,93,0,77,139,155,233,65,139,20,
  131,1,214,65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,249,15,
  182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,
  252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,244,
  19,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,102,72,15,110,
  198,252,242,15,88,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,
  216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,
  248,2,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,252,242,15,42,198,
  252,242,15,88,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,
  193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,
  244,248,252,233,244,17,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,
  12,131,102,72,15,110,198,252,242,15,92,193,252,242,65,15,17,134,252,248,7,
  0,0,139,69,0,76,15,182,216,76,137,223,255,77,139,93,0,77,139,155,233,65,139,
  20,131,41,214,65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,249,
  15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,
  252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,244,
  19,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,102,72,15,110,
  198,252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,
  216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,
  248,2,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,252,242,15,42,198,
  252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,
  193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,
  244,248,252,233,244,17,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,
  12,131,102,72,15,110,198,252,242,15,89,193,252,242,65,15,17,134,252,248,7,
  0,0,139,69,0,76,15,182,216,76,137,223,255,77,139,93,0,77,139,155,233,65,139,
  20,131,15,175,252,242,65,137,182,252,248,7,0,0,65,199,134,252,252,7,0,0,237,
  255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,19,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,102,72,
  15,110,198,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,
  36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,102,72,15,
  110,198,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,
  15,182,216,76,137,223,255,249,255,15,182,220,193,232,16,73,139,52,222,73,
  137,252,243,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,
  251,239,15,132,244,248,252,233,244,17,248,1,77,139,93,0,77,139,155,233,252,
  242,65,15,42,12,131,102,72,15,110,198,252,242,15,94,193,252,242,65,15,17,
  134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,
  232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,252,251,239,
  15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,244,19,248,1,77,
  139,93,0,77,139,155,233,252,242,65,15,16,12,195,102,72,15,110,198,252,242,
  15,94,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,
  223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,139,
  93,0,77,139,155,233,252,242,65,15,16,12,195,252,242,15,42,198,252,242,15,
  94,193,252,242,65,15,17,134,252,248,7,0,0,139,69,0,76,15,182,216,76,137,223,
  255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,17,248,1,252,233,244,28,248,2,255,249,15,182,220,193,232,16,73,139,
  52,222,73,139,20,198,129,252,254,239,15,133,244,247,129,252,250,239,15,133,
  244,250,255,72,193,252,234,32,72,193,252,238,32,65,137,211,137,252,240,133,
  192,15,132,244,27,153,65,252,247,252,251,65,137,134,252,248,7,0,0,65,199,
  134,252,252,7,0,0,237,255,72,193,252,234,32,72,193,252,238,32,65,137,211,
  137,252,240,133,192,15,132,244,27,153,65,252,247,252,251,65,137,150,252,248,
  7,0,0,65,199,134,252,252,7,0,0,237,255,65,139,52,222,65,3,52,198,65,137,182,
  252,248,7,0,0,65,199,134,252,252,7,0,0,237,255,139,69,0,76,15,182,216,72,
  131,197,4,67,252,255,36,223,248,1,129,252,250,239,15,131,244,252,129,252,
  250,239,15,130,244,251,129,252,250,239,15,133,244,252,72,193,252,234,32,252,
  242,15,42,202,102,72,15,110,198,252,233,244,251,248,4,129,252,250,239,15,
  131,244,252,72,193,252,238,32,252,242,15,42,198,102,72,15,110,202,248,5,255,
  252,233,244,28,255,252,242,15,88,193,252,242,65,15,17,134,252,248,7,0,0,255,
  139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,6,252,233,244,20,
  255,65,139,52,222,65,43,52,198,65,137,182,252,248,7,0,0,65,199,134,252,252,
  7,0,0,237,255,252,242,15,92,193,252,242,65,15,17,134,252,248,7,0,0,255,65,
  139,52,222,65,15,175,52,198,65,137,182,252,248,7,0,0,65,199,134,252,252,7,
  0,0,237,255,252,242,15,89,193,252,242,65,15,17,134,252,248,7,0,0,255,252,
  242,15,94,193,252,242,65,15,17,134,252,248,7,0,0,255,249,193,232,8,15,183,
  216,193,232,16,77,139,93,0,77,139,155,233,252,242,65,15,42,4,155,65,139,84,
  198,4,129,252,250,239,15,130,244,247,129,252,250,239,15,133,244,248,252,242,
  73,15,42,12,198,248,1,252,233,244,21,248,2,252,233,244,22,255,249,15,182,
  220,193,232,16,77,139,93,0,77,139,155,233,252,242,65,15,42,12,131,65,139,
  116,222,4,129,252,254,239,15,130,244,247,129,252,254,239,15,133,244,248,252,
  242,73,15,42,4,222,248,1,252,233,244,21,248,2,252,233,244,24,255,249,193,
  232,8,15,183,216,193,232,16,77,139,93,0,77,139,155,233,252,242,65,15,16,4,
  219,65,139,84,198,4,129,252,250,239,15,130,244,247,129,252,250,239,15,133,
  244,248,252,242,73,15,42,12,198,248,1,252,233,244,21,248,2,252,233,244,23,
  255,249,193,232,8,15,183,216,193,232,16,77,139,93,0,77,139,155,233,252,242,
  65,15,16,12,195,65,139,116,222,4,129,252,254,239,15,130,244,247,129,252,254,
  239,15,133,244,248,252,242,73,15,42,4,222,248,1,252,233,244,21,248,2,252,
  233,244,25,255,249,193,232,8,15,183,216,193,232,16,252,233,244,26,255,249,
  193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,32,
  65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,
  244,38,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,4,155,102,72,15,
  110,202,65,187,237,65,186,237,102,15,46,193,69,15,76,218,69,137,158,252,252,
  7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,
  197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,65,139,52,155,65,
  187,237,65,186,237,57,214,69,15,76,218,69,137,158,252,252,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,73,139,20,
  198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,
  252,251,239,15,132,244,248,252,233,244,39,248,1,77,139,93,0,77,139,155,233,
  252,242,65,15,16,4,219,252,242,65,15,16,12,198,65,187,237,65,186,237,102,
  15,46,193,69,15,76,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,
  137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,
  139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,65,15,42,12,198,65,
  187,237,65,186,237,102,15,46,193,69,15,76,218,69,137,158,252,252,7,0,0,139,
  69,0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,73,
  139,20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,247,
  65,129,252,251,239,15,132,244,248,252,233,244,38,248,1,77,139,93,0,77,139,
  155,233,252,242,65,15,42,4,155,102,72,15,110,202,65,187,237,65,186,237,102,
  15,46,193,69,15,78,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,
  137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,
  139,93,0,77,139,155,233,65,139,52,155,65,187,237,65,186,237,57,214,69,15,
  78,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,
  193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,32,
  65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,
  244,39,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,65,
  15,16,12,198,65,187,237,65,186,237,102,15,46,193,69,15,78,218,69,137,158,
  252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,
  72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,
  15,16,4,219,252,242,65,15,42,12,198,65,187,237,65,186,237,102,15,46,193,69,
  15,78,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,38,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,4,155,102,72,
  15,110,202,65,187,237,65,186,237,102,15,46,193,69,15,79,218,69,137,158,252,
  252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,
  131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,65,139,52,155,
  65,187,237,65,186,237,57,214,69,15,79,218,69,137,158,252,252,7,0,0,139,69,
  0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,73,139,
  20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,
  129,252,251,239,15,132,244,248,252,233,244,39,248,1,77,139,93,0,77,139,155,
  233,252,242,65,15,16,4,219,252,242,65,15,16,12,198,65,187,237,65,186,237,
  102,15,46,193,69,15,79,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,
  2,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,65,15,42,12,198,
  65,187,237,65,186,237,102,15,46,193,69,15,79,218,69,137,158,252,252,7,0,0,
  139,69,0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,
  73,139,20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,
  247,65,129,252,251,239,15,132,244,248,252,233,244,38,248,1,77,139,93,0,77,
  139,155,233,252,242,65,15,42,4,155,102,72,15,110,202,65,187,237,65,186,237,
  102,15,46,193,69,15,77,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,
  2,77,139,93,0,77,139,155,233,65,139,52,155,65,187,237,65,186,237,57,214,69,
  15,77,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,39,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,
  65,15,16,12,198,65,187,237,65,186,237,102,15,46,193,69,15,77,218,69,137,158,
  252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,
  72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,
  15,16,4,219,252,242,65,15,42,12,198,65,187,237,65,186,237,102,15,46,193,69,
  15,77,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,38,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,4,155,102,72,
  15,110,202,65,187,237,65,186,237,102,15,46,193,69,15,68,218,69,137,158,252,
  252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,
  131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,65,139,52,155,
  65,187,237,65,186,237,57,214,69,15,68,218,69,137,158,252,252,7,0,0,139,69,
  0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,73,139,
  20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,
  129,252,251,239,15,132,244,248,252,233,244,39,248,1,77,139,93,0,77,139,155,
  233,252,242,65,15,16,4,219,252,242,65,15,16,12,198,65,187,237,65,186,237,
  102,15,46,193,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,
  2,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,65,15,42,12,198,
  65,187,237,65,186,237,102,15,46,193,69,15,68,218,69,137,158,252,252,7,0,0,
  139,69,0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,
  73,139,20,198,73,137,211,73,193,252,235,32,65,129,252,251,239,15,130,244,
  247,65,129,252,251,239,15,132,244,248,252,233,244,38,248,1,77,139,93,0,77,
  139,155,233,252,242,65,15,42,4,155,102,72,15,110,202,65,187,237,65,186,237,
  102,15,46,193,69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,
  2,77,139,93,0,77,139,155,233,65,139,52,155,65,187,237,65,186,237,57,214,69,
  15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,193,232,8,15,183,216,193,232,16,73,139,20,198,73,137,211,73,193,252,235,
  32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,
  233,244,39,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,4,219,252,242,
  65,15,16,12,198,65,187,237,65,186,237,102,15,46,193,69,15,69,218,69,137,158,
  252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,
  72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,
  15,16,4,219,252,242,65,15,42,12,198,65,187,237,65,186,237,102,15,46,193,69,
  15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,
  65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,
  244,40,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,12,131,102,72,15,
  110,198,65,187,237,65,186,237,102,15,46,193,69,15,76,218,69,137,158,252,252,
  7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,
  197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,65,139,20,131,65,
  187,237,65,186,237,57,214,69,15,76,218,69,137,158,252,252,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,
  252,243,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,
  239,15,132,244,248,252,233,244,41,248,1,77,139,93,0,77,139,155,233,252,242,
  65,15,16,12,195,252,242,65,15,16,4,222,65,187,237,65,186,237,102,15,46,193,
  69,15,76,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,
  139,155,233,252,242,65,15,16,12,195,252,242,65,15,42,4,222,65,187,237,65,
  186,237,102,15,46,193,69,15,76,218,69,137,158,252,252,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,
  243,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,
  15,132,244,248,252,233,244,40,248,1,77,139,93,0,77,139,155,233,252,242,65,
  15,42,12,131,102,72,15,110,198,65,187,237,65,186,237,102,15,46,193,69,15,
  78,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,
  69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,
  155,233,65,139,20,131,65,187,237,65,186,237,57,214,69,15,78,218,69,137,158,
  252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,
  16,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,130,
  244,247,65,129,252,251,239,15,132,244,248,252,233,244,41,248,1,77,139,93,
  0,77,139,155,233,252,242,65,15,16,12,195,252,242,65,15,16,4,222,65,187,237,
  65,186,237,102,15,46,193,69,15,78,218,69,137,158,252,252,7,0,0,139,69,0,76,
  15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,
  36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,252,242,65,
  15,42,4,222,65,187,237,65,186,237,102,15,46,193,69,15,78,218,69,137,158,252,
  252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,
  73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,130,
  244,247,65,129,252,251,239,15,132,244,248,252,233,244,40,248,1,77,139,93,
  0,77,139,155,233,252,242,65,15,42,12,131,102,72,15,110,198,65,187,237,65,
  186,237,102,15,46,193,69,15,79,218,69,137,158,252,252,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,
  223,248,2,77,139,93,0,77,139,155,233,65,139,20,131,65,187,237,65,186,237,
  57,214,69,15,79,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,
  223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,
  235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,
  252,233,244,41,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,252,
  242,65,15,16,4,222,65,187,237,65,186,237,102,15,46,193,69,15,79,218,69,137,
  158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,
  216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,252,242,
  65,15,16,12,195,252,242,65,15,42,4,222,65,187,237,65,186,237,102,15,46,193,
  69,15,79,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,
  65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,
  244,40,248,1,77,139,93,0,77,139,155,233,252,242,65,15,42,12,131,102,72,15,
  110,198,65,187,237,65,186,237,102,15,46,193,69,15,77,218,69,137,158,252,252,
  7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,
  197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,65,139,20,131,65,
  187,237,65,186,237,57,214,69,15,77,218,69,137,158,252,252,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,
  252,243,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,
  239,15,132,244,248,252,233,244,41,248,1,77,139,93,0,77,139,155,233,252,242,
  65,15,16,12,195,252,242,65,15,16,4,222,65,187,237,65,186,237,102,15,46,193,
  69,15,77,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,
  139,155,233,252,242,65,15,16,12,195,252,242,65,15,42,4,222,65,187,237,65,
  186,237,102,15,46,193,69,15,77,218,69,137,158,252,252,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,
  243,73,193,252,235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,
  15,132,244,248,252,233,244,40,248,1,77,139,93,0,77,139,155,233,252,242,65,
  15,42,12,131,102,72,15,110,198,65,187,237,65,186,237,102,15,46,193,69,15,
  68,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,
  69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,
  155,233,65,139,20,131,65,187,237,65,186,237,57,214,69,15,68,218,69,137,158,
  252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,
  16,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,130,
  244,247,65,129,252,251,239,15,132,244,248,252,233,244,41,248,1,77,139,93,
  0,77,139,155,233,252,242,65,15,16,12,195,252,242,65,15,16,4,222,65,187,237,
  65,186,237,102,15,46,193,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,76,
  15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,
  36,223,248,2,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,252,242,65,
  15,42,4,222,65,187,237,65,186,237,102,15,46,193,69,15,68,218,69,137,158,252,
  252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,
  73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,130,
  244,247,65,129,252,251,239,15,132,244,248,252,233,244,40,248,1,77,139,93,
  0,77,139,155,233,252,242,65,15,42,12,131,102,72,15,110,198,65,187,237,65,
  186,237,102,15,46,193,69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,
  223,248,2,77,139,93,0,77,139,155,233,65,139,20,131,65,187,237,65,186,237,
  57,214,69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,
  223,255,249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,
  235,32,65,129,252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,
  252,233,244,41,248,1,77,139,93,0,77,139,155,233,252,242,65,15,16,12,195,252,
  242,65,15,16,4,222,65,187,237,65,186,237,102,15,46,193,69,15,69,218,69,137,
  158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,
  216,72,131,197,4,67,252,255,36,223,248,2,77,139,93,0,77,139,155,233,252,242,
  65,15,16,12,195,252,242,65,15,42,4,222,65,187,237,65,186,237,102,15,46,193,
  69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,
  249,15,182,220,193,232,16,73,139,52,222,73,139,20,198,129,252,254,239,15,
  133,244,247,129,252,250,239,15,133,244,248,72,193,252,238,32,72,193,252,234,
  32,65,187,237,65,186,237,57,214,69,15,76,218,69,137,158,252,252,7,0,0,139,
  69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,
  252,255,36,223,248,1,129,252,254,239,15,131,244,252,129,252,250,239,15,130,
  244,249,129,252,250,239,15,133,244,252,102,72,15,110,198,72,193,252,234,32,
  252,242,15,42,202,252,233,244,249,248,2,129,252,250,239,15,131,244,252,72,
  193,252,238,32,252,242,15,42,198,102,15,110,202,248,3,65,187,237,65,186,237,
  102,15,46,193,69,15,76,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,
  76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,
  6,252,233,244,33,255,249,15,182,220,193,232,16,73,139,52,222,73,139,20,198,
  129,252,254,239,15,133,244,247,129,252,250,239,15,133,244,248,72,193,252,
  238,32,72,193,252,234,32,65,187,237,65,186,237,57,214,69,15,78,218,69,137,
  158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,
  216,72,131,197,4,67,252,255,36,223,248,1,129,252,254,239,15,131,244,252,129,
  252,250,239,15,130,244,249,129,252,250,239,15,133,244,252,102,72,15,110,198,
  72,193,252,234,32,252,242,15,42,202,252,233,244,249,248,2,129,252,250,239,
  15,131,244,252,72,193,252,238,32,252,242,15,42,198,102,15,110,202,248,3,65,
  187,237,65,186,237,102,15,46,193,69,15,78,218,69,137,158,252,252,7,0,0,139,
  69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,73,139,52,222,
  73,139,20,198,129,252,254,239,15,133,244,247,129,252,250,239,15,133,244,248,
  72,193,252,238,32,72,193,252,234,32,65,187,237,65,186,237,57,214,69,15,79,
  218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,
  0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,1,129,252,254,239,15,131,
  244,252,129,252,250,239,15,130,244,249,129,252,250,239,15,133,244,252,102,
  72,15,110,198,72,193,252,234,32,252,242,15,42,202,252,233,244,249,248,2,129,
  252,250,239,15,131,244,252,72,193,252,238,32,252,242,15,42,198,102,15,110,
  202,248,3,65,187,237,65,186,237,102,15,46,193,69,15,79,218,69,137,158,252,
  252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,182,220,193,232,16,
  73,139,52,222,73,139,20,198,129,252,254,239,15,133,244,247,129,252,250,239,
  15,133,244,248,72,193,252,238,32,72,193,252,234,32,65,187,237,65,186,237,
  57,214,69,15,77,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,
  223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,223,248,1,129,252,
  254,239,15,131,244,252,129,252,250,239,15,130,244,249,129,252,250,239,15,
  133,244,252,102,72,15,110,198,72,193,252,234,32,252,242,15,42,202,252,233,
  244,249,248,2,129,252,250,239,15,131,244,252,72,193,252,238,32,252,242,15,
  42,198,102,15,110,202,248,3,65,187,237,65,186,237,102,15,46,193,69,15,77,
  218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,255,249,15,
  182,220,193,232,16,73,139,52,222,73,139,20,198,129,252,254,239,15,133,244,
  247,129,252,250,239,15,133,244,248,72,193,252,238,32,72,193,252,234,32,65,
  187,237,65,186,237,57,214,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,
  36,223,248,1,129,252,254,239,15,131,244,252,129,252,250,239,15,130,244,249,
  129,252,250,239,15,133,244,252,102,72,15,110,198,72,193,252,234,32,252,242,
  15,42,202,252,233,244,249,248,2,129,252,250,239,15,131,244,252,72,193,252,
  238,32,252,242,15,42,198,102,15,110,202,248,3,65,187,237,65,186,237,102,15,
  46,193,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,
  223,255,249,15,182,220,193,232,16,73,139,52,222,73,139,20,198,129,252,254,
  239,15,133,244,247,129,252,250,239,15,133,244,248,72,193,252,238,32,72,193,
  252,234,32,65,187,237,65,186,237,57,214,69,15,69,218,69,137,158,252,252,7,
  0,0,139,69,0,76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,
  4,67,252,255,36,223,248,1,129,252,254,239,15,131,244,252,129,252,250,239,
  15,130,244,249,129,252,250,239,15,133,244,252,102,72,15,110,198,72,193,252,
  234,32,252,242,15,42,202,252,233,244,249,248,2,129,252,250,239,15,131,244,
  252,72,193,252,238,32,252,242,15,42,198,102,15,110,202,248,3,65,187,237,65,
  186,237,102,15,46,193,69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,249,193,232,8,15,183,216,193,232,16,252,233,244,34,
  255,249,15,182,220,193,232,16,252,233,244,35,255,249,15,182,220,193,232,16,
  77,139,93,0,77,139,155,233,73,139,52,219,73,139,20,198,72,139,54,129,190,
  233,239,15,133,244,247,73,137,211,73,193,252,235,48,65,129,252,251,239,15,
  133,244,247,72,11,21,244,11,72,139,18,129,186,233,239,15,133,244,247,65,187,
  237,65,186,237,72,133,214,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,
  76,15,182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,
  36,223,248,1,252,233,244,34,255,249,193,232,8,15,183,216,193,232,16,73,139,
  52,222,77,139,93,0,77,139,155,233,73,139,20,195,73,137,252,243,73,193,252,
  235,48,65,129,252,251,239,15,133,244,247,72,11,53,244,11,72,139,54,129,190,
  233,239,15,133,244,247,72,139,18,129,186,233,239,15,133,244,247,65,187,237,
  65,186,237,72,133,214,69,15,68,218,69,137,158,252,252,7,0,0,139,69,0,76,15,
  182,216,76,137,223,255,139,69,0,76,15,182,216,72,131,197,4,67,252,255,36,
  223,248,1,252,233,244,35,255,249,15,182,220,193,232,16,77,139,93,0,77,139,
  155,233,73,139,52,219,73,139,20,198,72,139,54,129,190,233,239,15,133,244,
  247,73,137,211,73,193,252,235,48,65,129,252,251,239,15,133,244,247,72,11,
  21,244,11,72,139,18,129,186,233,239,15,133,244,247,65,187,237,65,186,237,
  72,133,214,69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,
  137,223,255,249,193,232,8,15,183,216,193,232,16,73,139,52,222,77,139,93,0,
  77,139,155,233,73,139,20,195,73,137,252,243,73,193,252,235,48,65,129,252,
  251,239,15,133,244,247,72,11,53,244,11,72,139,54,129,190,233,239,15,133,244,
  247,72,139,18,129,186,233,239,15,133,244,247,65,187,237,65,186,237,72,133,
  214,69,15,69,218,69,137,158,252,252,7,0,0,139,69,0,76,15,182,216,76,137,223,
  255,249,15,182,220,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,
  252,251,239,15,130,244,247,65,129,252,251,239,15,132,244,248,252,233,244,
  36,255,248,1,102,72,15,110,198,73,187,237,237,102,73,15,110,203,102,15,87,
  193,252,242,65,15,17,4,222,139,69,0,76,15,182,216,76,137,223,255,248,2,65,
  252,247,28,222,255,249,15,182,220,73,139,52,222,65,139,84,222,4,255,129,252,
  250,239,15,132,244,247,255,129,252,250,239,15,132,244,248,255,129,252,250,
  239,15,132,244,249,255,129,252,250,239,15,130,244,250,255,129,252,250,239,
  15,132,244,251,255,252,233,244,37,255,248,1,65,199,68,222,4,237,252,233,244,
  252,255,248,2,65,199,68,222,4,237,252,233,244,252,255,248,3,65,187,237,65,
  186,237,133,252,246,69,15,68,218,69,137,92,222,4,252,233,244,252,255,248,
  4,102,72,15,110,198,102,15,252,239,201,65,187,237,65,186,237,102,15,46,193,
  69,15,68,218,69,137,92,222,4,252,233,244,252,255,248,5,65,199,68,222,4,237,
  252,233,244,252,255,248,6,139,69,0,76,15,182,216,76,137,223,255,249,15,182,
  220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,65,129,252,
  251,239,15,132,244,247,65,129,252,251,239,15,132,244,248,65,129,252,251,239,
  15,132,244,248,65,129,252,251,239,15,132,244,253,65,129,252,251,239,15,130,
  244,254,252,233,244,42,248,7,133,252,246,15,132,244,248,255,252,233,244,247,
  248,8,102,15,252,239,201,102,72,15,110,198,102,15,46,193,15,132,244,248,248,
  1,76,139,28,36,73,141,44,131,248,2,139,69,0,76,15,182,216,76,137,223,255,
  249,15,182,220,193,232,16,73,139,52,222,73,137,252,243,73,193,252,235,32,
  65,129,252,251,239,15,132,244,248,65,129,252,251,239,15,132,244,247,65,129,
  252,251,239,15,132,244,247,65,129,252,251,239,15,132,244,253,65,129,252,251,
  239,15,130,244,254,252,233,244,43,248,7,133,252,246,15,132,244,247,255,252,
  233,244,248,248,8,102,15,252,239,201,102,72,15,110,198,102,15,46,193,15,133,
  244,248,248,1,76,139,28,36,73,141,44,131,248,2,139,69,0,76,15,182,216,76,
  137,223,255,249,193,232,8,15,183,216,73,139,182,252,248,7,0,0,73,137,252,
  243,73,193,252,235,32,65,129,252,251,239,15,132,244,248,65,129,252,251,239,
  15,132,244,247,65,129,252,251,239,15,132,244,247,65,129,252,251,239,15,132,
  244,253,65,129,252,251,239,15,130,244,254,252,233,244,44,248,7,133,252,246,
  15,132,244,247,255,252,233,244,248,248,8,102,15,252,239,201,102,72,15,110,
  198,102,15,46,193,15,133,244,248,248,1,76,139,28,36,73,141,44,155,248,2,139,
  69,0,76,15,182,216,76,137,223,255,249,193,232,8,15,183,216,73,139,182,252,
  248,7,0,0,73,137,252,243,73,193,252,235,32,65,129,252,251,239,15,132,244,
  247,65,129,252,251,239,15,132,244,248,65,129,252,251,239,15,132,244,248,65,
  129,252,251,239,15,132,244,253,65,129,252,251,239,15,130,244,254,252,233,
  244,45,248,7,133,252,246,15,132,244,248,255,252,233,244,247,248,8,102,15,
  252,239,201,102,72,15,110,198,102,15,46,193,15,132,244,248,248,1,76,139,28,
  36,73,141,44,155,248,2,139,69,0,76,15,182,216,76,137,223,255,249,193,232,
  8,15,183,216,76,139,28,36,73,141,44,155,139,69,0,76,15,182,216,76,137,223,
  255,249,205,3,255
};

#line 286 "src/interpreter/bytecode-interpreter.dasc"
//|.globals GLBNAME_
enum {
  GLBNAME_ValueHeapMaskStore,
  GLBNAME_ValueHeapMaskLoad,
  GLBNAME_RealZero,
  GLBNAME_InterpStart,
  GLBNAME_InterpFail,
  GLBNAME_InterpReturn,
  GLBNAME_InterpArithIntL,
  GLBNAME_InterpArithIntR,
  GLBNAME_InterpArithRealL,
  GLBNAME_InterpArithRealR,
  GLBNAME_InterpArithVV,
  GLBNAME_InterpPowFast,
  GLBNAME_InterpPowSlowIV,
  GLBNAME_InterpPowSlowRV,
  GLBNAME_InterpPowSlowVI,
  GLBNAME_InterpPowSlowVR,
  GLBNAME_InterpPowSlowVV,
  GLBNAME_DivByZero,
  GLBNAME_ModByReal,
  GLBNAME_InterpCompareIV,
  GLBNAME_InterpCompareVI,
  GLBNAME_InterpCompareRV,
  GLBNAME_InterpCompareVR,
  GLBNAME_InterpCompareVV,
  GLBNAME_InterpCompareSV,
  GLBNAME_InterpCompareVS,
  GLBNAME_InterpNegate,
  GLBNAME_InterpNot,
  GLBNAME_InterpDoCompareIV,
  GLBNAME_InterpDoCompareRV,
  GLBNAME_InterpDoCompareVI,
  GLBNAME_InterpDoCompareVR,
  GLBNAME_InterpJmpT,
  GLBNAME_InterpJmpF,
  GLBNAME_InterpAnd,
  GLBNAME_InterpOr,
  GLBNAME__MAX
};
#line 287 "src/interpreter/bytecode-interpreter.dasc"
//|.globalnames glbnames
static const char *const glbnames[] = {
  "ValueHeapMaskStore",
  "ValueHeapMaskLoad",
  "RealZero",
  "InterpStart",
  "InterpFail",
  "InterpReturn",
  "InterpArithIntL",
  "InterpArithIntR",
  "InterpArithRealL",
  "InterpArithRealR",
  "InterpArithVV",
  "InterpPowFast",
  "InterpPowSlowIV",
  "InterpPowSlowRV",
  "InterpPowSlowVI",
  "InterpPowSlowVR",
  "InterpPowSlowVV",
  "DivByZero",
  "ModByReal",
  "InterpCompareIV",
  "InterpCompareVI",
  "InterpCompareRV",
  "InterpCompareVR",
  "InterpCompareVV",
  "InterpCompareSV",
  "InterpCompareVS",
  "InterpNegate",
  "InterpNot",
  "InterpDoCompareIV",
  "InterpDoCompareRV",
  "InterpDoCompareVI",
  "InterpDoCompareVR",
  "InterpJmpT",
  "InterpJmpF",
  "InterpAnd",
  "InterpOr",
  (const char *)0
};
#line 288 "src/interpreter/bytecode-interpreter.dasc"
//|.externnames extnames
static const char *const extnames[] = {
  "PrintOP",
  "InterpreterDoArithmetic",
  "Pow",
  "InterpreterPow",
  "InterpreterDivByZero",
  "InterpreterModByReal",
  "InterpreterDoCompare",
  "InterpreterDoNegate",
  "InterpreterDoNot",
  (const char *)0
};
#line 289 "src/interpreter/bytecode-interpreter.dasc"
//|.section code,data
#define DASM_SECTION_CODE	0
#define DASM_SECTION_DATA	1
#define DASM_MAXSECTION		2
#line 290 "src/interpreter/bytecode-interpreter.dasc"

/* -------------------------------------------------------------------
 * 64 bits call
 *
 * Since 64 bits call cannot accept a imm value due to it is too long,
 * we need to generate different *types* of call instruction based on
 * the callsite
 * -------------------------------------------------------------------*/
inline bool CheckAddress( std::uintptr_t addr ) {
  static const std::uintptr_t k2G = 0x80000000;
  if(addr > 0 && addr < k2G)
    return true;
  else
    return false;
}

//|.macro fcall,FUNC
//|| if(CheckAddress(reinterpret_cast<std::uintptr_t>(FUNC))) {
//|    call extern FUNC
//|| } else {
//||   lava_warn("%s","Function FUNC address is not in 0-2GB");
//|.if 0
// I don't know whether this is faster than use rax , need profile. I see
// this one is used in MoarVM. It uses memory address to work araoud the
// address space problem. But I am kind of unsure about it since it maybe
// because MoarVM already allocate rax for other things
//|9:
//|.dword (std::uint32_t)((std::uintptr_t)(FUNC)),(std::uint32_t)((std::uintptr_t)((FUNC)>>32))
//|    call qword[<9]
//|.else
//|    mov64 rax, reinterpret_cast<std::uintptr_t>(FUNC)
//|    call rax
//|.endif
//|| }
//|.endmacro

/* ---------------------------------------------------------------
 * summary of register usage                                     |
 * --------------------------------------------------------------*/
// Runtime pointer
//|.define RUNTIME,               r12   // callee saved

// Current prototype's GCRef pointer
//|.define PROTO,                 r13   // callee saved

// Top stack's pointer
//|.define STK,                   r14   // callee saved
//|.define ACCIDX,                2040
//|.define ACCFIDX,               2044
//|.define ACC,                   STK+ACCIDX

// Dispatch table pointer
//|.define DISPATCH,              r15  // callee saved

// Bytecode array
//|.define PC,                    rbp  // callee saved

// Hold the decoded unit
//|.define INSTR,                 eax
//|.define INSTR_OP,              al
//|.define INSTR_A8,              ah
//|.define INSTR_A16,             ax

/** ------------------------------------------------------------
 *
 * NOTES: A notes on movzx/movsx instruction.
 *
 *        The movzx/movsx zero out or sign out the *whole* 64 bit
 *        register regardless the dest is a 32 bits or 64 bits
 *        register
 *
 * --------------------------------------------------------------*/

// Instruction's argument
//|.define ARG1_8,                bl
//|.define ARG1_16,               bx
//|.define ARG1,                  ebx  // must *not* be 64 bits due to we use ah

//|.define ARG2_8,                al
//|.define ARG2_16,               ax
//|.define ARG2,                  eax

//|.define ARG3_8,                cl
//|.define ARG3_16,               cx
//|.define ARG3,                  ecx

// temporary register are r10 and r11
//|.define LREG,                  rsi
//|.define LREGL,                 esi
//|.define RREG,                  rdx
//|.define RREGL,                 edx

//|.define T1,                    r11
//|.define T1L,                   r11d
//|.define T2,                    r10
//|.define T2L,                   r10d

// registers for normal C function calling ABI
//|.define CARG1,                 rdi
//|.define CARG2,                 rsi    // LREG
//|.define CARG3,                 rdx    // RREG
//|.define CARG4,                 rcx
//|.define CARG5,                 r8
//|.define CARG6,                 r9

//|.define CARG1L,                edi
//|.define CARG2L,                esi
//|.define CARG3L,                edx
//|.define CARG4L,                ecx
//|.define CARG5L,                r8d
//|.define CARG6L,                r9d

//|.define CARG1LL,               dil
//|.define CARG2LL,               sil
//|.define CARG3LL,               dl
//|.define CARG4LL,               cl
//|.define CARG5LL,               r8b
//|.define CARG6LL,               r9b

// saved callee registers plus some other important stuff
//|.define RESERVE_RSP,           64
//|.define SAVED_RBX,             [rsp+48]
//|.define SAVED_R12,             [rsp+40]
//|.define SAVED_R13,             [rsp+32]
//|.define SAVED_R14,             [rsp+24]
//|.define SAVED_R15,             [rsp+16]
//|.define SAVED_RBP,             [rsp+8]

// DO NOT MODIFY IT UNLESS YOU KNOW SHIT
//|.define SAVED_PPC,             rsp
//|.define SAVED_PC ,             [rsp]

// Used to save certain registers while we call cross the function
// boundary. Like we may call into ToBoolean function to get value
// of certain register's Boolean value and we may need to save register
// like rax which is part of our argument/operand of isntructions
//|.define SAVED_SLOT1,           [rsp+56]
//|.define SAVED_SLOT2,           [rsp+64]

/* ---------------------------------------------------------------
 * debug helper                                                  |
 * --------------------------------------------------------------*/
//|.macro Break
//|  int 3
//|.endmacro

void PrintOP( int op ) {
  lava_error("OP:%s",GetBytecodeName(static_cast<Bytecode>(op)));
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintOP)

void Print2( int a , int b ) {
  lava_error("L:%d,R:%d",a,b);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(Print2)

void PrintF( double v ) {
  lava_error("Value:%f",v);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintF)

/* ---------------------------------------------------------------
 * dispatch table                                                |
 * --------------------------------------------------------------*/
//|.macro Dispatch
//|.if 1
//|  mov INSTR,dword [PC]
//|  movzx T1,INSTR_OP
//|  mov CARG1,T1
//|  fcall PrintOP
//|.endif
//|  mov INSTR,dword [PC]
//|  movzx T1,INSTR_OP
//|  add PC,4
//|  jmp aword [DISPATCH+T1*8]
//|.endmacro

/* ---------------------------------------------------------------
 * decode each instruction's argument/operand                    |
 * --------------------------------------------------------------*/
//|.macro instr_B
//|  movzx ARG1,INSTR_A8
//|  shr INSTR,16
//|.endmacro

//|.macro instr_C
//|  shr INSTR,8
//|  movzx ARG1,INSTR_A16
//|  shr INSTR,16
//|.endmacro

//|.macro instr_D
//|  movzx ARG1,INSTR_A8
//|  shr INSTR,16
//|  movzx ARG3,INSTR_A8
//|  or ARG2,0xff
//|.endmacro

//|.macro instr_E
//|  movzx ARG1,INSTR_A8
//|  shr INSTR,16
//|.endmacro

//|.macro instr_F
//|  movzx ARG1,INSTR_A8
//|.endmacro

//|.macro instr_G
//|  shr INSTR,8
//|  movzx ARG1,INSTR_A16
//|.endmacro

//|.macro instr_X
//|.endmacro

//|.macro instr_N
//|  instr_D
//|.endmacro

/* -----------------------------------------------------------
 * Special Constant for Real                                 |
 * ----------------------------------------------------------*/
//|.macro LdRConstH,XREG,HIGH
//|  mov64 T1,(static_cast<std::uint64_t>(HIGH)<<32)
//|  movd XREG,T1
//|.endmacro

//|.macro LdRConstL,XREG,LOW
//|  mov64 T1,(static_cast<std::uint64_t>(LOW))
//|  movd XREG,T1
//|.endmacro

//|.macro LdRConst,XREG,X64V
//|  mov64 T1,X64V
//|  movd  XREG,T1
//|.endmacro

// Used to negate the double precision number's sign bit
//|.macro LdRConst_sign,XREG; LdRConstH XREG,0x80000000; .endmacro

/* -----------------------------------------------------------
 * constant loading                                          |
 * ----------------------------------------------------------*/

// Currently our constant loading is *slow* due to the design of our GC
// and also the layout of each constant array. I think we have a way to
// optimize away one memory move. LuaJIT's constant loading is just one
// single instruction since they only get one constant array and they don't
// need to worry about GC move the reference
//|.macro LdInt,reg,index
//|  mov T1,qword [PROTO]
//|  mov T1,qword [T1+PrototypeLayout::kIntTableOffset]
//|  mov reg, [T1+index*4]
//|.endmacro

// TODO:: Optimize this piece of shit
//|.macro LdIntV,reg,regL,index
//|  mov T1,qword [PROTO]
//|  mov T1,qword [T1+PrototypeLayout::kIntTableOffset]

//|.if 0
//|  mov reg, Value::FLAG_INTEGER
//|  shl reg,32
//|  or regL,dword [T1+index*4]
//|.else
//|  mov64 reg, static_cast<std::uint64_t>(Value::TAG_INTEGER)
//|  or regL,dword [T1+index*4]
//|.endif

//|.endmacro

//|.macro LdReal,reg,index
//|  mov T1,qword [PROTO]
//|  mov T1,qword [T1+PrototypeLayout::kRealTableOffset]
//|  movsd reg,qword[T1+index*8]
//|.endmacro

//|.macro LdRealV,reg,index
//|  mov T1,qword [PROTO]
//|  mov T1,qword [T1+PrototypeLayout::kRealTableOffset]
// not a xmm register
//|  mov reg,qword[T1+index*8]
//|.endmacro

//|.macro LdInt2Real,reg,index
//|  mov T1,qword [PROTO]
//|  mov T1,qword [T1+PrototypeLayout::kIntTableOffset]
//|  cvtsi2sd reg, dword [T1+index*4]
//|.endmacro

//|.macro StIntACC,reg
//|  mov dword [STK+ACCIDX],reg
//|  mov dword [STK+ACCFIDX],Value::FLAG_INTEGER
//|.endmacro

//|.macro StInt,index,reg
//|  mov dword [STK+index*8],reg
//|  mov dword [STK+index*8+4],Value::FLAG_INTEGER
//|.endmacro

//|.macro StRealACC,reg
//|  movsd qword [ACC],reg
//|.endmacro

//|.macro CheckNum,index,val,real_label,int_label
// TODO:: profile these 2 implementations
//|.if 0
//|  cmp dword[STK+index*8+4],Value::FLAG_REAL
//|  jb >real_label
//|  cmp dword[STK+index*8+4],Value::FLAG_INTEGER
//|  je >int_label
//|.else
//|  mov T1,val
//|  shr T1,32
//|  cmp T1L,Value::FLAG_REAL
//|  jb >real_label
//|  cmp T1L,Value::FLAG_INTEGER
//|  je >int_label
//|.endif
//|.endmacro

// Set a pointer into a register , this is really painful
//|.macro StHeap,reg,val

//|.if 1
//|  mov reg,Value::FLAG_HEAP
//|  shl reg,48
//|  or reg ,val
//|.else
//|  mov reg,val
//|  or  reg,qword [->ValueHeapMaskLoad]
//|.endif

//|.endmacro

// Store a pointer into memory pointed by index
//|.macro StHeapMem,index,ptr
//|  mov qword[STK+index*8]  ,ptr
//|  mov word [STK+index*8+6],Value::FLAG_HEAP
//|.endmacro

// Load a pointer from Value object , assume this object
// is a pointer type
//|.macro LdPtrFromV,dest,val
//|.if 1
//|  mov dest,Value::FLAG_HEAP_UNMASK
//|  shl dest,48
//|  or  dest,val
//|.else
//|  mov dest,val
//|  or  dest,qword [->ValueHeapLoadMask]
//|.endif
//|.endmacro

// It is painful to load a string into its Value format
//|.macro LdStrV,val,index
//|  mov T1 , qword [PROTO]
//|  mov T1 , qword [T1+PrototypeLayout::kStringTableOffset]
//|  mov T1 , qword [T1+index*8]
//|  StHeap val,T1
//|.endmacro

//|.macro LdStr,val,index
//|  mov T1 , qword [PROTO]
//|  mov T1 , qword [T1+PrototypeLayout::kStringTableOffset]
//|  mov val, qword [T1+index*8]
//|.endmacro


// --------------------------------------------------------------------------
// Check a *GCRef* is SSO or not , not stored in Value

// This is a bit pattern for SSO string , sso bit is *off* and it is a string
// so basically just TYPE_STRING stored in the corresponding bits
#define SSO_BIT_PATTERN 0x14

// reg : pointer of String
//|.macro CheckSSO,reg,fail
//|  mov reg, qword [reg]
//|  cmp dword [reg-(HeapObjectHeader::kHeapObjectHeaderSize+4)], SSO_BIT_PATTERN
//|  jne >fail
//|.endmacro

//|.macro CheckSSOV,reg,fail
//|  mov T1,reg
//|  shr T1,48
//|  cmp T1L,Value::TAG_HEAP
//|  jne >fail
//|  or  reg,qword [->ValueHeapMaskLoad]
//|  CheckSSO,reg,fail
//|.endmacro

#define INTERP_HELPER_LIST(__) \
  /* arithmetic */                           \
  __(INTERP_START,InterpStart)               \
  __(INTERP_FAIL ,InterpFail)                \
  __(INTERP_RETURN,InterpReturn)             \
  __(INTERP_ARITH_INTL,InterpArithIntL)      \
  __(INTERP_ARITH_INTR,InterpArithIntR)      \
  __(INTERP_ARITH_REALL,InterpArithRealL)    \
  __(INTERP_ARITH_REALR,InterpArithRealR)    \
  __(INTERP_ARITH_VV,InterpArithVV)          \
  __(INTERP_POW_FAST,InterpPowFast)          \
  __(INTERP_POW_SLOWVI,InterpPowSlowVI)      \
  __(INTERP_POW_SLOWIV,InterpPowSlowIV)      \
  __(INTERP_POW_SLOWVR,InterpPowSlowVR)      \
  __(INTERP_POW_SLOWRV,InterpPowSlowRV)      \
  __(INTERP_POW_SLOWVV,InterpPowSlowVV)      \
  __(DIV_BY_ZERO,DivByZero)                  \
  __(MOD_BY_REAL,ModByReal)                  \
  /* comparison */                           \
  __(INTERP_COMPAREIV,InterpCompareIV)       \
  __(INTERP_COMPAREVI,InterpCompareVI)       \
  __(INTERP_COMPARERV,InterpCompareRV)       \
  __(INTERP_COMPAREVR,InterpCompareVR)       \
  __(INTERP_COMPAREVV,InterpCompareVV)       \
  __(INTERP_COMPARESV,InterpCompareSV)       \
  __(INTERP_COMPAREVS,InterpCompareVS)       \
  /* unary */                                \
  __(INTERP_NEGATE,InterpNegate)             \
  __(INTERP_NOT,InterpNot)                   \
  /* ---- debug helper ---- */               \
  __(PRINT_OP,PrintOP)                       \
  __(PRINT2  ,Print2 )                       \
  __(PRINTF  ,PrintF )

enum {
  INTERP_HELPER_DUMMY = SIZE_OF_BYTECODE,

#define __(A,B) A,
  INTERP_HELPER_LIST(__)
#undef __

  DASM_GROWABLE_PC_SIZE
};

#define INTERP_HELPER_START (INTERP_HELPER_DUMMY+1)
#define INTERP_HELPER_SIZE (DASM_GROWABLE_PC_SIZE-INTERP_HELPER_ROUTINE_ENUM-1)

const char* GetInterpHelperName( int idx ) {
  switch(idx) {
#define __(A,B) case A: return #B;
    INTERP_HELPER_LIST(__)
    default:
      lava_unreachF("unknown helper with index:%d",idx);
      return NULL;
#undef __ // __
  }
}

/* -----------------------------------------------------------
 * Macro Interfaces for Dynasm                               |
 * ----------------------------------------------------------*/
#define Dst (&(bctx->dasm_ctx))

/* -----------------------------------------------------------
 * Interpreter Prolog                                        |
 * ----------------------------------------------------------*/
void GenerateInterpMisc( BuildContext* bctx ) {
  /* -------------------------------------------
   * Constant value needed for the interpreter |
   * ------------------------------------------*/
  //|.data
  dasm_put(Dst, 0);
#line 753 "src/interpreter/bytecode-interpreter.dasc"
  //|->ValueHeapMaskStore:
  //|.dword Value::TAG_HEAP_STORE_MASK_HIGHER,Value::TAG_HEAP_STORE_MASK_LOWER
  dasm_put(Dst, 2, Value::TAG_HEAP_STORE_MASK_HIGHER, Value::TAG_HEAP_STORE_MASK_LOWER);
#line 755 "src/interpreter/bytecode-interpreter.dasc"

  //|->ValueHeapMaskLoad:
  //|.dword Value::TAG_HEAP_LOAD_MASK_HIGHER,Value::TAG_HEAP_LOAD_MASK_LOWER
  dasm_put(Dst, 7, Value::TAG_HEAP_LOAD_MASK_HIGHER, Value::TAG_HEAP_LOAD_MASK_LOWER);
#line 758 "src/interpreter/bytecode-interpreter.dasc"

  //|->RealZero:
  //|.dword 0,0
  dasm_put(Dst, 12);
#line 761 "src/interpreter/bytecode-interpreter.dasc"

  //|.code
  dasm_put(Dst, 23);
#line 763 "src/interpreter/bytecode-interpreter.dasc"
  /* -------------------------------------------
   * Start of the code                         |
   * ------------------------------------------*/

  //|.macro interp_prolog
  //|  sub   rsp, RESERVE_RSP             // make room on the stack

  //|  mov qword SAVED_R12,r12            // runtime
  //|  mov qword SAVED_R13,r13            // proto
  //|  mov qword SAVED_R14,r14            // stack
  //|  mov qword SAVED_R15,r15            // dispatch
  //|  mov qword SAVED_RBP,rbp            // PC
  //|  mov qword SAVED_RBX,rbx            // used by ARG2 , this may be changed in the future
  //|.endmacro

  //|.macro interp_epilog
  //|  mov r12, qword SAVED_R12
  //|  mov r13, qword SAVED_R13
  //|  mov r14, qword SAVED_R14
  //|  mov r15, qword SAVED_R15
  //|  mov rbp, qword SAVED_RBP
  //|  mov rbx, qword SAVED_RBX

  //|  add rsp, RESERVE_RSP
  //|.endmacro

  /* -------------------------------------------
   * Interpreter Prolog                        |
   * ------------------------------------------*/
  //|=> INTERP_START:
  //|->InterpStart:
  dasm_put(Dst, 25,  INTERP_START);
#line 794 "src/interpreter/bytecode-interpreter.dasc"
  // save all callee saved register since we use them to keep tracking of
  // our most important data structure
  //|  interp_prolog
  dasm_put(Dst, 29);
#line 797 "src/interpreter/bytecode-interpreter.dasc"

  //|  mov RUNTIME ,CARG1   // runtime
  //|  mov PROTO   ,CARG2   // proto
  //|  mov STK     ,CARG3   // stack
  //|  mov PC      ,CARG4   // pc
  //|  mov DISPATCH,CARG5   // dispatch
  dasm_put(Dst, 65);
#line 803 "src/interpreter/bytecode-interpreter.dasc"

  //|  mov qword SAVED_PC,CARG4           // save the *start* of bc array
  dasm_put(Dst, 83);
#line 805 "src/interpreter/bytecode-interpreter.dasc"
  // run
  //|  Dispatch
  dasm_put(Dst, 88);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 807 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------
   * Interpreter exit handler                  |
   * ------------------------------------------*/
  //|=> INTERP_FAIL:
  //|->InterpFail:
  //|  xor rax,rax
  dasm_put(Dst, 129,  INTERP_FAIL);
#line 814 "src/interpreter/bytecode-interpreter.dasc"

  //|  interp_epilog
  //|  ret
  dasm_put(Dst, 136);
#line 817 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_RETURN:
  //|->InterpReturn:
  //|  mov rax, qword [ACC]
  //|  mov qword [RUNTIME+RuntimeLayout::kRetOffset],rax
  //|  mov rax,1
  dasm_put(Dst, 172,  INTERP_RETURN, RuntimeLayout::kRetOffset);
#line 823 "src/interpreter/bytecode-interpreter.dasc"

  //|  interp_epilog
  //|  ret
  dasm_put(Dst, 136);
#line 826 "src/interpreter/bytecode-interpreter.dasc"
}

/* ------------------------------------------
 * helper functions/routines generation     |
 * -----------------------------------------*/
void GenerateHelper( BuildContext* bctx ) {
  /* ----------------------------------------
   * InterpArithXXX                         |
   * ---------------------------------------*/
  //|.macro handle_ret_acc
  //|  mov T1,rax
  //|  shr T1,32
  //|  cmp T1,VALUE_FAIL
  //|  je ->InterpFail
  //|  mov qword [ACC], rax
  //|  Dispatch
  //|.endmacro

  //|=> INTERP_ARITH_INTL:
  //|->InterpArithIntL:
  //|  mov CARG1,RUNTIME
  //|  LdIntV CARG2,CARG2L,ARG1
  //|  movzx CARG4L,byte [PC-4]
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 197,  INTERP_ARITH_INTL, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 225);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 850 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 851 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_INTR:
  //|->InterpArithIntR:
  //|  mov CARG1,RUNTIME
  //|  LdIntV CARG3,CARG3L,ARG2
  //|  movzx CARG4L,byte [PC-4]
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 266,  INTERP_ARITH_INTR, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 225);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 858 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 859 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_REALL:
  //|->InterpArithRealL:
  //|  mov CARG1,RUNTIME
  //|  LdRealV CARG2,ARG1
  //|  movzx CARG4L,byte [PC-4]
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 294,  INTERP_ARITH_REALL, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 225);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 866 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 867 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_REALR:
  //|->InterpArithRealR:
  //|  mov CARG1,RUNTIME
  //|  LdRealV CARG3,ARG2
  //|  movzx CARG4L,byte [PC-4]
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 318,  INTERP_ARITH_REALR, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 225);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 874 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 875 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_ARITH_VV:
  //|->InterpArithVV:
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1*8]
  //|  mov CARG3, qword [STK+ARG2*8]
  //|  movzx CARG4L,byte [PC-4]
  //|  fcall InterpreterDoArithmetic
  dasm_put(Dst, 342,  INTERP_ARITH_VV);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))) {
  dasm_put(Dst, 225);
   } else {
     lava_warn("%s","Function InterpreterDoArithmetic address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoArithmetic))>>32));
   }
#line 883 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 884 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_FAST:
  //|->InterpPowFast:
  //|  fcall Pow
  dasm_put(Dst, 362,  INTERP_POW_FAST);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(Pow))) {
  dasm_put(Dst, 366);
   } else {
     lava_warn("%s","Function Pow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(Pow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(Pow))>>32));
   }
#line 888 "src/interpreter/bytecode-interpreter.dasc"
  //|  movsd qword [ACC],xmm0
  //|  Dispatch
  dasm_put(Dst, 371);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 890 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWIV:
  //|->InterpPowSlowIV:
  //|  mov CARG1, RUNTIME
  //|  LdIntV CARG2,CARG2L,ARG1
  //|  mov CARG3,qword [STK+ARG2*8]
  //|  movzx CARG4L,byte  [PC-4]
  //|  fcall InterpreterPow
  dasm_put(Dst, 393,  INTERP_POW_SLOWIV, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 425);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 898 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 899 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWRV:
  //|->InterpPowSlowRV:
  //|  mov CARG1, RUNTIME
  //|  LdRealV CARG2,ARG1
  //|  mov CARG3,qword [STK+ARG2*8]
  //|  movzx CARG4L,byte[PC-4]
  //|  fcall InterpreterPow
  dasm_put(Dst, 430,  INTERP_POW_SLOWRV, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 425);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 907 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 908 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWVI:
  //|->InterpPowSlowVI:
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1*8]
  //|  LdIntV CARG3,CARG3L,ARG2
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterPow
  dasm_put(Dst, 458,  INTERP_POW_SLOWVI, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 425);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 916 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 917 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWVR:
  //|->InterpPowSlowVR:
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1*8]
  //|  LdRealV CARG3,ARG2
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterPow
  dasm_put(Dst, 490,  INTERP_POW_SLOWVR, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 425);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 925 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 926 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_POW_SLOWVV:
  //|->InterpPowSlowVV:
  //|  mov CARG1, RUNTIME
  //|  mov CARG2,qword [STK+ARG1*8]
  //|  LdRealV CARG3,ARG2
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterPow
  dasm_put(Dst, 518,  INTERP_POW_SLOWVV, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterPow))) {
  dasm_put(Dst, 425);
   } else {
     lava_warn("%s","Function InterpreterPow address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterPow)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterPow))>>32));
   }
#line 934 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 935 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------
   * Interp Arithmetic Exception               |
   * ------------------------------------------*/
  //|=> DIV_BY_ZERO:
  //|->DivByZero:
  //|  mov CARG1,RUNTIME
  //|  lea CARG2,[PC-4]
  //|  fcall InterpreterDivByZero
  dasm_put(Dst, 546,  DIV_BY_ZERO);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDivByZero))) {
  dasm_put(Dst, 558);
   } else {
     lava_warn("%s","Function InterpreterDivByZero address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDivByZero)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDivByZero))>>32));
   }
#line 944 "src/interpreter/bytecode-interpreter.dasc"
  //|  jmp ->InterpFail
  dasm_put(Dst, 563);
#line 945 "src/interpreter/bytecode-interpreter.dasc"

  //|=> MOD_BY_REAL:
  //|->ModByReal:
  //|  mov CARG1,RUNTIME
  //|  lea CARG2,[PC-4]
  //|  fcall InterpreterModByReal
  dasm_put(Dst, 568,  MOD_BY_REAL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterModByReal))) {
  dasm_put(Dst, 580);
   } else {
     lava_warn("%s","Function InterpreterModByReal address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterModByReal)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterModByReal))>>32));
   }
#line 951 "src/interpreter/bytecode-interpreter.dasc"
  //|  jmp ->InterpFail
  dasm_put(Dst, 563);
#line 952 "src/interpreter/bytecode-interpreter.dasc"


  /* -------------------------------------------
   * Interp Comparison                         |
   * ------------------------------------------*/
  //|=> INTERP_COMPAREIV:
  //|->InterpCompareIV:
  //|  mov CARG1,RUNTIME
  //|  LdIntV CARG2,CARG2L,ARG1
  //|  mov CARG3, qword [STK+ARG2*8]
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 585,  INTERP_COMPAREIV, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 964 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 965 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVI:
  //|->InterpCompareVI:
  //|  mov CARG1,RUNTIME
  //|  mov CARG2, qword [STK+ARG1*8]
  //|  LdIntV CARG3,CARG3L,ARG2
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 622,  INTERP_COMPAREVI, PrototypeLayout::kIntTableOffset, (unsigned int)(static_cast<std::uint64_t>(Value::TAG_INTEGER)), (unsigned int)((static_cast<std::uint64_t>(Value::TAG_INTEGER))>>32));
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 973 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 974 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPARERV:
  //|->InterpCompareRV:
  //|  mov CARG1,RUNTIME
  //|  LdRealV CARG2,ARG2
  //|  mov CARG3, qword [STK+ARG2*8]
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 654,  INTERP_COMPARERV, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 982 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 983 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVR:
  //|->InterpCompareVR:
  //|  mov CARG1,RUNTIME
  //|  mov CARG2,qword [STK+ARG1*8]
  //|  LdRealV CARG3,ARG2
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 682,  INTERP_COMPAREVR, PrototypeLayout::kRealTableOffset);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 991 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 992 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVV:
  //|->InterpCompareVV:
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1*8]
  //|  mov CARG3, qword [STK+ARG2*8]
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 710,  INTERP_COMPAREVV);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1000 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1001 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPARESV:
  //|->InterpCompareSV:
  //|  mov CARG1, RUNTIME
  //|  LdStrV CARG2,ARG1
  //|  mov CARG2, qword [STK+ARG2*8]
  //|  movzx CARG4L, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 730,  INTERP_COMPARESV, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1009 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1010 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_COMPAREVS:
  //|->InterpCompareVS:
  //|  mov CARG1, RUNTIME
  //|  mov CARG2, qword [STK+ARG1*8]
  //|  LdStrV CARG3,ARG2
  //|  movzx CARG4, byte [PC-4]
  //|  fcall InterpreterDoCompare
  dasm_put(Dst, 769,  INTERP_COMPAREVS, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))) {
  dasm_put(Dst, 617);
   } else {
     lava_warn("%s","Function InterpreterDoCompare address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoCompare)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoCompare))>>32));
   }
#line 1018 "src/interpreter/bytecode-interpreter.dasc"
  //|  handle_ret_acc
  dasm_put(Dst, 230, VALUE_FAIL);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1019 "src/interpreter/bytecode-interpreter.dasc"

  /* -------------------------------------------------
   * Unary                                           |
   * ------------------------------------------------*/
  //|=> INTERP_NEGATE:
  //|->InterpNegate:
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, qword [STK+ARG1*8]
  //|  fcall InterpreterDoNegate
  dasm_put(Dst, 809,  INTERP_NEGATE);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoNegate))) {
  dasm_put(Dst, 820);
   } else {
     lava_warn("%s","Function InterpreterDoNegate address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoNegate)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoNegate))>>32));
   }
#line 1028 "src/interpreter/bytecode-interpreter.dasc"
  // return value is a *boolean*
  //|  test al,al
  //|  jmp ->InterpFail
  //|  Dispatch
  dasm_put(Dst, 825);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1032 "src/interpreter/bytecode-interpreter.dasc"

  //|=> INTERP_NOT:
  //|->InterpNot:
  //|  mov CARG1, RUNTIME
  //|  lea CARG2, qword [STK+ARG1*8]
  //|  fcall InterpreterDoNot
  dasm_put(Dst, 842,  INTERP_NOT);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(InterpreterDoNot))) {
  dasm_put(Dst, 853);
   } else {
     lava_warn("%s","Function InterpreterDoNot address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(InterpreterDoNot)), (unsigned int)((reinterpret_cast<std::uintptr_t>(InterpreterDoNot))>>32));
   }
#line 1038 "src/interpreter/bytecode-interpreter.dasc"
  //|  test al,al
  //|  jmp ->InterpFail
  //|  Dispatch
  dasm_put(Dst, 825);
   if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
  dasm_put(Dst, 99);
   } else {
     lava_warn("%s","Function PrintOP address is not in 0-2GB");
  dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
   }
  dasm_put(Dst, 112);
#line 1041 "src/interpreter/bytecode-interpreter.dasc"

}

void GenerateOneBytecode( BuildContext* bctx, Bytecode bc ) {
  // hack around idiv operator which are used to implement the
  // BC_MODXX and BC_DIVXX instruction. It has a different format
  // and different result/output
  bool arith_div = false;
  bool arith_mod = false;

  switch(bc) {
    /** =====================================================
     *  Call handling                                       |
     *  ====================================================*/
    case BC_RETNULL:
      //|=> bc:
      //|  instr_X
      //|  mov dword [STK+ACCFIDX],Value::FLAG_NULL
      //|  jmp ->InterpReturn
      dasm_put(Dst, 858,  bc, Value::FLAG_NULL);
#line 1060 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_RET:
      //|=> bc:
      //|  instr_X
      //|  jmp ->InterpReturn
      dasm_put(Dst, 873,  bc);
#line 1066 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /** =====================================================
     *  Register Move                                       |
     *  ====================================================*/
    case BC_MOVE:
      //|=> bc:
      //|  instr_E
      //|  mov T1,qword [STK+ARG2*8]
      //|  mov qword [STK+ARG1*8],T1
      //|  Dispatch
      dasm_put(Dst, 879,  bc);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1077 "src/interpreter/bytecode-interpreter.dasc"
      break;
    /** =====================================================
     *  Constant Loading                                    |
     *  ====================================================*/
    case BC_LOADI:
      //|=> bc:
      //|  instr_B
      //|  LdInt LREGL,ARG2
      //|  StInt ARG1,LREGL
      //|  Dispatch
      dasm_put(Dst, 905,  bc, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1087 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOAD0:
      //|=> bc:
      //|  instr_F
      //|  StInt ARG1,0
      //|  Dispatch
      dasm_put(Dst, 945,  bc, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1094 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOAD1:
      //|=> bc:
      //|  instr_F
      //|  StInt ARG1,1
      //|  Dispatch
      dasm_put(Dst, 974,  bc, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1101 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADN1:
      //|=> bc:
      //|  instr_F
      //|  StInt ARG1,-1
      //|  Dispatch
      dasm_put(Dst, 1003,  bc, Value::FLAG_INTEGER);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1108 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADR:
      //|=> bc:
      //|  instr_B
      //|  LdReal xmm0,ARG2
      //|  movsd qword [STK+ARG1*8],xmm0
      //|  Dispatch
      dasm_put(Dst, 1036,  bc, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1116 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADNULL:
      //|=> bc:
      //|  instr_F
      //|  mov dword [STK+ARG1*8+4],Value::FLAG_NULL
      //|  Dispatch
      dasm_put(Dst, 1076,  bc, Value::FLAG_NULL);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1123 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADTRUE:
      //|=> bc:
      //|  instr_F
      //|  mov dword [STK+ARG1*8+4],Value::FLAG_TRUE
      //|  Dispatch
      dasm_put(Dst, 1076,  bc, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1130 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADFALSE:
      //|=> bc:
      //|  instr_F
      //|  mov dword [STK+ARG1*8+4],Value::FLAG_FALSE
      //|  Dispatch
      dasm_put(Dst, 1076,  bc, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1137 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_LOADSTR:
      //|=> bc:
      //|  instr_B
      //|  LdStrV LREG,ARG2
      //|  mov qword [STK+ARG1*8],LREG
      //|  Dispatch
      dasm_put(Dst, 1097,  bc, PrototypeLayout::kStringTableOffset, Value::FLAG_HEAP);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1145 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /** =====================================================
     *  Arith XV                                            |
     *  ====================================================*/
    //|.macro arith_xv_pre,BC,SlowPath
    //|  instr_C
    //|  mov RREG,qword [STK+ARG2*8]
    //|  CheckNum ARG2,RREG,1,2
    //|  jmp ->SlowPath
    //|.endmacro

    //|.macro arith_iv_real,instr
    //|  LdInt2Real xmm0,ARG1
    //|  movd xmm1,RREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_rv_real,instr
    //|  LdReal xmm0,ARG1
    //|  movd xmm1,RREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_iv_do_div
    //|  mov T1L,dword [STK+ARG2*8]
    //|  LdInt eax,ARG1
    //|.if 1
    //|  test eax,eax
    //|  je ->DivByZero
    //|.endif
    //|  cdq
    //|  idiv T1L
    //|.endmacro

    //|.macro arith_iv_int,instr
    //|| if( arith_div ) {
    //|    arith_iv_do_div
    //|    StIntACC eax
    //|| } else if( arith_mod ) {
    //|    arith_iv_do_div
    //|    StIntACC edx
    //|| } else {
    //|    LdInt LREGL,ARG1
    //|    instr LREGL,RREGL
    //|    StIntACC LREGL
    //|| }
    //|  Dispatch
    //|.endmacro

    //|.macro arith_rv_int,instr
    //|  LdReal xmm0,ARG1
    //|  cvtsi2sd xmm1, RREGL
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    case BC_ADDIV:
      //|=> bc:
      //|  arith_xv_pre BC_ADDIV,InterpArithIntL
      //|1:
      //|  arith_iv_real,addsd
      dasm_put(Dst, 1142,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1212 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_iv_int,add
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 1254, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if( arith_mod ) {
      dasm_put(Dst, 1300, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 1346, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1214 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_ADDRV:
      //|=>bc:
      //|  arith_xv_pre BC_ADDRV,InterpArithRealL
      //|1:
      //|  arith_rv_real,addsd
      dasm_put(Dst, 1378, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1221 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_rv_int,addsd
      dasm_put(Dst, 1471, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1223 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBIV:
      //|=>bc:
      //|  arith_xv_pre BC_SUBIV,InterpArithIntL
      //|1:
      //|  arith_iv_real,subsd
      dasm_put(Dst, 1536, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1230 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_iv_int ,sub
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 1254, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if( arith_mod ) {
      dasm_put(Dst, 1300, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 1629, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1232 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBRV:
      //|=>bc:
      //|  arith_xv_pre BC_SUBRV,InterpArithRealL
      //|1:
      //|  arith_rv_real,subsd
      dasm_put(Dst, 1661, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1239 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_rv_int ,subsd
      dasm_put(Dst, 1754, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1241 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULIV:
      //|=>bc:
      //|  arith_xv_pre BC_MULIV,InterpArithIntL
      //|1:
      //|  arith_iv_real,mulsd
      dasm_put(Dst, 1819, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1248 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_iv_int,imul
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 1254, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if( arith_mod ) {
      dasm_put(Dst, 1300, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 1912, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1250 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULRV:
      //|=>bc:
      //|  arith_xv_pre BC_MULRV,InterpArithRealL
      //|1:
      //|  arith_rv_real,mulsd
      dasm_put(Dst, 1946, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1257 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_rv_int,mulsd
      dasm_put(Dst, 2039, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1259 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVIV:
      arith_div = true;
      //|=>bc:
      //|  arith_xv_pre BC_DIVIV,InterpArithIntL
      //|1:
      //|  arith_iv_real,mulsd
      dasm_put(Dst, 1819, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1267 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_iv_int,imul
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 1254, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if( arith_mod ) {
      dasm_put(Dst, 1300, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 1912, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1269 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVRV:
      arith_div = true;
      //|=>bc:
      //|  arith_xv_pre BC_DIVRV,InterpArithRealL
      //|1:
      //|  arith_rv_real,divsd
      dasm_put(Dst, 2104, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1277 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_rv_int,divsd
      dasm_put(Dst, 2197, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1279 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MODIV:
      arith_mod = true;
      //|=>bc:
      //|  arith_xv_pre BC_MODIV,InterpArithIntL
      //|1:
      //|  jmp ->ModByReal
      //|2:
      //|  arith_iv_int,imul
      dasm_put(Dst, 2262, bc, Value::FLAG_REAL, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 1254, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if( arith_mod ) {
      dasm_put(Dst, 1300, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 1912, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1289 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* =========================================================
     * Arith VX                                                |
     * ========================================================*/
    //|.macro arith_vx_pre,BC,SlowPath
    //|  instr_B
    //|  mov LREG,qword [STK+ARG1*8]
    //|  CheckNum ARG1,LREG,1,2
    //|  jmp ->SlowPath
    //|.endmacro

    //|.macro arith_vi_real,instr
    //|  LdInt2Real xmm1,ARG2
    //|  movd xmm0,LREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_vi_do_div
    //|.if 1
    //|  test LREGL,LREGL
    //|  jmp ->DivByZero
    //|.endif
    //|  LdInt T1L,ARG2
    //|  mov eax,LREGL
    //|  cdq
    //|  idiv T1L
    //|.endmacro

    //|.macro arith_vi_int,instr
    //|| if( arith_div ) {
    //|    arith_vi_do_div
    //|    StIntACC eax
    //|| } else if(arith_mod) {
    //|    LdInt T1L,ARG2
    //|    arith_vi_do_div
    //|    StIntACC edx
    //|| } else {
    //|    LdInt RREGL,ARG2
    //|    instr LREGL,RREGL
    //|    StIntACC LREGL
    //|| }
    //|  Dispatch
    //|.endmacro

    //|.macro arith_vr_real,instr
    //|  LdReal xmm1, ARG2
    //|  movd xmm0,LREG
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    //|.macro arith_vr_int,instr
    //|  LdReal xmm1,ARG2
    //|  cvtsi2sd xmm0, LREGL
    //|  instr xmm0,xmm1
    //|  StRealACC xmm0
    //|  Dispatch
    //|.endmacro

    case BC_ADDVI:
      //|=> bc:
      //|  arith_vx_pre BC_ADDVI,InterpArithIntR
      //|1:
      //|  arith_vi_real addsd
      dasm_put(Dst, 2315,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1357 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vi_int  add
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 2406, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if(arith_mod) {
      dasm_put(Dst, 2452, PrototypeLayout::kIntTableOffset, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 2510, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1359 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_ADDVR:
      //|=> bc:
      //|  arith_vx_pre BC_ADDVR,InterpArithRealR
      //|1:
      //|  arith_vr_real addsd
      dasm_put(Dst, 2542,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1366 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vr_int addsd
      dasm_put(Dst, 2633, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1368 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBVI:
      //|=> bc:
      //|  arith_vx_pre BC_SUBVI,InterpArithIntR
      //|1:
      //|  arith_vi_real subsd
      dasm_put(Dst, 2698,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1375 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vi_int sub
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 2406, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if(arith_mod) {
      dasm_put(Dst, 2452, PrototypeLayout::kIntTableOffset, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 2789, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1377 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_SUBVR:
      //|=> bc:
      //|  arith_vx_pre BC_SUBVR,InterpArithRealR
      //|1:
      //|  arith_vr_real subsd
      dasm_put(Dst, 2821,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1384 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vr_int subsd
      dasm_put(Dst, 2912, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1386 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULVI:
      //|=> bc:
      //|  arith_vx_pre BC_MULVI,InterpArithIntR
      //|1:
      //|  arith_vi_real mulsd
      dasm_put(Dst, 2977,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1393 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vi_int imul
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 2406, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if(arith_mod) {
      dasm_put(Dst, 2452, PrototypeLayout::kIntTableOffset, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3068, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1395 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MULVR:
      //|=> bc:
      //|  arith_vx_pre BC_MULVR,InterpArithRealR
      //|1:
      //|  arith_vr_real mulsd
      dasm_put(Dst, 3102,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1402 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vr_real mulsd
      dasm_put(Dst, 3193, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1404 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVVI:
      //|=> bc:
      dasm_put(Dst, 3258,  bc);
#line 1408 "src/interpreter/bytecode-interpreter.dasc"
      arith_div = true;
      //|  arith_vx_pre BC_DIVVI,InterpArithIntR
      //|1:
      //|  arith_vi_real divsd
      dasm_put(Dst, 3260, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1412 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vi_int sub
      dasm_put(Dst, 1235);
       if( arith_div ) {
      dasm_put(Dst, 2406, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if(arith_mod) {
      dasm_put(Dst, 2452, PrototypeLayout::kIntTableOffset, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 2789, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1414 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_DIVVR:
      //|=> bc:
      //|  arith_vx_pre BC_DIVVR,InterpArithRealR
      //|1:
      //|  arith_vr_real divsd
      dasm_put(Dst, 3350,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1421 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  arith_vr_int divsd
      dasm_put(Dst, 3441, PrototypeLayout::kRealTableOffset);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1423 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_MODVI:
      arith_mod = true;
      //|=> bc:
      //|  arith_vx_pre BC_MODVI,InterpArithIntR
      //|1:
      //|  jmp ->ModByReal
      //|2:
      //|  arith_vi_int imul
      dasm_put(Dst, 3506,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 2406, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else if(arith_mod) {
      dasm_put(Dst, 2452, PrototypeLayout::kIntTableOffset, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3068, PrototypeLayout::kIntTableOffset, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1433 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* ========================================================
     * ArithVV
     *
     * The arithVV is also optimized for common path here.
     * We inline all numeric calculation cases, int/real.
     * Other cases will be pushed back to call C++ function
     * which may be extended to support meta function call
     * ========================================================*/
    //|.macro arith_vv_do_div
    //|  shr RREG,32
    //|  shr LREG,32
    //|  mov T1L,RREGL
    //|  mov eax,LREGL
    //|.if 1
    //|  test eax,eax
    //|  je ->DivByZero
    //|.endif
    //|  cdq
    //|  idiv T1L
    //|.endmacro

    // perform VV calaculation based on instruction
    //|.macro arith_vv,BC,instrI,setterI,instrR,setterR
    //|=> BC:
    //|  instr_E
    //|  mov LREG,qword [STK+ARG1*8]
    //|  mov RREG,qword [STK+ARG2*8]

    // here we will do a type check and also promotion
    //|  cmp LREGL,Value::FLAG_INTEGER
    //|  jne >1

    //| // int && xx
    //|  cmp RREGL,Value::FLAG_INTEGER
    //|  jne >4
    // int && int
    //|| if( arith_div ) {
         // order matters
    //|    arith_vv_do_div
    //|    setterI eax
    //|| } else if (arith_mod) {
         // order matters
    //|    arith_vv_do_div
    //|    setterI edx
    //|| } else {
    //|    mov     LREGL,dword [STK+ARG1*8]
    //|    instrI  LREGL,dword [STK+ARG2*8]
    //|    setterI LREGL
    //|| }
    //|  Dispatch

    //|1:
    //|  cmp RREGL,Value::FLAG_REAL
    //|  jnb >6

    // real && xx
    //|  cmp RREGL,Value::FLAG_REAL
    //|  jb >5  // real && real
    //|  cmp RREGL,Value::FLAG_INTEGER
    //|  jne >6 // cannot handle

    // promoting RHS->real
    //|  shr RREG,32
    //|  cvtsi2sd xmm1,RREGL
    //|  movd xmm0,LREG
    //|  jmp >5


    //|4: // int && xx
    //|  cmp RREGL,Value::FLAG_REAL
    //|  jnb >6 // cannot handle
    // promoting LHS->real
    //|  shr LREG,32
    //|  cvtsi2sd xmm0,LREGL
    //|  movd xmm1,RREG

    // real && real
    //|5:
    //|| if( arith_mod ) {
    //|    jmp ->ModByReal
    //|| } else {
    //|    instrR  xmm0,xmm1
    //|    setterR xmm0
    //|| }
    //|  Dispatch

    // slow path
    //|6:
    //|  jmp ->InterpArithVV


    //|.endmacro

    case BC_ADDVV:
      //|  arith_vv BC_ADDVV,add,StIntACC,addsd,StRealACC
      dasm_put(Dst, 3557,  BC_ADDVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3589, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 3635, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3681, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3707, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 3796);
       } else {
      dasm_put(Dst, 3801);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3818);
#line 1530 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_SUBVV:
      //|  arith_vv BC_SUBVV,sub,StIntACC,subsd,StRealACC
      dasm_put(Dst, 3557,  BC_SUBVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3589, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 3635, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3841, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3707, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 3796);
       } else {
      dasm_put(Dst, 3867);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3818);
#line 1533 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_MULVV:
      //|  arith_vv BC_MULVV,imul,StIntACC,mulsd,StRealACC
      dasm_put(Dst, 3557,  BC_MULVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3589, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 3635, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3884, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3707, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 3796);
       } else {
      dasm_put(Dst, 3911);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3818);
#line 1536 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_DIVVV:
      arith_div = true;
      //|  arith_vv BC_DIVVV,imul,StIntACC,divsd,StRealACC
      dasm_put(Dst, 3557,  BC_DIVVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3589, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 3635, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3884, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3707, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 3796);
       } else {
      dasm_put(Dst, 3928);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3818);
#line 1540 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_MODVV:
      arith_mod = true;
      //|  arith_vv BC_MODVV,imul,StIntACC,divsd,StRealACC
      dasm_put(Dst, 3557,  BC_MODVV, Value::FLAG_INTEGER, Value::FLAG_INTEGER);
       if( arith_div ) {
      dasm_put(Dst, 3589, Value::FLAG_INTEGER);
       } else if (arith_mod) {
      dasm_put(Dst, 3635, Value::FLAG_INTEGER);
       } else {
      dasm_put(Dst, 3884, Value::FLAG_INTEGER);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3707, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL);
       if( arith_mod ) {
      dasm_put(Dst, 3796);
       } else {
      dasm_put(Dst, 3928);
       }
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 3818);
#line 1544 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* ==============================================================
     * POW part
     *
     * Currently we directly use std::pow/pow in libc for simplicity.
     * For numeric type we will directly call pow for other types
     * we will fallback to slow C++ function
     * =============================================================*/

    //|.macro pow_promo,REGL,XREG,ARG
    //|  mov REGL,dword [STK+ARG*8+4]
    //|  cmp REGL,Value::FLAG_REAL
    //|  jb >1
    //|  cmp REGL,Value::FLAG_INTEGER
    //|  jne >2
    //|  cvtsi2sd XREG,qword [STK+ARG*8]
    //|.endmacro

    case BC_POWIV:
      //|=> bc:
      //|  instr_C
      //|  LdInt2Real,xmm0,ARG1
      //|  pow_promo,RREGL,xmm1,ARG2
      //|1:
      //|  jmp ->InterpPowFast
      //|2:
      //|  jmp ->InterpPowSlowIV
      dasm_put(Dst, 3945,  bc, PrototypeLayout::kIntTableOffset, Value::FLAG_REAL, Value::FLAG_INTEGER);
#line 1572 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWVI:
      //|=> bc:
      //|  instr_B
      //|  LdInt2Real,xmm1,ARG2
      //|  pow_promo,LREGL,xmm0,ARG1
      //|1:
      //|  jmp ->InterpPowFast
      //|2:
      //|  jmp ->InterpPowSlowVI
      dasm_put(Dst, 4011,  bc, PrototypeLayout::kIntTableOffset, Value::FLAG_REAL, Value::FLAG_INTEGER);
#line 1583 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWRV:
      //|=> bc:
      //|  instr_C
      //|  LdReal xmm0,ARG1
      //|  pow_promo RREGL,xmm1,ARG2
      //|1:
      //|  jmp ->InterpPowFast
      //|2:
      //|  jmp ->InterpPowSlowRV
      dasm_put(Dst, 4074,  bc, PrototypeLayout::kRealTableOffset, Value::FLAG_REAL, Value::FLAG_INTEGER);
#line 1594 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWVR:
      //|=> bc:
      //|  instr_C
      //|  LdReal xmm1,ARG2
      //|  pow_promo LREGL,xmm0,ARG1
      //|1:
      //|  jmp ->InterpPowFast
      //|2:
      //|  jmp ->InterpPowSlowVR
      dasm_put(Dst, 4140,  bc, PrototypeLayout::kRealTableOffset, Value::FLAG_REAL, Value::FLAG_INTEGER);
#line 1605 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_POWVV:
      //|=> bc:
      //|  instr_C
      //|  jmp ->InterpPowSlowVV
      dasm_put(Dst, 4206,  bc);
#line 1611 "src/interpreter/bytecode-interpreter.dasc"
      break;


    /* ====================================================================
     * Comparison
     *
     * Inline numeric comparison and also do promotion inline
     * ===================================================================*/

    /* --------------------------------------------------------------------
     * Comparison XV                                                      |
     * -------------------------------------------------------------------*/
    // pre-phase of each comparison
    //|.macro comp_xv_pre,BC,SlowPath
    //|  instr_C
    //|  mov RREG,qword [STK+ARG2*8]
    //|  CheckNum ARG2,RREG,1,2
    //|  jmp ->SlowPath
    //|.endmacro

    //|.macro comp_cmp_real,instr
    //|  mov T1L, Value::FLAG_FALSE
    //|  mov T2L, Value::FLAG_TRUE
    //|  ucomisd xmm0,xmm1
    //|  instr T1L, T2L
    //|  mov dword [STK+ACCFIDX], T1L
    //|.endmacro

    //|.macro comp_cmp_int,instr
    //|  mov T1L, Value::FLAG_FALSE
    //|  mov T2L, Value::FLAG_TRUE
    //|  cmp LREGL,RREGL
    //|  instr T1L, T2L
    //|  mov dword [STK+ACCFIDX], T1L
    //|.endmacro

    // real/int part for iv/rv
    //|.macro comp_iv_real,instr
    //|  LdInt2Real xmm0,ARG1
    //|  movd xmm1,RREG
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.endmacro

    //|.macro comp_iv_int,instr
    //|  LdInt LREGL,ARG1
    //|  comp_cmp_int,instr
    //|  Dispatch
    //|.endmacro

    //|.macro comp_rv_real,instr
    //|  LdReal xmm0,ARG1
    //|  movsd xmm1,qword [STK+ARG2*8]
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.endmacro

    //|.macro comp_rv_int,instr
    //|  LdReal xmm0,ARG1
    //|  cvtsi2sd xmm1,dword [STK+ARG2*8]
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.endmacro

    case BC_LTIV:
      //|=> bc:
      //|  comp_xv_pre,BC_LTIV,InterpDoCompareIV
      //|1:
      //|  comp_iv_real,cmovl
      dasm_put(Dst, 4221,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1680 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_iv_int,cmovl
      dasm_put(Dst, 4320, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1682 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LTRV:
      //|=>bc:
      //|  comp_xv_pre,BC_LTRV,InterpDoCompareRV
      //|1:
      //|  comp_rv_real,cmovl
      dasm_put(Dst, 4381, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1688 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_rv_int,cmovl
      dasm_put(Dst, 4482, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1690 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEIV:
      //|=> bc:
      //|  comp_xv_pre,BC_LEIV,InterpDoCompareIV
      //|1:
      //|  comp_iv_real,cmovle
      dasm_put(Dst, 4555,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1696 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_iv_int,cmovle
      dasm_put(Dst, 4654, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1698 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LERV:
      //|=> bc:
      //|  comp_xv_pre,BC_LERV,InterpDoCompareRV
      //|1:
      //|  comp_rv_real,cmovle
      dasm_put(Dst, 4715,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1704 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_rv_int,cmovle
      dasm_put(Dst, 4816, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1706 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTIV:
      //|=> bc:
      //|  comp_xv_pre,BC_GTIV,InterpDoCompareIV
      //|1:
      //|  comp_iv_real,cmovg
      dasm_put(Dst, 4889,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1712 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_iv_int,cmovg
      dasm_put(Dst, 4988, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1714 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTRV:
      //|=>bc:
      //|  comp_xv_pre,BC_GTRV,InterpDoCompareRV
      //|1:
      //|  comp_rv_real,cmovg
      dasm_put(Dst, 5049, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1720 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_rv_int ,cmovg
      dasm_put(Dst, 5150, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1722 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEIV:
      //|=> bc:
      //|  comp_xv_pre,BC_GEIV,InterpDoCompareIV
      //|1:
      //|  comp_iv_real,cmovge
      dasm_put(Dst, 5223,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1728 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_iv_int,cmovge
      dasm_put(Dst, 5322, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1730 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GERV:
      //|=> bc:
      //|  comp_xv_pre,BC_GERV,InterpDoCompareRV
      //|1:
      //|  comp_rv_real ,cmovge
      dasm_put(Dst, 5383,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1736 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_rv_int  ,cmovge
      dasm_put(Dst, 5484, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1738 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQIV:
      //|=> bc:
      //|  comp_xv_pre,BC_EQIV,InterpDoCompareIV
      //|1:
      //|  comp_iv_real,cmove
      dasm_put(Dst, 5557,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1744 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_iv_int,cmove
      dasm_put(Dst, 5656, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1746 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQRV:
      //|=> bc:
      //|  comp_xv_pre,BC_EQRV,InterpDoCompareRV
      //|1:
      //|  comp_rv_real,cmove
      dasm_put(Dst, 5717,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1752 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_rv_int,cmove
      dasm_put(Dst, 5818, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1754 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEIV:
      //|=> bc:
      //|  comp_xv_pre,BC_NEIV,InterpDoCompareIV
      //|1:
      //|  comp_iv_real,cmovne
      dasm_put(Dst, 5891,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1760 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_iv_int,cmovne
      dasm_put(Dst, 5990, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1762 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NERV:
      //|=> bc:
      //|  comp_xv_pre,BC_NERV,InterpDoCompareRV
      //|1:
      //|  comp_rv_real,cmovne
      dasm_put(Dst, 6051,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1768 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_rv_int,cmovne
      dasm_put(Dst, 6152, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1770 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* --------------------------------------------------------------------
     * Comparison VX                                                      |
     * -------------------------------------------------------------------*/
    //|.macro comp_vx_pre,BC,SlowPath
    //|  instr_B
    //|  mov LREG,qword [STK+ARG1*8]
    //|  CheckNum ARG1,LREG,1,2
    //|  jmp ->SlowPath
    //|.endmacro

    // real/int part for iv/rv
    //|.macro comp_vi_real,instr
    //|  LdInt2Real xmm1,ARG2
    //|  movd xmm0,LREG
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.endmacro

    //|.macro comp_vi_int,instr
    //|  LdInt RREGL,ARG2
    //|  comp_cmp_int,instr
    //|  Dispatch
    //|.endmacro

    //|.macro comp_vr_real,instr
    //|  LdReal xmm1,ARG2
    //|  movsd xmm0, qword [STK+ARG1*8]
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.endmacro

    //|.macro comp_vr_int,instr
    //|  LdReal xmm1,ARG2
    //|  cvtsi2sd xmm0,dword [STK+ARG1*8]
    //|  comp_cmp_real,instr
    //|  Dispatch
    //|.endmacro

    case BC_LTVI:
      //|=>bc:
      //|  comp_vx_pre,BC_LTVI,InterpDoCompareVI
      //|1:
      //|  comp_vi_real,cmovl
      dasm_put(Dst, 6225, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1815 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vi_int,cmovl
      dasm_put(Dst, 6322, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1817 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LTVR:
      //|=>bc:
      //|  comp_vx_pre,BC_LTVR,InterpDoCompareVR
      //|1:
      //|  comp_vr_real,cmovl
      dasm_put(Dst, 6383, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1823 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vr_int ,cmovl
      dasm_put(Dst, 6482, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1825 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVI:
      //|=>bc:
      //|  comp_vx_pre,BC_LEVI,InterpDoCompareVI
      //|1:
      //|  comp_vi_real,cmovle
      dasm_put(Dst, 6555, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1831 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vi_int ,cmovle
      dasm_put(Dst, 6652, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1833 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVR:
      //|=>bc:
      //|  comp_vx_pre,BC_LEVR,InterpDoCompareVR
      //|1:
      //|  comp_vr_real,cmovle
      dasm_put(Dst, 6713, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1839 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vr_int ,cmovle
      dasm_put(Dst, 6812, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1841 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVI:
      //|=>bc:
      //|  comp_vx_pre,BC_GTVI,InterpDoCompareVI
      //|1:
      //|  comp_vi_real,cmovg
      dasm_put(Dst, 6885, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1847 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vi_int ,cmovg
      dasm_put(Dst, 6982, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1849 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVR:
      //|=>bc:
      //|  comp_vx_pre,BC_GTVR,InterpDoCompareVR
      //|1:
      //|  comp_vr_real, cmovg
      dasm_put(Dst, 7043, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1855 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vr_int , cmovg
      dasm_put(Dst, 7142, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1857 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVI:
      //|=>bc:
      //|  comp_vx_pre,BC_GEVI,InterpDoCompareVI
      //|1:
      //|  comp_vi_real ,cmovge
      dasm_put(Dst, 7215, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1863 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vi_int  ,cmovge
      dasm_put(Dst, 7312, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1865 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVR:
      //|=>bc:
      //|  comp_vx_pre,BC_GEVR,InterpDoCompareVR
      //|1:
      //|  comp_vr_real ,cmovge
      dasm_put(Dst, 7373, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1871 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vr_int  ,cmovge
      dasm_put(Dst, 7472, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1873 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVI:
      //|=>bc:
      //|  comp_vx_pre,BC_EQVI,InterpDoCompareVI
      //|1:
      //|  comp_vi_real ,cmove
      dasm_put(Dst, 7545, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1879 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vi_int  ,cmove
      dasm_put(Dst, 7642, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1881 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVR:
      //|=>bc:
      //|  comp_vx_pre,BC_EQVR,InterpDoCompareVR
      //|1:
      //|  comp_vr_real ,cmove
      dasm_put(Dst, 7703, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1887 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vr_int  ,cmove
      dasm_put(Dst, 7802, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1889 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVI:
      //|=>bc:
      //|  comp_vx_pre,BC_NEVI,InterpDoCompareVI
      //|1:
      //|  comp_vi_real ,cmovne
      dasm_put(Dst, 7875, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1895 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vi_int  ,cmovne
      dasm_put(Dst, 7972, PrototypeLayout::kIntTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1897 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVR:
      //|=>bc:
      //|  comp_vx_pre,BC_NEVR,InterpDoCompareVR
      //|1:
      //|  comp_vr_real ,cmovne
      dasm_put(Dst, 8033, bc, Value::FLAG_REAL, Value::FLAG_INTEGER, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
#line 1903 "src/interpreter/bytecode-interpreter.dasc"
      //|2:
      //|  comp_vr_int  ,cmovne
      dasm_put(Dst, 8132, PrototypeLayout::kRealTableOffset, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 1905 "src/interpreter/bytecode-interpreter.dasc"
      break;


    /* --------------------------------------------------------
     * comparison VV
     *
     * We do inline type promotion and comparison for all
     * numeric type
     * --------------------------------------------------------*/
    //|.macro comp_vv_pre,BC,instr
    //|  instr_E
    //|  mov LREG, qword [STK+ARG1*8]
    //|  mov RREG, qword [STK+ARG2*8]
    //|  cmp LREGL, Value::FLAG_INTEGER
    //|  jne >1 // int && xx
    //|  cmp RREGL, Value::FLAG_INTEGER
    //|  jne >2 // int && xx
    //|  shr LREG,32
    //|  shr RREG,32
    //|  mov T1L, Value::FLAG_TRUE
    //|  mov T2L, Value::FLAG_FALSE
    //|  cmp LREGL,RREGL
    //|  instr T1L,T2L
    //|  mov dword [STK+ACCFIDX], T1L
    //|  Dispatch

    //|1:
    //|  cmp LREGL, Value::FLAG_REAL
    //|  jnb >6
    //  real && xx
    //|  cmp RREGL, Value::FLAG_REAL
    //|  jb >3
    //|  cmp RREGL, Value::FLAG_INTEGER
    //|  jne >6
    // promotion real && int
    //|  movd xmm0,LREG
    //|  shr RREG,32
    //|  cvtsi2sd xmm1,RREGL
    //|  jmp >3

    //|2:
    //|  cmp RREGL, Value::FLAG_REAL
    //|  jnb >6
    // promotion int && real
    //|  shr LREG,32
    //|  cvtsi2sd xmm0,LREGL
    //|  movd xmm1, RREGL

    //|3: // real && real
    //|  mov T1L, Value::FLAG_TRUE
    //|  mov T2L, Value::FLAG_FALSE
    //|  ucomisd xmm0,xmm1
    //|  instr T1L,T2L
    //|  mov dword [STK+ACCFIDX], T1L
    //|  Dispatch

    // slow path
    //|6:
    //| jmp ->InterpCompareVV

    //|.endmacro

    case BC_LTVV:
      //|=>bc:
      //|  comp_vv_pre,BC_LTVV,cmovl
      dasm_put(Dst, 8205, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8277, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8397);
#line 1970 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVV:
      //|=>bc:
      //|  comp_vv_pre,BC_LEVV,cmovle
      dasm_put(Dst, 8420, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8492, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8397);
#line 1974 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVV:
      //|=>bc:
      //|  comp_vv_pre,BC_GTVV,cmovg
      dasm_put(Dst, 8612, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8684, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8397);
#line 1978 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVV:
      //|=>bc:
      //|  comp_vv_pre,BC_GEVV,cmovge
      dasm_put(Dst, 8804, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8876, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8397);
#line 1982 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVV:
      //|=>bc:
      //|  comp_vv_pre,BC_EQVV,cmove
      dasm_put(Dst, 8996, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9068, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8397);
#line 1986 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVV:
      //|=>bc:
      //|  comp_vv_pre,BC_NEVV,cmovne
      dasm_put(Dst, 9188, bc, Value::FLAG_INTEGER, Value::FLAG_INTEGER, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9260, Value::FLAG_REAL, Value::FLAG_REAL, Value::FLAG_INTEGER, Value::FLAG_REAL, Value::FLAG_TRUE, Value::FLAG_FALSE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 8397);
#line 1990 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* ------------------------------------------------------------
     * Comparison SV/VS
     *
     * For this sort of cases, we don't inline anything for none EQ/NE
     * comparison but just call the function to perform the comparison
     * -----------------------------------------------------------*/
    //|.macro comp_str,BC,instrDecoder,SlowPath
    //|  instrDecoder
    //|  jmp ->SlowPath
    //|.endmacro

    case BC_LTSV:
      //|=> bc:
      //|  comp_str BC_LTSV,instr_C,InterpCompareSV
      dasm_put(Dst, 9380,  bc);
#line 2006 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LTVS:
      //|=> bc:
      //|  comp_str BC_LTSV,instr_B,InterpCompareVS
      dasm_put(Dst, 9395,  bc);
#line 2010 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LESV:
      //|=> bc:
      //|  comp_str BC_LESV,instr_C,InterpCompareSV
      dasm_put(Dst, 9380,  bc);
#line 2014 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_LEVS:
      //|=> bc:
      //|  comp_str BC_LEVS,instr_B,InterpCompareVS
      dasm_put(Dst, 9395,  bc);
#line 2018 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTSV:
      //|=> bc:
      //|  comp_str BC_GTSV,instr_C,InterpCompareSV
      dasm_put(Dst, 9380,  bc);
#line 2022 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GTVS:
      //|=> bc:
      //|  comp_str BC_GTVS,instr_B,InterpCompareVS
      dasm_put(Dst, 9395,  bc);
#line 2026 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GESV:
      //|=> bc:
      //|  comp_str BC_GESV,instr_C,InterpCompareSV
      dasm_put(Dst, 9380,  bc);
#line 2030 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_GEVS:
      //|=> bc:
      //|  comp_str BC_GEVS,instr_B,InterpCompareVS
      dasm_put(Dst, 9395,  bc);
#line 2034 "src/interpreter/bytecode-interpreter.dasc"
      break;

    //|.macro comp_sv,BC,SlowPath,instr
    //|  instr_B
    //|  LdStr LREG,ARG1
    //|  mov RREG  ,qword [STK+ARG2*8]
    //|  CheckSSO LREG,1
    //|  CheckSSOV RREG,1
    //|  mov T1L, Value::FLAG_FALSE
    //|  mov T2L, Value::FLAG_TRUE
    //|  test LREG,RREG
    //|  instr T1L,T2L
    //|  mov dword [STK+ACCFIDX],T1L
    //|  Dispatch

    //|1:
    //|  jmp ->SlowPath
    //|.endmacro

    //|.macro comp_vs,BC,SlowPath,instr
    //|  instr_C
    //|  mov LREG, qword [STK+ARG1*8]
    //|  LdStr RREG,ARG2
    //|  CheckSSOV LREG,1
    //|  CheckSSO  RREG,1
    //|  mov T1L, Value::FLAG_FALSE
    //|  mov T2L, Value::FLAG_TRUE
    //|  test LREG,RREG
    //|  instr T1L,T2L
    //|  mov dword [STK+ACCFIDX],T1L
    //|  Dispatch

    //|1:
    //|  jmp ->SlowPath
    //|.endmacro

    case BC_EQSV:
      //|=> bc:
      //|  comp_sv BC_EQSV,InterpCompareSV,cmove
      dasm_put(Dst, 9407,  bc, PrototypeLayout::kStringTableOffset, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, Value::TAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9506);
#line 2073 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_EQVS:
      //|=> bc:
      //|  comp_vs BC_EQVS,InterpCompareVS,cmove
      dasm_put(Dst, 9529,  bc, PrototypeLayout::kStringTableOffset, Value::TAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9632);
#line 2077 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NESV:
      //|=>bc:
      //|  comp_sv BC_NESV,InterpCompareSV,cmovne
      dasm_put(Dst, 9655, bc, PrototypeLayout::kStringTableOffset, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, Value::TAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9506);
#line 2081 "src/interpreter/bytecode-interpreter.dasc"
      break;
    case BC_NEVS:
      //|=>bc:
      //|  comp_vs BC_NEVS,InterpCompareVS,cmovne
      dasm_put(Dst, 9754, bc, PrototypeLayout::kStringTableOffset, Value::TAG_HEAP, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, -(HeapObjectHeader::kHeapObjectHeaderSize+4), SSO_BIT_PATTERN, Value::FLAG_FALSE, Value::FLAG_TRUE);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 9632);
#line 2085 "src/interpreter/bytecode-interpreter.dasc"
      break;

    /* -------------------------------------------------
     * Unary                                           |
     * ------------------------------------------------*/

    // inline integers and reals inlined to be processed
    // and other types are throwed away to the slower
    // functions to help since we may need to support meta
    // function in the future
    case BC_NEGATE:
      //|=> bc:
      //|  instr_F
      //|  mov LREG, qword [STK+ARG1*8]
      //|  CheckNum ARG1,LREG,1,2
      //|  jmp ->InterpNegate
      dasm_put(Dst, 9857,  bc, Value::FLAG_REAL, Value::FLAG_INTEGER);
#line 2101 "src/interpreter/bytecode-interpreter.dasc"

      // real
      //|1:
      //|  movd xmm0,LREG
      //|  LdRConst_sign xmm1
      //|  xorpd xmm0, xmm1
      //|  movsd qword [STK+ARG1*8], xmm0
      //|  Dispatch
      dasm_put(Dst, 9897, (unsigned int)((static_cast<std::uint64_t>(0x80000000)<<32)), (unsigned int)(((static_cast<std::uint64_t>(0x80000000)<<32))>>32));
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2109 "src/interpreter/bytecode-interpreter.dasc"

      // int
      //|2:
      //|  neg dword [STK+ARG1*8]
      dasm_put(Dst, 9935);
#line 2113 "src/interpreter/bytecode-interpreter.dasc"
      // TODO:: overflow ??
      //|  Dispatch
      dasm_put(Dst, 88);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2115 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_NOT:
      //|=> bc:
      //|  instr_F
      //|  mov LREG, qword [STK+ARG1*8]
      //|  mov RREGL, dword [STK+ARG1*8+4]
      dasm_put(Dst, 9943,  bc);
#line 2122 "src/interpreter/bytecode-interpreter.dasc"

      // TODO::Optimize
      //
      // The following *flat* comparison table is not
      // good since in worst cases for (null) we need
      // 5 comparison to be executed. Maybe we can have
      // a better comparison table for the following
      // comparison
      //|  cmp RREGL, Value::FLAG_TRUE
      //|  je >1
      dasm_put(Dst, 9957, Value::FLAG_TRUE);
#line 2132 "src/interpreter/bytecode-interpreter.dasc"

      //|  cmp RREGL, Value::FLAG_FALSE
      //|  je >2
      dasm_put(Dst, 9966, Value::FLAG_FALSE);
#line 2135 "src/interpreter/bytecode-interpreter.dasc"

      //|  cmp RREGL, Value::FLAG_INTEGER
      //|  je >3
      dasm_put(Dst, 9975, Value::FLAG_INTEGER);
#line 2138 "src/interpreter/bytecode-interpreter.dasc"

      //|  cmp RREGL, Value::FLAG_REAL
      //|  jb >4
      dasm_put(Dst, 9984, Value::FLAG_REAL);
#line 2141 "src/interpreter/bytecode-interpreter.dasc"

      //|  cmp RREGL, Value::FLAG_NULL
      //|  je >5
      dasm_put(Dst, 9993, Value::FLAG_NULL);
#line 2144 "src/interpreter/bytecode-interpreter.dasc"

      // slow path
      //|  jmp ->InterpNot
      dasm_put(Dst, 10002);
#line 2147 "src/interpreter/bytecode-interpreter.dasc"

      //|1: // true
      //|  mov dword [STK+ARG1*8+4], Value::FLAG_FALSE
      //|  jmp >6
      dasm_put(Dst, 10007, Value::FLAG_FALSE);
#line 2151 "src/interpreter/bytecode-interpreter.dasc"

      //|2: // false
      //|  mov dword [STK+ARG1*8+4], Value::FLAG_TRUE
      //|  jmp >6
      dasm_put(Dst, 10020, Value::FLAG_TRUE);
#line 2155 "src/interpreter/bytecode-interpreter.dasc"

      //|3: // int
      //|.if 0
      //|  test LREGL, LREGL
      //|  je >7
      //|  mov dword [STK+ARG1*8+4], Value::FLAG_FALSE
      //|  jmp >6
      //|7:
      //|  mov dword [STK+ARG1*8+4], Value::FLAG_TRUE
      //|  jmp >6
      //|.else
      //|  mov T1L, Value::FLAG_FALSE
      //|  mov T2L, Value::FLAG_TRUE
      //|  test LREGL,LREGL
      //|  cmove T1L, T2L
      //|  mov dword [STK+ARG1*8+4], T1L
      //|  jmp >6
      //|.endif
      dasm_put(Dst, 10033, Value::FLAG_FALSE, Value::FLAG_TRUE);
#line 2173 "src/interpreter/bytecode-interpreter.dasc"

      //|4: // real
      //|  movd xmm0, LREG
      //|  pxor xmm1,xmm1
      //|  mov T1L, Value::FLAG_FALSE
      //|  mov T2L, Value::FLAG_TRUE
      //|  ucomisd xmm0,xmm1
      //|  cmove T1L,T2L
      //|  mov dword [STK+ARG1*8+4],T1L
      //|  jmp >6
      dasm_put(Dst, 10058, Value::FLAG_FALSE, Value::FLAG_TRUE);
#line 2183 "src/interpreter/bytecode-interpreter.dasc"

      //|5: // null
      //|  mov dword [STK+ARG1*8+4],Value::FLAG_TRUE
      //|  jmp >6
      dasm_put(Dst, 10094, Value::FLAG_TRUE);
#line 2187 "src/interpreter/bytecode-interpreter.dasc"

      //|6:
      //|  Dispatch
      dasm_put(Dst, 10107);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2190 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // -------------------------------------------
    // Branch
    // -------------------------------------------

    // branch PC
    //|.macro branch_to,where
    //|  mov T1,qword SAVED_PC
    //|  lea PC,[T1+where*4]
    //|.endmacro

    // jump macro -------------------------------------------------
    // inline int/real/true/false/null here to perform the jump
    // rest of the type goes to slow path to *convert* to boolean
    //
    // assume T1 holds the flag; REG holds the actual Value;REGL holds
    // the lower 32 bits
    //|.macro do_cond_jmp,SlowPath,REG,REGL,tflag,fflag,last_jmp
    //|  cmp T1L, Value::FLAG_TRUE
    //|  je >tflag
    //|  cmp T1L, Value::FLAG_FALSE
    //|  je >fflag
    //|  cmp T1L, Value::FLAG_NULL
    //|  je >fflag
    //|  cmp T1L, Value::FLAG_INTEGER
    //|  je >7
    //|  cmp T1L, Value::FLAG_REAL
    //|  jb >8
    //|  jmp ->SlowPath

    //|7:  // int
    //|  test REGL,REGL
    //|  je >fflag
    //|  jmp >tflag

    //|8:  // real
    //|  pxor xmm1,xmm1
    //|  movd xmm0,REG
    //|  ucomisd xmm0,xmm1
    //|  last_jmp
    //|.endmacro


    case BC_JMPT:
      //|=>bc:
      //|  instr_B
      //|  mov LREG,qword [STK+ARG1*8]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpJmpT,LREG,LREGL,1,2, je >2
      dasm_put(Dst, 10120, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2241 "src/interpreter/bytecode-interpreter.dasc"
      //|1:  // true branch
      //|  branch_to ARG2
      //|2:  // false branch
      //|  Dispatch
      dasm_put(Dst, 10199);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2245 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_JMPF:
      //|=>bc:
      //|  instr_B
      //|  mov LREG,qword [STK+ARG1*8]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpJmpF,LREG,LREGL,2,1, jne >2
      dasm_put(Dst, 10246, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2254 "src/interpreter/bytecode-interpreter.dasc"
      //|1: // false condition
      //|  branch_to ARG2
      //|2: // true condition
      //|  Dispatch
      dasm_put(Dst, 10325);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2258 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_AND:
      //|=>bc:
      //|  instr_G
      //|  mov LREG,qword [ACC]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpAnd,LREG,LREGL,2,1, jne >2
      dasm_put(Dst, 10372, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2267 "src/interpreter/bytecode-interpreter.dasc"
      //|1: // false condition
      //|  branch_to ARG1
      //|2: // true condition
      //|  Dispatch
      dasm_put(Dst, 10455);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2271 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_OR:
      //|=>bc:
      //|  instr_G
      //|  mov LREG,qword [ACC]
      //|  mov T1,LREG
      //|  shr T1,32
      //|  do_cond_jmp InterpOr,LREG,LREGL,1,2, je >2
      dasm_put(Dst, 10502, bc, Value::FLAG_TRUE, Value::FLAG_FALSE, Value::FLAG_NULL, Value::FLAG_INTEGER, Value::FLAG_REAL);
#line 2280 "src/interpreter/bytecode-interpreter.dasc"
      //|1:  // true condition
      //|  branch_to ARG1
      //|2:
      //|  Dispatch
      dasm_put(Dst, 10585);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2284 "src/interpreter/bytecode-interpreter.dasc"
      break;

    case BC_JMP:
      //|=>bc:
      //|  instr_G
      //|  branch_to ARG1
      //|  Dispatch
      dasm_put(Dst, 10632, bc);
       if(CheckAddress(reinterpret_cast<std::uintptr_t>(PrintOP))) {
      dasm_put(Dst, 99);
       } else {
         lava_warn("%s","Function PrintOP address is not in 0-2GB");
      dasm_put(Dst, 104, (unsigned int)(reinterpret_cast<std::uintptr_t>(PrintOP)), (unsigned int)((reinterpret_cast<std::uintptr_t>(PrintOP))>>32));
       }
      dasm_put(Dst, 112);
#line 2291 "src/interpreter/bytecode-interpreter.dasc"
      break;

    // ----------------------------------------------------------
    // Property/Upvalue/Global
    // ---------------------------------------------------------*/


    // A better way to implement property get/set is via IC (inline cache)
    // but currently we don't have IC states at bytecode level and we will
    // add it guide the JIT compilation phase. For interpreter, we will use
    // something simpler but good to capture most of the cases. Since we force
    // our internal hash use SSO's default hash value to serve as hash value
    // of the key, so we will use a trick that is used in LuaJIT here. For
    // key that is SSO, we will retrieve its hash value out and directly generate
    // index to anchor its main position inside of the *chain* and if we miss
    // we will fallback to the slow path

    //|.macro find_sso_pos,SlowPath,output
    //|  mov T2, qword [LREG]

    //|| if(MapLayout::kCapacityOffset) {
    //|    mov T2L, dword [T2+ObjectLayout::kCapacityOffset]
    //|| } else {
    //|    mov T2L, dword [T2]
    //|| }

    //|| if(SSOLayout::kHashOffset) {
    //|    mov T1L, dword [RREG+SSOLayout::kHashOffset]
    //|| } else {
    //|    mov T1L, dword [RREG]
    //|| }

    // T2L capacity , T1L size
    //|  dec T2L
    //|  and T1L,T2L

    // index are in T1L, now checkout the main entry
    //|  lea T2L, [LREG+T1L*sizeof(Map::Entry)+MapLayout::kArrayOffset]

    // save map's starting address
    //|  mov T1 , [LREG+MapLayout::kArrayOffset]

    // 1. check if this entry is *deleted* or *used*
    //|1: // start of the loop
    //|  mov LREG, dword [T2L+MapEntryLayout::kFlagOffset]
    //|  test LREG,((1<<30))
    //|  je >6

    // 2. check if it is deleted
    //|  test LREG,((1<<31))
    //|  jne >6 // deleted slots

    // 3. check if the key is a SSO
    //|  mov LREG, qword [T2L]
    //|  CheckSSO LREG,6
    //|  mov LREG, qword [LREG]
    //|  cmp LREG, RREG
    //|  jne >6 // string not identical

    // now we find the entry
    //|  mov [STK+output*8],[T2L+MapEntryLayout::kValueOffset]
    //|  Dispatch

    // move to next iteration
    //|6:
    //|  mov LREG, dword [T2L+MapEntryLayout::kFlagOffset]
    //|  test LREG,((1<<29))
    //|  je ->InterpPropGetNotFound
    //|  and LREG, ((bits::BitOn<std::uint32_t,0,29>::value))
    //|  mov T2L , [T1+LREG*sizeof(Map::Entry)]
    //|  jmp <1
    //|.endmacro



    default:
      //|=> bc:
      //|  Break
      dasm_put(Dst, 10658,  bc);
#line 2369 "src/interpreter/bytecode-interpreter.dasc"
      break;
  }
}

// Help Dasm to resolve external address via Index idx
int ResolveExternAddress( void** ctx , unsigned char* addr ,
                                       int idx,
                                       int type ) {
  (void)ctx;

  ExternSymbolTable* t = GetExternSymbolTable();
  ExternSymbolTable::iterator itr = t->find(extnames[idx]);
  lava_verify( itr != t->end() );

  void* ptr = itr->second;
  lava_verify(CheckAddress(reinterpret_cast<std::uintptr_t>(ptr)));

  int iptr = HorribleCast(ptr);
  lava_verify(reinterpret_cast<void*>(iptr) == ptr);

  if(type) {
    int end = HorribleCast(addr+4);

    // Check whether the address is overflowed or not. I think this is
    // not needed but just in cases we have a bug so we don't end up
    // calling into some wired places into our code
    std::int64_t ptr64 = static_cast<std::int64_t>(iptr);
    std::int64_t end64 = static_cast<std::int64_t>(end);

    lava_verify( (ptr64-end64) >= std::numeric_limits<int>::min() &&
                 (ptr64-end64) <= std::numeric_limits<int>::max() );

    return iptr - HorribleCast(addr+4);
  } else {
    return iptr;
  }
}

} // namespace

AssemblyInterpreter::AssemblyInterpreter():
  dispatch_interp_(),
  dispatch_record_(),
  dispatch_jit_   (),
  interp_helper_  (),
  interp_entry_   (),
  code_size_      (),
  buffer_size_    ()
{}

AssemblyInterpreter::~AssemblyInterpreter() {
  if(interp_entry_) OS::FreeCodePage(interp_entry_,buffer_size_);
}

std::shared_ptr<AssemblyInterpreter> AssemblyInterpreter::Generate() {
  static std::shared_ptr<AssemblyInterpreter> interp;
  if(interp) return interp; // return interp if we already have a interpreter pointer

  // create a new interp object since this is our first time
  interp.reset( new AssemblyInterpreter() );

  // create a build context
  BuildContext bctx;

  // initialize dasm_State object
  dasm_init(&(bctx.dasm_ctx),2);

  // setup the freaking global
  void* glb_arr[GLBNAME__MAX];
  dasm_setupglobal(&(bctx.dasm_ctx),glb_arr,GLBNAME__MAX);

  // setup the dasm
  dasm_setup(&(bctx.dasm_ctx),actions);

  // initialize the tag value needed , at least for each BC we need one
  bctx.tag = DASM_GROWABLE_PC_SIZE;
  dasm_growpc(&(bctx.dasm_ctx), DASM_GROWABLE_PC_SIZE );

  // build the prolog
  GenerateInterpMisc(&bctx);

  // build the helper
  GenerateHelper(&bctx);

  // generate all bytecode's routine
  for( int i = static_cast<int>(BC_ADDIV) ; i < SIZE_OF_BYTECODE ; ++i ) {
    GenerateOneBytecode(&bctx,static_cast<Bytecode>(i));
  }

  std::size_t code_size;

  // we should never fail at *linking* if our code is *correct*
  lava_verify(dasm_link(&(bctx.dasm_ctx),&code_size) ==0);

  // generate a buffer and set the proper protection field for that piece of
  // memory to make our code *work*
  std::size_t new_size;

  void* buffer = OS::CreateCodePage(code_size,&new_size);
  if(!buffer) {
    return std::shared_ptr<AssemblyInterpreter>();
  }

  // encode the assembly code into the buffer
  dasm_encode(&(bctx.dasm_ctx),buffer);

  // get all pc labels for entry of bytecode routine
  for( int i = static_cast<int>(BC_ADDIV) ; i < SIZE_OF_BYTECODE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp->dispatch_interp_[i] =
      reinterpret_cast<void*>(static_cast<char*>(buffer) + off);
  }

  // get all pc labels for helper routines
  for( int i = INTERP_HELPER_START ; i < DASM_GROWABLE_PC_SIZE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp->interp_helper_.push_back(
        reinterpret_cast<void*>(static_cast<char*>(buffer)+off));
  }

  interp->interp_entry_ = buffer;
  interp->buffer_size_  = new_size;
  interp->code_size_    = code_size;
  return interp;
}

Bytecode AssemblyInterpreter::CheckBytecodeRoutine( void* pc ) const {
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    void* p = reinterpret_cast<void*>(pc);
    if(p == dispatch_interp_[i]) {
      return static_cast<Bytecode>(i);
    }
  }
  return SIZE_OF_BYTECODE;
}

int AssemblyInterpreter::CheckHelperRoutine( void* pc ) const {
  std::vector<void*>::const_iterator itr =
    std::find( interp_helper_.begin() , interp_helper_.end() , pc );
  if(itr != interp_helper_.end()) {
    return (static_cast<int>(std::distance(interp_helper_.begin(),itr))+INTERP_HELPER_START);
  } else {
    return -1;
  }
}

void AssemblyInterpreter::Dump( DumpWriter* writer ) const {
  ZydisDecoder decoder;
  ZydisDecoderInit(
      &decoder,
      ZYDIS_MACHINE_MODE_LONG_64,
      ZYDIS_ADDRESS_WIDTH_64);

  ZydisFormatter formatter;
  ZydisFormatterInit(&formatter,ZYDIS_FORMATTER_STYLE_INTEL);

  std::uint64_t pc = reinterpret_cast<std::uint64_t>(interp_entry_);
  std::uint8_t* rp = static_cast<std::uint8_t*>(interp_entry_);
  std::size_t size = code_size_;

  writer->WriteL("CodeSize:%zu",code_size_);
  ZydisDecodedInstruction instr;
  while(ZYDIS_SUCCESS(
        ZydisDecoderDecodeBuffer(&decoder,rp,size,pc,&instr))) {

    char buffer[256];
    ZydisFormatterFormatInstruction(
        &formatter,&instr,buffer,sizeof(buffer));
    // check labels
    {
      Bytecode bc = CheckBytecodeRoutine(reinterpret_cast<void*>(pc));
      if(bc != SIZE_OF_BYTECODE) {
        writer->WriteL("Bytecode ===========> %s:",GetBytecodeName(bc));
      } else {
        int idx = CheckHelperRoutine(reinterpret_cast<void*>(pc));
        if(idx >= 0) {
          writer->WriteL("Helper ===========> %s:",GetInterpHelperName(idx));
        }
      }
    }
    writer->WriteL("%016" PRIX64 " (%d) %s",pc,instr.length,buffer);
    rp += instr.length;
    size -= instr.length;
    pc += instr.length;
  }
}

AssemblyInterpreter::Instance::Instance( const std::shared_ptr<AssemblyInterpreter>& interp ):
  dispatch_interp_(),
  dispatch_record_(),
  dispatch_jit_   (),
  interp_         (interp)
{
  memcpy(dispatch_interp_,interp->dispatch_interp_,sizeof(dispatch_interp_));
  memcpy(dispatch_record_,interp->dispatch_record_,sizeof(dispatch_record_));
  memcpy(dispatch_jit_   ,interp->dispatch_jit_   ,sizeof(dispatch_jit_   ));
}

bool AssemblyInterpreter::Instance::Run( Context* context , const Handle<Script>& script ,
                                                           const Handle<Object>& globals,
                                                           std::string* error,
                                                           Value* rval ) {
  Runtime runtime(script,globals,error);
  Main m = reinterpret_cast<Main>(interp_->interp_entry_);
  bool ret = m(&runtime,runtime.cur,reinterpret_cast<void*>(runtime.stack),
                                    const_cast<void*>(
                                      reinterpret_cast<const void*>((*runtime.cur)->code_buffer())),
                                    dispatch_interp_);
  if(ret) {
    *rval = runtime.ret;
  }
  return ret;
}

} // namespace lavascript
} // namespace interpreter
