#include "x64-interpreter.h"

#include "iframe.h"
#include "runtime.h"

#include "src/call-frame.h"
#include "src/context.h"
#include "src/trace.h"
#include "src/os.h"
#include "src/config.h"

#include <algorithm>
#include <map>
#include <cassert>
#include <climits>
#include <Zydis/Zydis.h>

extern "C" {

/** pow version from glibc which frankly speaking is pretty fast **/
double pow(double,double);

/** the famous glibc's sin/cos/tan faster than fsin/fcos and ftan assembly
 *  Plus use fsin is kind of painful since I have to mess up with x87
 */
double sin(double);
double cos(double);
double tan(double);

} // extern "C"

namespace lavascript {
namespace interpreter{
namespace {

// Used in dynasm library
int ResolveExternalAddress( void**,unsigned char*,int,int );

// Workaround for ODR
#include "dep/dynasm/dasm_proto.h"

#define DASM_EXTERN_FUNC(a,b,c,d) ResolveExternalAddress((void**)a,b,c,d)
#include "dep/dynasm/dasm_x86.h"

// -------------------------------------------------------------
// BuildContext
//
// Build phase context, used to *generate* templated interpreter
// -------------------------------------------------------------
struct BuildContext {
  dasm_State* dasm_ctx;
  int tag;

  BuildContext():
    dasm_ctx(NULL),
    tag(0)
  {}

  ~BuildContext() {
    if(dasm_ctx) dasm_free(&dasm_ctx);
  }
};


// Shut the GCC's mouth fucked up
template< typename T >
int HorribleCast( T* ptr ) {
  std::uint64_t iptr = reinterpret_cast<std::uint64_t>(ptr);
  int ret = static_cast<int>(iptr);
  lava_verify(reinterpret_cast<T*>(ret) == ptr);
  return ret;
}

void ReportError( Runtime* sandbox , const char* fmt , ... ) {
  // TODO:: Add stack unwind and other stuff for report error
  va_list vl;
  va_start(vl,fmt);
  FormatV(sandbox->error,fmt,vl);
}

// ------------------------------------------------------------------
// Prototype for the main interpreter function
//
// @ARG1: runtime
// @ARG2: Prototype** of the function
// @ARG3: start of the stack
// @ARG4: start of the code buffer for the *Prototype*
// @ARG5: start of the dispatch table
typedef bool (*Main)(Runtime*,Closure**,Prototype**,void*,void*,void*);

// ------------------------------------------------------------------
//
// Helper function/macros to register its literal name into a global
// table to help resolve the function's address during assembly link
// phase
//
// ------------------------------------------------------------------
typedef std::map<std::string,void*> ExternalSymbolTable;

inline ExternalSymbolTable* GetExternalSymbolTable() {
  static ExternalSymbolTable kTable;
  return &kTable;
}

inline bool InsertExternalSymbolTable(const char* name, void* address) {
  return GetExternalSymbolTable()->insert(std::make_pair(name,address)).second;
}

// Macro to register a external function's symbol name into global table
#define INTERPRETER_REGISTER_EXTERN_SYMBOL(XX)                               \
  struct XX##_Registry {                                                     \
    XX##_Registry() {                                                        \
      ExternalSymbolTable* table = GetExternalSymbolTable();                 \
      table->insert(std::make_pair(#XX,reinterpret_cast<void*>(&XX)));       \
    }                                                                        \
  };                                                                         \
  static XX##_Registry k##XX##_Registry;


// ------------------------------------------------------------------
// Builtin libc function exposure section
// ------------------------------------------------------------------
INTERPRETER_REGISTER_EXTERN_SYMBOL(pow)


// -------------------------------------------------------------------
// Helper to set Value object to indicate special meaning
// -------------------------------------------------------------------
#define VALUE_FAIL Value::FLAG_1

/* --------------------------------------------------------------------------
 *
 * Interpreter C++ Part Function Implementation
 *
 * -------------------------------------------------------------------------*/
inline std::uint32_t CurrentBytecode( Runtime* sandbox ) {
  /**
   * We do have instruction occupy 2 slots , *BUT* we don't need to consider
   * this because that byte is added on demand.
   *
   * When we reach to C++ function, our PC should still points to the added
   * byte for that instruction if our previous instruction is a 2 byte.
   *
   * So we only need to substract one of the *current* PC
   */
  return sandbox->cur_pc[-1];
}

inline Bytecode CurrentOpcode( Runtime* sandbox ) {
  std::uint32_t pbc = CurrentBytecode(sandbox);
  Bytecode bc = static_cast<Bytecode>(pbc&0xff);
  lava_error("BC:%s",GetBytecodeName(bc));
  return bc;
}

inline void BranchTo( Runtime* sandbox , std::uint32_t offset ) {
  Handle<Closure> cls(sandbox->cur_cls);
  const std::uint32_t* pc_start = cls->code_buffer();
  sandbox->cur_pc = pc_start + offset;
}

// Helper to skip the current offset arg. There're some BC has 2 dword encoding,
// which when calling from interpreter to C++ function, the PC is left to be the
// value pointed to the second dword of that BC. We need to bump cur_pc one dword
// forward if the jump is not taken
inline void BumpPC( Runtime* sandbox ) {
  sandbox->cur_pc++;
}

// --------------------------------------------------------------------------
// Arithmetic Helper
// --------------------------------------------------------------------------
void InterpreterModByZero( Runtime* sandbox ) {
  ReportError(sandbox,"\"%\"'s rhs value is 0");
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterModByZero)

bool InterpreterArithmetic( Runtime* sandbox , const Value& left ,
                                               const Value& right,
                                               Value* output ) {
  lava_error("Into arithmetic %s,%s",left.type_name(),right.type_name());
  if(left.IsExtension() || right.IsExtension()) {
    Handle<Extension> ext(left.IsExtension() ? left.GetExtension() :
        right.GetExtension());
    switch(CurrentOpcode(sandbox)) {
      case BC_ADDRV: case BC_ADDVR: case BC_ADDVV:
        return ext->Add(left,right,output,sandbox->error);
      case BC_SUBRV: case BC_SUBVR: case BC_SUBVV:
        return ext->Sub(left,right,output,sandbox->error);
      case BC_MULRV: case BC_MULVR: case BC_MULVV:
        return ext->Mul(left,right,output,sandbox->error);
      case BC_DIVRV: case BC_DIVVR: case BC_DIVVV:
        return ext->Div(left,right,output,sandbox->error);
      default:
        return ext->Mod(left,right,output,sandbox->error);
    }
  } else if(left.IsReal() && right.IsReal()) {
#define _DO(OP) output->SetReal(left.GetReal() OP right.GetReal()); break

    switch(CurrentOpcode(sandbox)) {
      case BC_ADDRV: case BC_ADDVR: case BC_ADDVV: _DO(+);
      case BC_SUBRV: case BC_SUBVR: case BC_SUBVV: _DO(-);
      case BC_MULRV: case BC_MULVR: case BC_MULVV: _DO(*);
      case BC_DIVRV: case BC_DIVVR: case BC_DIVVV: _DO(/);
      default:
        {
          std::int32_t l = static_cast<std::int32_t>(left.GetReal());
          std::int32_t r = static_cast<std::int32_t>(right.GetReal());
          if(r == 0) {
            InterpreterModByZero(sandbox);
            return false;
          }
          output->SetReal( static_cast<double>( l % r ) );
        }
        break;
    }

#undef _DO // _DO
  } else {
    ReportError(sandbox,"arithmetic operator cannot work between type %s and %s",
        left.type_name(),right.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterArithmetic)

bool InterpreterPow( Runtime* sandbox , const Value& left,
                                        const Value& right ,
                                        Value* output ) {

  if(left.IsExtension())
    return left.GetExtension()->Pow(left,right,output,sandbox->error);
  else if(right.IsExtension())
    return right.GetExtension()->Pow(left,right,output,sandbox->error);
  else if(left.IsReal() && right.IsReal()) {
    output->SetReal( std::pow(left.GetReal(),right.GetReal()) );
  } else {
    ReportError(sandbox,"\"%\" operator cannot work between type %s and %s",
        left.type_name(),right.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPow)


// ---------------------------------------------------------------------------
// Comparison Helper
//
// I want to force a jmp table for the following switch, but not sure how to
// do it in portable C++. Computed goto ??
//
// ---------------------------------------------------------------------------
bool InterpreterCompare( Runtime* sandbox , const Value& left ,
                                            const Value& right,
                                            Value* output ) {
  if(left.IsString() && right.IsString()) {
#define _DO(OP) output->SetBoolean(*left.GetString() OP *right.GetString()); break

    switch(CurrentOpcode(sandbox)) {
      case BC_LTRV: case BC_LTVR: case BC_LTVV: _DO(<);
      case BC_LERV: case BC_LEVR: case BC_LEVV: _DO(<=);
      case BC_GTRV: case BC_GTVR: case BC_GTVV: _DO(>);
      case BC_GERV: case BC_GEVR: case BC_GEVV: _DO(>=);
      case BC_EQSV: case BC_EQVS: case BC_EQVV: _DO(==);
      default: _DO(!=);
    }

#undef _DO // _DO
  } else if(left.IsExtension() || right.IsExtension()) {
#define _DO(OP) return left.IsExtension() ? \
                       left.GetExtension()->OP(left,right,output,sandbox->error) : \
                       right.GetExtension()->OP(left,right,output,sandbox->error);
    switch(CurrentOpcode(sandbox)) {
      case BC_LTRV: case BC_LTVR: case BC_LTVV: _DO(Lt);
      case BC_LERV: case BC_LEVR: case BC_LEVV: _DO(Le);
      case BC_GTRV: case BC_GTVR: case BC_GTVV: _DO(Gt);
      case BC_GERV: case BC_GEVR: case BC_GEVV: _DO(Ge);
      case BC_EQRV: case BC_EQVR: case BC_EQSV: case BC_EQVS: case BC_EQVV: _DO(Eq);
      default: _DO(Ne);
    }
#undef _DO // _DO
  } else if(left.IsReal() && right.IsReal()) {
#define _DO(OP) output->SetBoolean(left.GetReal() OP right.GetReal()); break

    switch(CurrentOpcode(sandbox)) {
      case BC_LTRV: case BC_LTVR: case BC_LTVV: _DO(<);
      case BC_LERV: case BC_LEVR: case BC_LEVV: _DO(<=);
      case BC_GTRV: case BC_GTVR: case BC_GTVV: _DO(>);
      case BC_GERV: case BC_GEVR: case BC_GEVV: _DO(>=);
      case BC_EQRV: case BC_EQVR: case BC_EQVV: _DO(==);
      default: _DO(!=);
    }

#undef _DO // _DO
  } else {
    ReportError(sandbox,"comparison operator doesn't work between type %s and %s",
        left.type_name(),right.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterCompare)

// ----------------------------------------------------------------------------
// Unary Helper
// ----------------------------------------------------------------------------
void InterpreterNegateFail( Runtime* sandbox , const Value& operand ) {
  ReportError(sandbox,"unary operator \"-\" can only work with real type, not type %s",
      operand.type_name());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterNegateFail)

// ----------------------------------------------------------------------------
// Literal Loader Helper
// ----------------------------------------------------------------------------
void InterpreterLoadList0( Runtime* sandbox , Value* output ) {
  Handle<List> list(List::New(sandbox->context->gc()));
  output->SetList(list);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterLoadList0)

void InterpreterLoadList1( Runtime* sandbox , Value* output , const Value& e1 ) {
  Handle<List> list(List::New(sandbox->context->gc(),2));
  list->Push(sandbox->context->gc(),e1);
  output->SetList(list);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterLoadList1)

void InterpreterLoadList2( Runtime* sandbox , Value* output , const Value& e1,
                                                              const Value& e2 ) {
  Handle<List> list(List::New(sandbox->context->gc(),2));
  list->Push(sandbox->context->gc(),e1);
  list->Push(sandbox->context->gc(),e2);
  output->SetList(list);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterLoadList2)

void InterpreterNewList( Runtime* sandbox , Value* output , std::uint32_t narg ) {
  Handle<List> list(List::New(sandbox->context->gc(),narg));
  output->SetList(list);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterNewList)

void InterpreterAddList( Runtime* sandbox , Value* output , std::uint8_t base,
                                                            std::uint32_t narg ) {

  lava_debug(NORMAL,lava_verify(output->IsList()););
  Handle<List> l(output->GetList());

  for( std::uint32_t i = 0 ; i < narg ; ++i ) {
    l->Push(sandbox->context->gc(),sandbox->cur_stk[base+i]);
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterAddList)

void InterpreterLoadObj0( Runtime* sandbox , Value* output ) {
  output->SetObject( Object::New(sandbox->context->gc()) );
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterLoadObj0)

bool InterpreterLoadObj1( Runtime* sandbox , Value* output ,
                                             const Value& key,
                                             const Value& val ) {
  Handle<Object> obj(Object::New(sandbox->context->gc(),2));
  if(key.IsString()) {
    obj->Put(sandbox->context->gc(),key.GetString(),val);
    output->SetObject(obj);
    return true;
  } else {
    ReportError(sandbox,"object's key must be string type, but get type %s",
        key.type_name());
    return false;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterLoadObj1)

void InterpreterNewObj( Runtime* sandbox , Value* output , std::uint32_t narg ) {
  Handle<Object> obj(Object::New(sandbox->context->gc(),narg));
  output->SetObject(obj);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterNewObj)

bool InterpreterAddObj( Runtime* sandbox , Value* output , const Value& key,
                                                           const Value& val ) {
  lava_debug(NORMAL,lava_verify(output->IsObject()););
  if(key.IsString()) {
    output->GetObject()->Put(sandbox->context->gc(),key.GetString(),val);
    return true;
  } else {
    ReportError(sandbox,"object's key must be string type, but get type %s",
        key.type_name());
    return false;
  }
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterAddObj)

LAVA_ALWAYS_INLINE
Handle<Closure> NewClosure( Runtime* sandbox , std::uint32_t ref ,
                                               Handle<String>* name ) {
  Script* scp = *(sandbox->script);
  const Script::FunctionTableEntry& entry = scp->GetFunction(ref);
  Handle<Closure> cls(Closure::New(sandbox->context->gc(),entry.prototype));

  // Initialize the UpValue array
  {
    Value* stk = sandbox->cur_stk;
    Closure* cls = *(sandbox->cur_cls);  // cannot trigger gc here
    Value* uv_arr = cls->upvalue();
    const std::uint32_t len = entry.prototype->upvalue_size();
    for( std::uint32_t i = 0 ; i < len ; ++i ) {
      UpValueState st;
      std::uint8_t idx = entry.prototype->GetUpValue(i,&st);
      if(st == UV_EMBED) {
        uv_arr[i] = stk[idx];
      } else {
        uv_arr[i] = cls->GetUpValue(idx);
      }
    }
  }

  if(name) *name = entry.name;
  return cls;
}

void InterpreterLoadCls( Runtime* sandbox , std::uint32_t ref, Value* dest ) {
  dest->SetClosure(NewClosure(sandbox,ref,NULL));
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterLoadCls)

bool InterpreterInitCls( Runtime* sandbox , std::uint32_t ref ) {
  Handle<String> name;
  // get the function's closure and its name
  Handle<Closure> cls(NewClosure(sandbox,ref,&name));

  // set it up into the *global* table
  Handle<Object> glb(sandbox->global);

  lava_debug(NORMAL,lava_verify(name););

  // load it up into the *global table
  if(!glb->Set(sandbox->context->gc(),name,Value(cls))) {
    ReportError(sandbox,"global closure %s has already been defined!",
        name->ToStdString().c_str());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterInitCls)

// ----------------------------------------------------------------------------
// Property Get/Set
// ----------------------------------------------------------------------------
void InterpreterPropNeedObject( Runtime* sandbox, const Value& obj ) {
  ReportError(sandbox,"type %s cannot work with operator \".\" or \"[]\"",obj.type_name());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropNeedObject)

bool InterpreterPropGet( Runtime* sandbox , const Value& obj , String** key ,
                                                               Value* output ) {
  Handle<String> k(key);
  if(obj.IsObject()) {
    if(!obj.GetObject()->Get(k,output)) {
      ReportError(sandbox,"key %s not found in object",k->ToStdString().c_str());
      return false;
    }

  } else if(obj.IsExtension()) {
    return obj.GetExtension()->GetProp(obj,Value(k),output,sandbox->error);
  } else {
    ReportError(sandbox,"operator \".\" or \"[]\" cannot work between type %s and string",
        obj.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGet)

bool InterpreterPropGetSSO( Runtime* sandbox , const Value& obj , std::uint32_t index ,
                                                                  Value* output ) {
  if(obj.IsExtension()) {
    Value key(Handle<String>(sandbox->cur_proto()->GetSSO(index)->str));
    return obj.GetExtension()->GetProp(obj,key,output,sandbox->error);
  } else if(obj.IsObject()) {
    Handle<String> key(sandbox->cur_proto()->GetSSO(index)->str);
    if(!obj.GetObject()->Get(key,output)) {
      ReportError(sandbox,"key %s not found in object",key->ToStdString().c_str());
      return false;
    }
  } else {
    ReportError(sandbox,"operator \".\" or \"[]\" cannot work between type %s and string",
        obj.type_name());
    return false;
  }

  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGetSSO)


void InterpreterPropGetSSONotFound( Runtime* sandbox , SSO* key ) {
  ReportError(sandbox,"key %s not found in object",key->ToStdString().c_str());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropGetSSONotFound)

bool InterpreterPropSet( Runtime* sandbox , const Value& obj , String** key ,
                                                               const Value& value ) {
  Handle<String> k(key);
  if(obj.IsObject()) {
    if(!obj.GetObject()->Update(sandbox->context->gc(),k,value)) {
      ReportError(sandbox,"key %s not found in object, cannot set",k->ToStdString().c_str());
      return false;
    }
  } else if(obj.IsExtension()) {
    return obj.GetExtension()->SetProp(obj,Value(k),value,sandbox->error);
  } else {
    ReportError(sandbox,"operator \".\" or \"[]\" cannot work between type %s and string",
        obj.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropSet)

bool InterpreterPropSetSSO( Runtime* sandbox , Value obj , std::uint32_t index,
                                                           const Value& value ) {
  if(obj.IsExtension()) {
    Value key(Handle<String>(sandbox->cur_proto()->GetSSO(index)->str));
    return obj.GetExtension()->SetProp(obj,key,value,sandbox->error);
  } else if(obj.IsObject()) {
    Handle<String> key(sandbox->cur_proto()->GetSSO(index)->str);
    if(!obj.GetObject()->Update(sandbox->context->gc(),key,value)) {
      ReportError(sandbox,"key %s not found in object, cannot set",key->ToStdString().c_str());
      return false;
    }
  } else {
    ReportError(sandbox,"operator \".\" or \"[]\" cannot work between type %s and string",
        obj.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropSetSSO)


void InterpreterPropSetSSONotFound( Runtime* sandbox , SSO* key ) {
  ReportError(sandbox,"key %s not found in object, cannot set",key->ToStdString().c_str());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterPropSetSSONotFound)


void InterpreterIdxOutOfBound( Runtime* sandbox , const Value& obj ,
                                                  std::int32_t size ) {
  lava_debug(NORMAL,lava_verify(obj.IsList()););
  ReportError(sandbox,"index %d out of bound of list with size %d",size,
      obj.GetList()->size());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterIdxOutOfBound)

bool InterpreterIdxGet( Runtime* sandbox , const Value& obj , const Value& key ,
                                                              Value* output ) {
  if(obj.IsExtension()) {
    return obj.GetExtension()->GetProp(obj,key,output,sandbox->error);
  } else if(obj.IsList() && key.IsReal()) {
    std::int32_t idx;
    Handle<List> l(obj.GetList());
    if(TryCastReal(key.GetReal(),&idx) && (idx >= 0 && idx < static_cast<std::int32_t>(l->size()))) {
      *output = l->Index(idx);
    } else {
      ReportError(sandbox,"index %f out of bound of list with size %d",key.GetReal(),l->size());
      return false;
    }
  } else if(obj.IsObject() && key.IsString()) {
    Handle<Object> o(obj.GetObject());
    if(!o->Get(key.GetString(),output)) {
      ReportError(sandbox,"key %s not found in object",key.GetString()->ToStdString().c_str());
      return false;
    }
  } else {
    ReportError(sandbox,"type %s cannot work with type %s by operator \".\" or \"[]\"",
        obj.type_name(),key.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterIdxGet)

bool InterpreterIdxSet( Runtime* sandbox , const Value& obj , const Value& key ,
                                                              const Value& val ) {
  if(obj.IsExtension()) {
    return obj.GetExtension()->SetProp(obj,key,val,sandbox->error);
  } else if(obj.IsList() && key.IsReal()) {
    std::int32_t idx;
    Handle<List> l(obj.GetList());
    if(TryCastReal(key.GetReal(),&idx) && (idx >= 0 && idx < static_cast<std::int32_t>(l->size()))) {
      l->Index(idx) = val;
    } else {
      ReportError(sandbox,"index %f out of bound of list with size %d",key.GetReal(),l->size());
      return false;
    }
  } else if(obj.IsObject() && key.IsString()) {
    Handle<Object> o(obj.GetObject());
    if(!o->Update(sandbox->context->gc(),key.GetString(),val)) {
      ReportError(sandbox,"key %s not found in object, cannot set",
          key.GetString()->ToStdString().c_str());
      return false;
    }
  } else {
    ReportError(sandbox,"type %s cannot work with type %s by operator \".\" or \"[]\"",
        obj.type_name(),key.type_name());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterIdxSet)

// ----------------------------------------------------------------------------
// Global
// ----------------------------------------------------------------------------
void InterpreterGGetNotFoundSSO( Runtime* sandbox , SSO* key ) {
  ReportError(sandbox,"global %s not found",key->ToStdString().c_str());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterGGetNotFoundSSO)

bool InterpreterGGet( Runtime* sandbox , Value* output , String** key ) {
  Handle<Object> global(sandbox->global);
  Handle<String> k(key);
  if(!global->Get(k,output)) {
    ReportError(sandbox,"global %s not found",k->ToStdString().c_str());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterGGet)

void InterpreterGSetNotFoundSSO( Runtime* sandbox , SSO* key ) {
  ReportError(sandbox,"global %s not found, cannot set",key->ToStdString().c_str());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterGSetNotFoundSSO)

bool InterpreterGSet( Runtime* sandbox , String** key , const Value& value ) {
  Handle<Object> global(sandbox->global);
  Handle<String> k(key);
  if(!global->Update(sandbox->context->gc(),k,value)) {
    ReportError(sandbox,"global %s not found, cannot set",k->ToStdString().c_str());
    return false;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterGSet)

// ----------------------------------------------------------------------------
// Loop
// ----------------------------------------------------------------------------
bool InterpreterForEnd1( Runtime* sandbox , const Value& lhs , const Value& rhs ,
                                                               std::uint32_t offset ) {
  if(lhs.IsExtension() || rhs.IsExtension()) {
    Handle<Extension> ext( lhs.IsExtension() ? lhs.GetExtension() : rhs.GetExtension() );
    Value result;
    if(!ext->Lt(lhs,rhs,&result,sandbox->error))
      return false;
    lava_debug(NORMAL,lava_verify(result.IsBoolean()););
    if(result.IsFalse()) {
      BranchTo(sandbox,offset);
    }
  } else if(lhs.IsString() && rhs.IsString()) {
    if(!(*lhs.GetString() < *rhs.GetString())) {
      BranchTo(sandbox,offset);
    }
  } else if(lhs.IsReal() && rhs.IsReal()) {
    if(!(lhs.GetReal() < rhs.GetReal())) {
      BranchTo(sandbox,offset);
    } else {
      BumpPC(sandbox);
    }
  } else {
    ReportError(sandbox,"type %s and %s cannot be used for range for loop,"
                        "no \"<\" operation allowed",
                        lhs.type_name(),rhs.type_name());
    return false;

  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterForEnd1)

bool InterpreterForEnd2( Runtime* sandbox , const Value& lhs , const Value& rhs ,
                                                               const Value& step ,
                                                               std::uint32_t offset ) {
  Value new_induction;

  // 1. do the addtion part
  if(lhs.IsExtension() || step.IsExtension()) {
    Handle<Extension> ext(lhs.IsExtension() ? lhs.GetExtension() : step.GetExtension());
    if(!ext->Add(lhs,step,&new_induction,sandbox->error))
      return false;
  } else if(lhs.IsReal() && step.IsReal()) {
    new_induction.SetReal( lhs.GetReal() + step.GetReal() );
  } else {
    ReportError(sandbox,"type %s and %s cannot be used for range for loop,"
                        "no \"+\" operation allowed",
                        lhs.type_name(),step.type_name());
    return false;
  }

  // 2. do the comparison part
  return InterpreterForEnd1(sandbox,new_induction,rhs,offset);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterForEnd2)

bool InterpreterFEStart( Runtime* sandbox , Value* expr , std::uint32_t offset ) {
  Handle<Iterator> itr;
  if(expr->IsList()) {
    itr = expr->GetList()->NewIterator(sandbox->context->gc(),expr->GetList());
  } else if(expr->IsObject()) {
    itr = expr->GetObject()->NewIterator(sandbox->context->gc(),expr->GetObject());
  } else if(expr->IsExtension()) {
    itr = expr->GetExtension()->NewIterator(sandbox->context->gc(),expr->GetExtension(),
                                                                   sandbox->error);
    if(!itr) return false; // Extension doesn't support iterator
  } else {
    ReportError(sandbox,"type %s doesn't support iterator",expr->type_name());
    return false;
  }

  expr->SetIterator(itr);
  if(!itr->HasNext()) {
    BranchTo(sandbox,offset);
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterFEStart)

void InterpreterFEEnd( Runtime* sandbox , const Value& expr , std::uint32_t offset ) {
  Handle<Iterator> itr(expr.GetIterator());
  if(itr->Move()) {
    BranchTo(sandbox,offset); // Jump back if we have anything in iterator
  }
  // no need to bump pc since FEEnd doesn't use extra byte
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterFEEnd)

void InterpreterIDref( Runtime* sandbox , Value* key , Value* val , const Value& expr ) {
  Handle<Iterator> itr(expr.GetIterator());
  itr->Deref(key,val);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterIDref)

/* ---------------------------------------------------------------------
 * Function call
 * --------------------------------------------------------------------*/
void InterpreterArgumentMismatch( Runtime* sandbox , const Value& object,
                                                     std::uint8_t arg ) {
  Handle<Closure> cls(object.GetClosure());
  ReportError(sandbox,"call closure with wrong argument number, expect %d but get %d",
      cls->argument_size(),arg);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterArgumentMismatch)

bool ResizeStack( Runtime* sandbox ) {
  return sandbox->context->gc()->GrowInterpreterStack(sandbox);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(ResizeStack)

void InterpreterCallNeedObject( Runtime* sandbox , const Value& object ) {
  ReportError(sandbox,"cannot call on type %s",object.type_name());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterCallNeedObject)

// This function only handles the Extension type call
// Assumption are stack is already resized if needed
bool InterpreterCall( Runtime* sandbox , const Value& expr , std::uint8_t base ,
                                                             std::uint8_t narg ,
                                                             bool tcall ) {
  if(!expr.IsExtension()) {
    lava_debug(NORMAL,lava_verify(!expr.IsClosure()););
    InterpreterCallNeedObject(sandbox,expr);
    return false;
  }
  Handle<Extension> ext(expr.GetExtension());

  // 1. get the new stack pos
  Value* new_pos = sandbox->cur_stk + base;
  lava_debug(NORMAL,lava_verify(sandbox->stack_end - new_pos >= 256););

  // 2. setup the *new frame*
  IFrame* frame = reinterpret_cast<IFrame*>(
      reinterpret_cast<char*>(new_pos) - sizeof(IFrame));

  // the base *must* multiply by sizeof(Value) since it is offset in bytes stored
  frame->SetUpAsExtension(base*sizeof(Value),NULL,tcall,narg,ext.ref());

  // 3. record the *current pc* into the current frame.
  sandbox->cur_frame()->set_pc(sandbox->cur_pc);

  // 4. store new information into sandbox object
  {
    Closure** cls_saved = sandbox->cur_cls;
    Value*    stk_saved = sandbox->cur_stk;
    const std::uint32_t* pc_saved = sandbox->cur_pc;

    sandbox->cur_cls = NULL;       // not a closure call
    sandbox->cur_stk = new_pos;    // set the new stack position
    sandbox->cur_pc  = NULL;       // not a closure call

    // 5. do the actual call
    {
      CallFrame cf(sandbox,INTERPRETER_FRAME,frame);
      if(!ext->Call(&cf,sandbox->error)) {
        return false;
      }
    }

    // 6. return value are in acc
    Value ret = sandbox->cur_stk[kAccRegisterIndex];

    // 7. pops the frame and return
    sandbox->cur_cls = cls_saved;
    sandbox->cur_stk = stk_saved;
    sandbox->cur_pc  = pc_saved;
    sandbox->cur_stk[kAccRegisterIndex] = ret;
  }
  return true;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(InterpreterCall)

/* ---------------------------------------------------------------------
 * JIT
 * --------------------------------------------------------------------*/
enum { HC_LOOP = 0 , HC_CALL };

// Triggering the JIT compilation
const void* JITProfileStart( Runtime* runtime , int type , const std::uint32_t* pc ) {
  (void)type;

  lava_debug(NORMAL,
      lava_verify(dynamic_cast<AssemblyInterpreter*>(runtime->interp) != NULL););

  return NULL;
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(JITProfileStart)

void* JITProfileBC( Runtime* runtime , const std::uint32_t* pc ) {
  // do nothing for now
  (void)runtime;
  (void)pc;
  return (NULL);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(JITProfileBC)

/* ---------------------------------------------------------------------
 *
 * Implementation of AssemblyInterpreterStub
 *
 * --------------------------------------------------------------------*/
|.arch x64
|.actionlist actions
|.globals GLBNAME_
|.globalnames glbnames
|.externnames extnames
|.section code,data

/* -------------------------------------------------------------------
 * Preprocessor option for dynasm
 * ------------------------------------------------------------------*/
|.define CHECK_MOD_BY_ZERO
|.define CHECK_NUMBER_MEMORY,0
|.define TRACE_OP, 0
|.define USE_CMOV_COMP,0

/* -------------------------------------------------------------------
 * 64 bits call
 *
 * Since 64 bits call cannot accept a imm value due to it is too long,
 * we need to generate different *types* of call instruction based on
 * the callsite
 * -------------------------------------------------------------------*/
inline bool CheckAddress( std::uintptr_t addr ) {
  static const std::uintptr_t k2G = 0x80000000;
  if(addr > 0 && addr < k2G)
    return true;
  else
    return false;
}

|.macro fcall,FUNC
|| if(CheckAddress(reinterpret_cast<std::uintptr_t>(FUNC))) {
|    call extern FUNC
|| } else {
     // This branch should be really rare to happen on Linux since Linux map the whole
     // application binary to first 0-2GB memory.
||   lava_warn("%s","Function FUNC address is not in 0-2GB");
|.if 0
// I don't know whether this is faster than use rax , need profile. I see
// this one is used in some other places/VM implementation
|9:
|.dword (std::uint32_t)((std::uintptr_t)(FUNC)),(std::uint32_t)((std::uintptr_t)((FUNC)>>32))
|    call qword[<9]
|.else
|    mov64 rax, reinterpret_cast<std::uintptr_t>(FUNC)
|    call rax
|.endif
|| }
|.endmacro

/* ---------------------------------------------------------------
 * summary of register usage                                     |
 * --------------------------------------------------------------*/
// Runtime pointer
|.define RUNTIME,               r12   // callee saved

// Current prototype's GCRef pointer
|.define PROTO,                 r13   // callee saved

// Top stack's pointer
|.define STK,                   r14   // callee saved
|.define STKL,                  r14d

|.define ACCIDX,                2040
|.define ACCFIDX,               2044
|.define ACCFHIDX,              2046  // for heap flag
|.define ACC,                   STK+ACCIDX

// Dispatch table pointer
|.define DISPATCH,              r15  // callee saved

// Bytecode array
|.define PC,                    rbp  // callee saved
|.define PCL,                   ebp

// Hold the decoded unit
|.define INSTR,                 eax
|.define INSTR_OP,              al
|.define INSTR_A8L,             al
|.define INSTR_A8H,             ah
|.define INSTR_A16,             ax

// Frame -------------------------------------------------------
// We store the frame sizeof(IFrame) above STK pointer
static_assert( sizeof(IFrame) == 24 );
|.define CFRAME,                STK-24
|.define FRAMELEN,              24

// Instruction's argument
|.define ARG1_8,                bl
|.define ARG1_16,               bx
|.define ARG1,                  ebx  // must *not* be 64 bits due to we use ah and it MUST be callee saved
|.define ARG1F,                 rbx

// Used to help decode function's call argument
|.define FARG,                  ebx  // aliased with ARG1
|.define FARG16,                bx
|.define FARG8L,                bl
|.define FARG8H,                bh

|.define ARG2_8,                al
|.define ARG2_16,               ax
|.define ARG2,                  eax
|.define ARG2F,                 rax

|.define ARG3_8,                cl
|.define ARG3_16,               cx
|.define ARG3,                  ecx
|.define ARG3F,                 rcx

// temporarily alias OP to be ARG3 because during the
// decoding time , we don't need to hold anything there
|.define OP,                    rcx

// temporary register are r10 and r11
|.define LREG,                  rsi
|.define LREGL,                 esi
|.define LREGLL,                 si
|.define RREG,                  rdx
|.define RREGL,                 edx
|.define RREGLL,                 dx

// absolute safe temporary variables
//
//
// In most places , prefer T0 as temporary register if ARGX
// is not free since it doesn't require REX encoding. But it
// alias with CARG1 , use with cautious
|.define T0,                    rdi
|.define T0L,                   edi
|.define T0L16,                 di

|.define T1,                    r11
|.define T1L,                   r11d
|.define T1L16,                 r11w

|.define T2,                    r10
|.define T2L,                   r10d
|.define T2L16,                 r10w

// registers for normal C function calling ABI
|.define CARG1,                 rdi
|.define CARG2,                 rsi    // LREG
|.define CARG3,                 rdx    // RREG
|.define CARG4,                 rcx
|.define CARG5,                 r8
|.define CARG6,                 r9

|.define CARG1L,                edi
|.define CARG2L,                esi
|.define CARG3L,                edx
|.define CARG4L,                ecx
|.define CARG5L,                r8d
|.define CARG6L,                r9d

|.define CARG1LL,               dil
|.define CARG2LL,               sil
|.define CARG3LL,               dl
|.define CARG4LL,               cl
|.define CARG5LL,               r8b
|.define CARG6LL,               r9b

// saved callee registers plus some other important stuff
// 72 = 64 + (8 padding for function call)
|.define RESERVE_RSP,           72
|.define SAVED_RBX,             [rsp+48]
|.define SAVED_R12,             [rsp+40]
|.define SAVED_R13,             [rsp+32]
|.define SAVED_R14,             [rsp+24]
|.define SAVED_R15,             [rsp+16]
|.define SAVED_RBP,             [rsp+8]

|.define SAVED_PPC,             rsp
|.define SAVED_PC ,             [rsp]

// Used to save certain registers while we call cross the function
// boundary. Like we may call into ToBoolean function to get value
// of certain register's Boolean value and we may need to save register
// like rax which is part of our argument/operand of isntructions
|.define SAVED_SLOT1,           rsp+56
|.define SAVED_SLOT2,           rsp+64

/* ---------------------------------------------------------------
 * debug helper                                                  |
 * --------------------------------------------------------------*/
|.macro Break
|  int 3
|.endmacro

void PrintOP( int op ) {
  lava_error("OP:%s",GetBytecodeName(static_cast<Bytecode>(op)));
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintOP)

void Print2( int a , int b ) {
  lava_error("L:%d,R:%d",a,b);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(Print2)

void PrintF( double v ) {
  lava_error("Value:%f",v);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintF)

void Print64( std::uint64_t a , std::uint64_t b , std::uint64_t c ) {
  lava_error("%" LAVA_FMTU64 ":%" LAVA_FMTU64 ":%" LAVA_FMTU64,a,b,c);
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(Print64)

void PrintV( const Value& v ) {
  lava_error("%s",v.type_name());
}
INTERPRETER_REGISTER_EXTERN_SYMBOL(PrintV)

/* ---------------------------------------------------------------
 * dispatch table                                                |
 * --------------------------------------------------------------*/

|.macro Dispatch
|.if TRACE_OP
|  mov INSTR,dword [PC]
|  movzx OP,INSTR_OP
|  mov CARG1,OP
|  fcall PrintOP
|.endif
|  mov INSTR,dword [PC]  // 1 uops
|  movzx OP,INSTR_OP     // 1 uops
|  add PC,4              // 1 uops
|  shr INSTR,8           // 1 uops
|  jmp aword [DISPATCH+OP*8]
|.endmacro

// Used by the profile bytecode handler
|.macro ResumeDispatch,PCI
|  mov INSTR, dword [PCI]
|  shr INSTR, 8
|.endmacro

/* ---------------------------------------------------------------
 * HotLoop/HotCall count                                         |
 * --------------------------------------------------------------*/
static_assert( sizeof(compiler::hotcount_t) == 2 );

// The following code MUST be called *after* handling of the BC
|.macro hc_hash,temp
|  lea temp, [PC-4]
|  shr temp, 2
|  and temp, 0xff
|.endmacro

|.macro HCLoop,temp
|  hc_hash temp
|  sub dword [RUNTIME+temp*2+RuntimeLayout::kLoopHotCountOffset], 1
|  jz ->JITProfileStartHotLoop
|.endmacro

|.macro HCCall,temp
|  hc_hash temp
|  sub dword [RUNTIME+temp*2+RuntimeLayout::kCallHotCountOffset], 1
|  jz ->JITProfileStartHotCall
|.endmacro

// Used to check whether a CompilationJob is finished ,which means
// we can jump into the JITTed code. This code can only be executed
// in bytecode that allows us to *JUMP* into the jitted code. These
// BCs are 1) fend1 2) fend2 3) feend 4) fevrend 5) call 6) tcall
|.macro CheckJIT,temp,fail
|  mov temp, qword [STK-24]   // the CompilationJob is stored on IFrame
|  test temp, temp
|  je fail
|  mov temp, qword [temp]     // Can be optimized ?
// TODO:: add code for checking the stats of the CompilationJob
|  Break
|.endmacro

|.macro DispatchCheckJIT,tag
|  CheckJIT, rax , >tag
|tag:
|  Dispatch
|.endmacro

/* ---------------------------------------------------------------
 * decode each instruction's argument/operand                    |
 * --------------------------------------------------------------*/

|.macro instr_B
// cannot use ARG1F due to INSTR_A8 uses ah
|  movzx ARG1F,INSTR_A8L
|  shr INSTR,8
|.endmacro

|.macro instr_C
|  movzx ARG1F,INSTR_A16
|  shr INSTR,16
|.endmacro

|.macro instr_D
|  movzx ARG1F,INSTR_A8L
|  shr INSTR,8
// do not change ARG3 --> ARG3F even if it is better, due to the fact
// we cannot use ax register when rex prefix is used in instruction.
|  movzx ARG3,INSTR_A8H
|  and ARG2,0xff
|.endmacro

|.macro instr_E
|  movzx ARG1,INSTR_A8L
|  shr INSTR,8
|.endmacro

|.macro instr_F
|  movzx ARG1,INSTR_A8L
|.endmacro

|.macro instr_G
|  movzx ARG1F,INSTR_A16
|.endmacro

|.macro instr_X
|.endmacro

|.macro instr_N
|  instr_D
|.endmacro

/* -----------------------------------------------------------
 * Special Constant for Real                                 |
 * ----------------------------------------------------------*/
|.macro rconstH,XREG,HIGH
|  mov64 T1,(static_cast<std::uint64_t>(HIGH)<<32)
|  movd XREG,T1
|.endmacro

|.macro rconstL,XREG,LOW
|  mov64 T1,(static_cast<std::uint64_t>(LOW))
|  movd XREG,T1
|.endmacro

|.macro rconst,XREG,X64V
|  mov64 T1,X64V
|  movd  XREG,T1
|.endmacro

// Used to negate the double precision number's sign bit
|.macro rconst_sign,XREG; rconstH XREG,0x80000000; .endmacro
|.macro rconst_one ,XREG; rconstH XREG,0x3ff00000; .endmacro
|.macro rconst_neg_one,XREG; rconstH XREG,0xbff00000; .endmacro

/* -----------------------------------------------------------
 * constant loading                                          |
 * ----------------------------------------------------------*/

// Currently our constant loading is *slow* due to the design of our GC
// and also the layout of each constant array. I think we have a way to
// optimize away one memory move. LuaJIT's constant loading is just one
// single instruction since they only get one constant array and they don't
// need to worry about GC move the reference

|.macro LdReal,reg,index
|  mov T1,qword [PROTO]
|  movsd reg, qword [T1+index*8+PrototypeLayout::kRealTableOffset]
|.endmacro

|.macro LdRealV,reg,index
|  mov T1,qword [PROTO]
|  mov reg, qword [T1+index*8+PrototypeLayout::kRealTableOffset]
|.endmacro

|.macro LdReal2Int,reg,index,temp
|  mov temp,qword [PROTO]
|  cvtsd2si reg,qword [temp+index*8+PrototypeLayout::kRealTableOffset]
|.endmacro

|.macro StRealACC,reg
|  movsd qword [ACC],reg
|.endmacro

|.macro StReal,idx,reg
|  movsd qword [STK+idx*8], reg
|.endmacro

|.macro StRealFromInt,idx,reg
|  cvtsi2sd xmm0,reg
|  movsd qword [STK+idx*8], xmm0
|.endmacro

// --------------------------------------------
// load upvalue value into register
|.macro LdUV,reg,index
|  mov T1,qword [RUNTIME+RuntimeLayout::kCurClsOffset]
|  mov T1,qword [T1+ClosureLayout::kUpValueOffset]
|  mov reg, qword [T1+index*8]
|.endmacro

|.macro StUV,index,reg
|  mov T1,qword [RUNTIME+RuntimeLayout::kCurClsOffset]
|  mov T1,qword [T1+ClosureLayout::kUpValueOffset]
|  mov qword [T1+index*8], reg
|.endmacro

// ----------------------------------------------
// Heap value related stuff

// This byte offset in little endian for type pattern inside of
// heap object header
#define HOH_TYPE_OFFSET 7

// Set a pointer into a register , this is really painful
|.macro StHeap,val

|.if 0
|  mov T1,Value::FLAG_HEAP
|  shl T1,48
|  or val,T1
|.else
|  or  val,qword [->ValueHeapMaskStore]
|.endif

|.endmacro

// Load a pointer from Value object , assume this object
// is a pointer type
|.macro LdPtrFromV,dest,val
|.if 1
|  mov dest,Value::FLAG_HEAP_UNMASK
|  shl dest,48
|  or  dest,val
|.else
|  mov dest,val
|  or  dest,qword [->ValueHeapMaskLoad]
|.endif
|.endmacro

|.macro DerefPtrFromV,v
|  and v,qword [->ValueHeapMaskLoad]
|.endmacro

// It is painful to load a string into its Value format
|.macro LdStrV,val,index
|  mov T1 , qword [PROTO]
|  mov T1 , qword [T1+PrototypeLayout::kStringTableOffset]
|  mov val, qword [T1+index*8]
|  StHeap val
|.endmacro

|.macro LdStr,val,index
|  mov T1 , qword [PROTO]
|  mov T1 , qword [T1+PrototypeLayout::kStringTableOffset]
|  mov val, qword [T1+index*8]
|.endmacro

// Load SSO value from sso table
|.macro LdSSO,val,index,temp
|  mov temp, qword [PROTO]
|  mov temp, qword [temp+PrototypeLayout::kSSOTableOffset]
|  shl index,4
|  mov val , qword [temp+index]
|.endmacro

// Check whether a Value is a HeapObject
|.macro CheckHeap,val,fail_label
|  mov T1,val
|  shr T1,48
|  cmp T1L, Value::FLAG_HEAP
|  jne fail_label
|.endmacro

// General macro to check a heap object is certain type
|.macro CheckHeapPtrT,val,pattern,fail_label
|  cmp byte [val-HOH_TYPE_OFFSET], pattern
|  jne fail_label
|.endmacro

|.macro CheckHeapT,val,pattern,fail_label
|  and val,qword [->ValueHeapMaskLoad]
|  mov val,qword [val]
|  CheckHeapPtrT val,pattern,fail_label
|.endmacro

// -------------------------------------------------------------------------
// Object bit pattern

#define OBJECT_BIT_PATTERN TYPE_OBJECT
#define LIST_BIT_PATTERN TYPE_LIST
#define SSO_BIT_PATTERN TYPE_STRING
#define CLOSURE_BIT_PATTERN TYPE_CLOSURE
#define EXTENSION_BIT_PATTERN TYPE_EXTENSION

// -------------------------------------------------------------------------
// Check an *GCRef* is Object or not

|.macro CheckObj,val,fail_label
|  CheckHeapT val,OBJECT_BIT_PATTERN,fail_label
|.endmacro

|.macro CheckObjV,val,fail_label
|  CheckHeap val,fail_label
|  CheckObj val,fail_label
|.endmacro

// --------------------------------------------------------------------------
// Check an *GCRef* is List or not

|.macro CheckList,val,fail_label
|  CheckHeapT val,LIST_BIT_PATTERN,fail_label
|.endmacro

|.macro CheckListV,val,fail_label
|  CheckHeap val,fail_label
|  CheckObj val,fail_label
|.endmacro

// --------------------------------------------------------------------------
// Check a *GCRef* is SSO or not , not stored in Value

// reg : pointer of String
|.macro CheckSSO,reg,fail
|  mov reg, qword [reg]
|  CheckHeapPtrT reg,SSO_BIT_PATTERN,fail
// dereference *once* from String* --> SSO*
|  mov reg, qword [reg]
|.endmacro

|.macro CheckSSOV,reg,fail
|  CheckHeap reg,fail
|  CheckHeapT,reg,SSO_BIT_PATTERN,fail
// dereference *once* from String* --> SSO*
|  mov reg, qword [reg]
|.endmacro

// If fail, reg will be set to store the value of that
// actual pointer points to a *unknown* heap object;
// otherwise reg will be set to store the value of pointer
// for that SSO object
|.macro CheckSSORaw,reg,fail
|  and reg,qword [->ValueHeapMaskLoad]
|  mov reg,qword [reg]
|  cmp byte [reg-HOH_TYPE_OFFSET], SSO_BIT_PATTERN
|  jne fail
|  mov reg,qword [reg]
|.endmacro

#define INTERP_HELPER_LIST(__)                        \
  /* arithmetic */                                    \
  __(INTERP_START,InterpStart)                        \
  __(INTERP_FAIL ,InterpFail)                         \
  __(INTERP_RETURN,InterpReturn)                      \
  __(INTERP_ARITH_REALL,InterpArithRealL)             \
  __(INTERP_ARITH_REALR,InterpArithRealR)             \
  __(INTERP_ARITH_VV,InterpArithVV)                   \
  __(INTERP_POW_SLOWVR,InterpPowSlowVR)               \
  __(INTERP_POW_SLOWRV,InterpPowSlowRV)               \
  __(INTERP_POW_SLOWVV,InterpPowSlowVV)               \
  __(MOD_BY_ZERO,ModByZero)                           \
  /* comparison */                                    \
  __(INTERP_COMPARERV,InterpCompareRV)                \
  __(INTERP_COMPAREVR,InterpCompareVR)                \
  __(INTERP_COMPARESV,InterpCompareSV)                \
  __(INTERP_COMPAREVS,InterpCompareVS)                \
  __(INTERP_COMPAREVV,InterpCompareVV)                \
  /* property get/set */                              \
  __(INTERP_IDX_GETI,InterpIdxGetI)                   \
  __(INTERP_IDX_SETI,InterpIdxSetI)                   \
  __(INTERP_PROP_NEEDOBJECT ,InterpPropNeedObject)    \
  __(INTERP_IDX_OUTOFBOUND_GET,InterpIdxOutOfBoundGet)\
  __(INTERP_IDX_OUTOFBOUND_SET,InterpIdxOutOfBoundSet)\
  /* call */                                          \
  __(INTERP_CALL,InterpCall)                          \
  __(INTERP_TCALL,InterpTCall)                        \
  __(INTERP_NEEDOBJECT,InterpNeedObject)              \
  __(INTERP_ARGUMENTMISMATCH,InterpArgumentMismatch)  \
  /* JIT */                                           \
  __(JIT_TRIGGER_HOT_LOOP,JITProfileStartHotLoop)     \
  __(JIT_TRIGGER_HOT_CALL,JITProfileStartHotCall)     \
  /* ---- Debug Helper ---- */                        \
  __(PRINT_OP,PrintOP)                                \
  __(PRINT2  ,Print2 )                                \
  __(PRINT64 ,Print64)                                \
  __(PRINTF  ,PrintF )                                \
  __(PRINTV , PrintV )

/** all intrinsic function call **/
#define INTERP_IC_LIST(__)                            \
  /* arithemtic */                                    \
  __(IC_MIN,ic_min)                                   \
  __(IC_MAX,ic_max)                                   \
  __(IC_SQRT,ic_sqrt)                                 \
  __(IC_SIN ,ic_sin)                                  \
  __(IC_COS ,ic_cos)                                  \
  __(IC_TAN ,ic_tan)                                  \
  __(IC_CEIL,ic_ceil)                                 \
  __(IC_FLOOR,ic_floor)                               \
  /* bits */                                          \
  __(IC_LSHIFT,ic_lshift)                             \
  __(IC_RSHIFT,ic_rshift)                             \
  __(IC_LROR  ,ic_lror  )                             \
  __(IC_RROR  ,ic_rror  )                             \
  __(IC_BAND  ,ic_band  )                             \
  __(IC_BOR   ,ic_bor   )                             \
  __(IC_BXOR  ,ic_bxor  )                             \
  /* conversion */                                    \
  __(IC_INT   ,ic_int   )                             \
  __(IC_REAL  ,ic_real  )                             \
  __(IC_STRING,ic_string)                             \
  __(IC_BOOLEAN,ic_boolean)                           \
  /* list */                                          \
  __(IC_PUSH  ,ic_push)                               \
  __(IC_POP   ,ic_pop )                               \
  /* object */                                        \
  __(IC_ADD   ,ic_add )                               \
  __(IC_HAS   ,ic_has )                               \
  __(IC_UPDATAE,ic_update)                            \
  __(IC_PUT   ,ic_put)                                \
  __(IC_REMOVE,ic_remove)                             \
  /* misc */                                          \
  __(IC_CLEAR,ic_clear )                              \
  __(IC_TYPE,ic_type)                                 \
  __(IC_LEN ,ic_len )                                 \
  __(IC_EMPTY,ic_empty)

enum {
  INTERP_HELPER_DUMMY = SIZE_OF_BYTECODE,

#define __(A,B) A,
  INTERP_HELPER_LIST(__)
  INTERP_IC_LIST(__)
#undef __ // __

  /** intrinsic function call's ABI compatible entry **/
#define __(A,B) ABI_##A
  INTERP_IC_LIST(__)
#undef __ // __

  DASM_GROWABLE_PC_SIZE
};

#define INTERP_HELPER_START (INTERP_HELPER_DUMMY+1)
#define INTERP_HELPER_SIZE (DASM_GROWABLE_PC_SIZE-INTERP_HELPER_ROUTINE_ENUM-1)

const char* GetInterpHelperName( int idx ) {
  switch(idx) {
#define __(A,B) case A: return #B;
    INTERP_HELPER_LIST(__)
    default:
      lava_unreachF("unknown helper with index:%d",idx);
      return NULL;
#undef __ // __
  }
}

/* -----------------------------------------------------------
 * Macro Interfaces for Dynasm                               |
 * ----------------------------------------------------------*/
#define Dst (&(bctx->dasm_ctx))

#define IFRAME_EOF 0xffff  // End of function frame, should return from VM


/* -----------------------------------------------------------
 * All the intrinsic function call                           |
 * ----------------------------------------------------------*/
void GenerateIntrinsicCall( BuildContext* bctx ) {

  |.macro Dec2Num, r1,r2,false_branch
  |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
  |  jnb false_branch
  |  movsd r1 , qword [STK+ARG2F*8]
  |  cmp dword [STK+ARG2F*8+12], Value::FLAG_REAL
  |  jnb false_branch
  |  movsd r2 , qowrd [STK+ARG2F*8+8]
  |.endmacro

  |.macro Dec1Num, r1, false_branch
  |  cmp dword [STK+ARG2F*8+4], Value::FALG_REAL
  |  jnb false_branch
  |  movsd r1 , qword [STK+ARG2F*8]
  |.endmacro

  |.macro Check2Num, false_branch
  |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
  |  jnb false_branch
  |  cmp dword [STK+ARG2F*8+12],Value::FLAG_REAL
  |  jnb false_branch
  |.endmacro

  |.macro Check1Num, false_branch
  |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
  |  jnb false_branch
  |.endmacro

  |.macro ICallFail,INDEX
  |  mov CARG1, SANDBOX
  |  mov CARG2, INDEX
  |  fcall InterpreterIntrinsicCallFail
  // NOTES: there's a concern about the call/return needs to be matched.
  //        some CPU vendor will mess up its call/return predication buffer
  //        for *unmatched* call/return. Here we jump directly back to the
  //        InterpFail routine which makes call and return not match
  |  jmp ->InterpFail
  |.endmacro

  |.code

  // min(a,b)
  |=>IC_MIN:
  |->ic_min:
  |  Check2Num >1
  |  mov   xmm0, qword [STK+ARG2F*8]
  |  minsd xmm0, qword [STK+ARG2F*8+8]
  |  mov qword [ACC], xmm0
  |  ret
  |1:
  |  ICallFail ARG1F

  // max(a,b)
  |=>IC_MAX:
  |->ic_max:
  |  Check2Num >1
  |  mov   xmm0, qword [STK+ARG2F*8]
  |  maxsd xmm0, qword [STK+ARG2F*8+8]
  |  mov qword [ACC], xmm0
  |  ret
  |1:
  |  ICallFail ARG1F

  // sqrt(a)
  |=>IC_SQRT:
  |->ic_sqrt:
  |  Check1Num >1
  |  sqrtsd xmm0, qword [STK+ARG2F*8]
  |  mov qword[ACC], xmm0
  |  ret
  |1:
  |  ICallFail ARG1F

  // sin(a)
  |=>IC_SIN:
  |->ic_sin:
  |  Dec1Num xmm0, >1
  |  call sin
  |  mov qword[ACC], xmm0
  |  ret
  |1:
  |  ICallFail ARG1F

  // cos(a)
  |=>IC_COS:
  |->ic_cos:
  |  Dec1Num xmm0, >1
  |  call cos
  |  mov qword[ACC], xmm0
  |  ret
  |1:
  |  ICallFail ARG1F

  // tan(a)
  |=>IC_TAN:
  |->ic_tan:
  |  Dec1Num xmm0, >1
  |  call tan
  |  mov qword[ACC], xmm0
  |  ret
  |1:
  |  ICallFail ARG1F

  // abs(a)
  |=>IC_ABS:
  |->ic_abs:

}

/* -----------------------------------------------------------
 * Interpreter Prolog                                        |
 * ----------------------------------------------------------*/
void GenerateInterpMisc( BuildContext* bctx ) {
  /* -------------------------------------------
   * Constant value needed for the interpreter |
   * ------------------------------------------*/
  // Align with cache line ???
  |.data
  |->ValueHeapMaskStore:
  |.dword Value::TAG_HEAP_STORE_MASK_LOWER,Value::TAG_HEAP_STORE_MASK_HIGHER // 8 bytes

  |->ValueHeapMaskLoad:
  |->PointerMask:
  |.dword Value::TAG_HEAP_LOAD_MASK_LOWER,Value::TAG_HEAP_LOAD_MASK_HIGHER   // 8 bytes

  |->PointerTag:
  |.dword 0,0xffff0000 // 8 bytes

  |->FlagTrueConst:
  |.dword Value::FLAG_TRUE  // 4 bytes

  |->FlagFalseConst:
  |.dword Value::FLAG_FALSE // 4 bytes

  |->ValueNullConst:
  |.dword 0, Value::FLAG_NULL // 8 bytes

  |->RealZero:
  |.dword 0,0  // 8 btyes

  |.code

  /* -------------------------------------------
   * Start of the code                         |
   * ------------------------------------------*/

  |.macro interp_prolog
  |  sub   rsp, RESERVE_RSP             // make room on the stack

  |  mov qword SAVED_R12,r12            // runtime
  |  mov qword SAVED_R13,r13            // proto
  |  mov qword SAVED_R14,r14            // stack
  |  mov qword SAVED_R15,r15            // dispatch
  |  mov qword SAVED_RBP,rbp            // PC
  |  mov qword SAVED_RBX,rbx            // used by ARG2 , this may be changed in the future
  |.endmacro

  |.macro interp_epilog
  |  mov r12, qword SAVED_R12
  |  mov r13, qword SAVED_R13
  |  mov r14, qword SAVED_R14
  |  mov r15, qword SAVED_R15
  |  mov rbp, qword SAVED_RBP
  |  mov rbx, qword SAVED_RBX

  |  add rsp, RESERVE_RSP
  |.endmacro

  /* -------------------------------------------
   * Interpreter Prolog                        |
   * ------------------------------------------*/
  |=> INTERP_START:
  |->InterpStart:
  // save all callee saved register since we use them to keep tracking of
  // our most important data structure
  |  interp_prolog

  |  mov RUNTIME ,CARG1                 // runtime
  |  mov PROTO   ,CARG3                 // proto
  |  mov STK     ,CARG4                 // stack
  |  mov PC      ,CARG5                 // pc
  |  mov DISPATCH,CARG6                 // dispatch

  |  mov qword SAVED_PC,PC              // save the *start* of bc array

  // setup the call frame
  |  mov eax,  IFRAME_EOF
  |  shl rax,  48
  |  mov qword [STK]  , 0
  |  mov qword [STK+8],   rax           // Set the IFrame upper 8 bytes to be 0
  |  mov qword [STK+16], CARG2          // Reset the flag/narg and set the Caller to be PROTO
  |  add STK,24                         // Bump the STK register

  |  mov qword [RUNTIME+RuntimeLayout::kCurClsOffset], CARG2
  |  mov qword [RUNTIME+RuntimeLayout::kCurStackOffset], STK

  // run
  |  Dispatch

  /* -------------------------------------------
   * Interpreter exit handler                  |
   * ------------------------------------------*/
  |=> INTERP_FAIL:
  |->InterpFail:
  |  xor eax,eax
  |  interp_epilog
  |  ret

  |=> INTERP_RETURN:
  |->InterpReturn:
  |  mov qword [RUNTIME+RuntimeLayout::kRetOffset], ARG1F
  |  mov rax,1

  |  interp_epilog
  |  ret
}

/* ------------------------------------------
 * helper functions/routines generation     |
 * -----------------------------------------*/

// ----------------------------------------
// helper macros
// ----------------------------------------
|.macro retbool
|  test eax,eax
|  je ->InterpFail
|  Dispatch
|.endmacro

// saving the current PC into the Runtime object, this is
// needed for GC to figure out the correct active register
// layout during the GC marking phase
|.macro savepc
|  mov qword [RUNTIME+RuntimeLayout::kCurPCOffset], PC
|.endmacro

void GenerateHelper( BuildContext* bctx ) {

  /* -------------------------------------------------------------------------
   * InterpArithXXX
   *
   * C++'s ABI is kind of hard to maintain correctly between Assembly
   * code and normal function in C++. The object passing mechanism is
   * not easy if you try to use pass by *value*. So to make things
   * easir, our internal C++ function *all* use reference/pointer, which
   * avoid the passing by value's ABI problem. However, sometimes our
   * value are in register, so we need to spill it into stack to make
   * ABI works.
   *
   * We have SAVED_SLOT1/SAVED_SLOT2 for this cases
   * -----------------------------------------------------------------------*/
  |=> INTERP_ARITH_REALL:
  |->InterpArithRealL:
  |  savepc
  |  mov CARG1,RUNTIME

  |  LdRealV T2,ARG2F
  |  lea CARG2,[SAVED_SLOT1]
  |  mov qword [SAVED_SLOT1], T2

  |  lea CARG3, [STK+ARG3F*8]
  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterArithmetic
  |  retbool

  |=> INTERP_ARITH_REALR:
  |->InterpArithRealR:
  |  savepc
  |  mov CARG1,RUNTIME
  |  lea CARG2,[STK+ARG2F*8]

  |  LdRealV T2,ARG3F
  |  lea CARG3,[SAVED_SLOT1]
  |  mov qword [SAVED_SLOT1], T2

  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterArithmetic
  |  retbool

  |=> INTERP_ARITH_VV:
  |->InterpArithVV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]
  |  lea CARG3, [STK+ARG3F*8]
  |  lea CARG4, [STK+ARG1F*8] // ARG3F == CARG4
  |  fcall InterpreterArithmetic
  |  retbool

  |=> INTERP_POW_SLOWRV:
  |->InterpPowSlowRV:
  |  savepc
  |  mov CARG1, RUNTIME

  |  LdRealV T2,ARG2F
  |  lea CARG2, [SAVED_SLOT1]
  |  mov qword  [SAVED_SLOT1], T2

  |  lea CARG3, [STK+ARG3F*8]
  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterPow
  |  retbool

  |=> INTERP_POW_SLOWVR:
  |->InterpPowSlowVR:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]

  |  LdRealV T2,ARG3F
  |  mov qword [SAVED_SLOT1], T2
  |  lea CARG3,[SAVED_SLOT1]

  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterPow
  |  retbool

  |=> INTERP_POW_SLOWVV:
  |->InterpPowSlowVV:
  |  savepc
  |  instr_D
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]
  |  lea CARG3, [STK+ARG3F*8]
  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterPow
  |  retbool

  /* -------------------------------------------
   * Interp Arithmetic Exception               |
   * ------------------------------------------*/
  |=> MOD_BY_ZERO:
  |->ModByZero:
  |  savepc
  |  mov CARG1,RUNTIME
  |  fcall InterpreterModByZero
  |  jmp ->InterpFail

  /* -------------------------------------------
   * Interp Comparison                         |
   * ------------------------------------------*/
  |=> INTERP_COMPARERV:
  |->InterpCompareRV:
  |  savepc
  |  mov CARG1,RUNTIME

  |  LdRealV T2,ARG2F
  |  lea CARG2, [SAVED_SLOT1]
  |  mov qword  [SAVED_SLOT1], T2

  |  lea CARG3, [STK+ARG2F*8]
  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterCompare
  |  retbool

  |=> INTERP_COMPAREVR:
  |->InterpCompareVR:
  |  savepc
  |  mov CARG1,RUNTIME
  |  lea CARG2, [STK+ARG2F*8]

  |  LdRealV T2,ARG3F
  |  lea CARG3, [SAVED_SLOT1]
  |  mov qword  [SAVED_SLOT1], T2

  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterCompare
  |  retbool

  |=> INTERP_COMPAREVS:
  |->InterpCompareVS:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]

  |  LdStrV T2, ARG3F
  |  lea CARG3, [SAVED_SLOT1]
  |  mov qword [SAVED_SLOT1],T2

  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterCompare
  |  retbool

  |=> INTERP_COMPARESV:
  |->InterpCompareSV:
  |  savepc
  |  mov CARG1, RUNTIME

  |  LdStrV T2, ARG2F
  |  lea CARG2, [SAVED_SLOT1]
  |  mov qword [SAVED_SLOT1], T2

  |  lea CARG3, [STK+ARG3F*8]
  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterCompare
  |  retbool

  |=> INTERP_COMPAREVV:
  |->InterpCompareVV:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]
  |  lea CARG3, [STK+ARG3F*8]
  |  lea CARG4, [STK+ARG1F*8]
  |  fcall InterpreterCompare
  |  retbool

  /* -------------------------------------------------
   * Property Get/Set                                |
   * ------------------------------------------------*/
  |=> INTERP_PROP_NEEDOBJECT:
  |->InterpPropNeedObject:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]
  |  fcall InterpreterPropNeedObject
  |  jmp ->InterpFail

  |=> INTERP_IDX_GETI:
  |->InterpIdxGetI:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG2, qword [STK+ARG2F*8]

  |  cvtsi2sd xmm0, ARG3
  |  movsd qword [SAVED_SLOT1], xmm0
  |  lea   CARG3, [SAVED_SLOT1]

  |  lea CARG4, qword [STK+ARG1F*8]
  |  fcall InterpreterIdxGet
  |  retbool

  |=> INTERP_IDX_SETI:
  |->InterpIdxSetI:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]

  |  cvtsi2sd xmm0, ARG2
  |  movsd qword [SAVED_SLOT1], xmm0
  |  lea CARG3, [SAVED_SLOT1]

  |  lea CARG4, [STK+ARG3F*8]
  |  fcall InterpreterIdxSet
  |  retbool

  |=> INTERP_IDX_OUTOFBOUND_SET:
  |->InterpIdxOutOfBoundSet:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG2F*8]
  |  mov CARG3L, ARG3
  |  fcall InterpreterIdxOutOfBound
  |  jmp ->InterpFail

  |=> INTERP_IDX_OUTOFBOUND_GET:
  |->InterpIdxOutOfBoundGet:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3L, ARG2
  |  fcall InterpreterIdxOutOfBound
  |  jmp ->InterpFail

  /* -------------------------------------------------
   * Call
   * ------------------------------------------------*/
  |=> INTERP_CALL:
  |->InterpCall:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3L, ARG2
  |  mov CARG4L, ARG3
  |  xor CARG5L, CARG5L
  |  fcall InterpreterCall
  |  test eax,eax
  |  je ->InterpFail

  // Need to check whether the JIT is done
  |  DispatchCheckJIT 1

  |=> INTERP_TCALL:
  |->InterpTCall:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3L,ARG2
  |  mov CARG4L,ARG3
  |  mov CARG5L,1
  |  fcall InterpreterCall
  |  test eax,eax

  // Need to check whether the JIT is done
  |  je ->InterpFail
  |  DispatchCheckJIT 1

  |=> INTERP_NEEDOBJECT:
  |->InterpNeedObject:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  fcall InterpreterCallNeedObject
  |  jmp ->InterpFail

  |=> INTERP_ARGUMENTMISMATCH:
  |->InterpArgumentMismatch:
  |  savepc
  |  mov CARG1, RUNTIME
  |  lea CARG2, [STK+ARG1F*8]
  |  mov CARG3L,ARG3
  |  fcall InterpreterArgumentMismatch
  |  jmp ->InterpFail

  // ------------------------------------------------------
  // JIT
  // ------------------------------------------------------
  |=> JIT_TRIGGER_HOT_LOOP:
  |->JITProfileStartHotLoop:
  |  savepc
  |  mov CARG1, RUNTIME
  |  xor CARG2L,CARG2L
  |  lea CARG3, [PC-4]
  |  fcall JITProfileStart
  |  test eax,eax
  |  cmovne DISPATCH, rax   // the table has been patched, use new dispatch table
  |  Dispatch

  |=> JIT_TRIGGER_HOT_CALL:
  |->JITProfileStartHotCall:
  |  savepc
  |  mov CARG1, RUNTIME
  |  mov CARG1, 1
  |  lea CARG3, [PC-4]
  |  fcall JITProfileStart
  |  test eax,eax
  |  cmovne DISPATCH, rax  // the table has been patched, use new dispatch table
  |  Dispatch

  // ------------------------------------------------------
  // SSO Hash Lookup Fast Path
  // ------------------------------------------------------

  // This small assembly routine is used to do a key/value lookup inside
  // of a Object/Map. This function is roughly the same as doing an normal
  // open addressing chain resolution when key is SSO inside of Map object.

  // assume objreg is type Map* , pointer to a *Map*
  // assume ssoref is type SSO* , pointer to a *SSO*
  // returned slot/entry is in RREG
  |.macro objfind_sso,objreg,ssoreg,not_found,found
  |  mov RREGL, dword [ssoreg+SSOLayout::kHashOffset]     // get the sso hash value
  |  and RREGL, dword [objreg+MapLayout::kMaskOffset]     // do the masking

  // Assuming Entry inside of Map is 24 bytes , 3 machine word
  |  lea LREG , [objreg+MapLayout::kArrayOffset]          // Store the Entry's start address
  |  lea RREG , [RREG+RREG*2]                             // RREG * 3
  |  lea RREG , [LREG+RREG*8]                             // RREG = [start_of_address+LREG*24]

  // check if entry is *deleted* or *used*
  |2:
  |  mov  T1L, dword [RREG+MapEntryLayout::kFlagOffset]
  | // start the chain resolution loop
  |  test T1L, (Map::Entry::kUseButNotDelBit)
  |  jz not_found  // not found

  |  mov T0, qword [RREG+MapEntryLayout::kKeyOffset]     // Get the key
  |  CheckSSO T0, >3

  |  cmp ssoreg, T0
  |  jne >3
  // we find our key here , RREG points to the entry
  |  found
  |3: // next iteration
  |  test T1L, (Map::Entry::kMoreBit)
  |  jz not_found // not found
  |  and T1L , (bits::BitOn<std::uint32_t,0,29>::value)
  |  lea T0  , [T1+T1*2]
  |  lea RREG, [LREG+T0*8]
  |  jmp <2
  |.endmacro

}

void GenBytecode( BuildContext* bctx, Bytecode bc ) {
  switch(bc) {
    /** =====================================================
     *  Register Move                                       |
     *  ====================================================*/
    case BC_MOVE:
      |=> bc:
      |  instr_E
      |  mov ARG3F,qword [STK+ARG2F*8]
      |  mov qword [STK+ARG1F*8],ARG3F
      |  Dispatch
      break;

    /** =====================================================
     *  Constant Loading                                    |
     *  ====================================================*/
    case BC_LOAD0:
      |=> bc:
      |  instr_F
      |  xorpd xmm0,xmm0
      |  movsd qword[STK+ARG1F*8], xmm0
      |  Dispatch
      break;

    case BC_LOAD1:
      |=> bc:
      |  instr_F
      |  rconst_one xmm0
      |  movsd qword[STK+ARG1F*8], xmm0
      |  Dispatch
      break;

    case BC_LOADN1:
      |=> bc:
      |  instr_F
      |  rconst_neg_one xmm0
      |  movsd qword[STK+ARG1F*8], xmm0
      |  Dispatch
      break;

    case BC_LOADR:
      |=> bc:
      |  instr_E
      |  LdReal xmm0,ARG2F
      |  movsd qword [STK+ARG1F*8],xmm0
      |  Dispatch
      break;

    case BC_LOADNULL:
      |=> bc:
      |  instr_F
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_NULL
      |  Dispatch
      break;

    case BC_LOADTRUE:
      |=> bc:
      |  instr_F
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
      |  Dispatch
      break;

    case BC_LOADFALSE:
      |=> bc:
      |  instr_F
      |  mov dword [STK+ARG1F*8+4],Value::FLAG_FALSE
      |  Dispatch
      break;

    case BC_LOADSTR:
      |=> bc:
      |  instr_E
      |  LdStrV LREG,ARG2F
      |  mov qword [STK+ARG1F*8],LREG
      |  Dispatch
      break;

    // -------------------------------------------------
    // Loading List/Object/Clousure
    //
    //
    // For these bytecodes, no optimization is performed but
    // directly yield back to C++ function to do the job. It
    // has no points to optimize these cases since they are
    // small amount of bytecodes and also complicated to write
    // in assembly without too much gain
    //
    //
    // To reduce ICache stress, the decode routine is *not*
    // placed inlined with each BC_XXX here but in the slow
    // path. This is purposely to make the main part of
    // interpreter to be small which helps about the icache
    // footprint of hot code
    // ------------------------------------------------*/
    case BC_LOADLIST0:
      |=> bc:
      |  instr_F
      |  savepc
      |  mov CARG1,RUNTIME
      |  lea CARG2,[STK+ARG1F*8]
      |  fcall InterpreterLoadList0
      |  Dispatch
      break;
    case BC_LOADLIST1:
      |=>bc:
      |  instr_E
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  fcall InterpreterLoadList1
      |  Dispatch
      break;
    case BC_LOADLIST2:
      |=>bc:
      |  instr_D
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterLoadList2
      |  Dispatch
      break;
    case BC_NEWLIST:
      |=>bc:
      |  instr_B
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  mov CARG3L, ARG2
      |  fcall InterpreterNewList
      |  Dispatch
      break;
    case BC_ADDLIST:
      |=>bc:
      |  instr_D
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  mov CARG3L, ARG2
      |  mov CARG4L, ARG3
      |  fcall InterpreterAddList
      |  Dispatch
      break;
    case BC_LOADOBJ0:
      |=>bc:
      |  instr_F
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  fcall InterpreterLoadObj0
      |  Dispatch
      break;
    case BC_LOADOBJ1:
      |=>bc:
      |  instr_D
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterLoadObj1
      |  retbool
      break;
    case BC_NEWOBJ:
      |=>bc:
      |  instr_B
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  mov CARG3L, ARG2
      |  fcall InterpreterNewObj
      |  Dispatch
      break;
    case BC_ADDOBJ:
      |=>bc:
      |  instr_D
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterAddObj
      |  retbool
      break;
    case BC_LOADCLS:
      |=>bc:
      |  instr_B
      |  savepc
      |  mov CARG1 , RUNTIME
      |  mov CARG2L, ARG2
      |  lea CARG3 , [STK+ARG1F*8]
      |  fcall InterpreterLoadCls
      |  Dispatch
      break;
    case BC_INITCLS:
      |=>bc:
      |  instr_G
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG2L, ARG1
      |  fcall InterpreterInitCls
      |  retbool
      break;

    /** =====================================================
     *  Arith XV                                            |
     *  ====================================================*/
    |.macro arith_rv,BC,slow_path,instr
    |  instr_D
    |  mov RREG, qword [STK+ARG3F*8]

    // Use arg3 as temporary in favoer over T1/T2
    |.if CHECK_NUMBER_MEMORY
    |  mov T0L, dword[STK+ARG3F*8+4]
    |.else
    |  mov T0,RREG
    |  shr T0,32
    |.endif

    |  cmp T0L, Value::FLAG_REAL
    |  jnb ->slow_path

    |  LdReal xmm0,ARG2F
    |  movd xmm1, RREG
    |  instr xmm0,xmm1
    |  StReal ARG1F,xmm0
    |  Dispatch
    |.endmacro

    case BC_ADDRV:
      |=>bc:
      |  arith_rv BC_ADDRV,InterpArithRealL,addsd
      break;

    case BC_SUBRV:
      |=>bc:
      |  arith_rv BC_SUBRV,InterpArithRealL,subsd
      break;

    case BC_MULRV:
      |=>bc:
      |  arith_rv BC_MULRV,InterpArithRealL,mulsd
      break;

    case BC_DIVRV:
      |=>bc:
      |  arith_rv BC_DIVRV,InterpArithRealL,divsd
      break;

    /* =========================================================
     * Arith VX                                                |
     * ========================================================*/
    |.macro arith_vr,BC,slow_path,instr
    |  instr_D
    |  mov LREG,qword [STK+ARG2F*8]

    |.if CHECK_NUMBER_MEMORY
    |  mov T0L ,dword [STK+ARG2F*8+4]
    |.else
    |  mov T0,LREG
    |  shr T0,32
    |.endif

    |  cmp T0L,Value::FLAG_REAL
    |  jnb ->slow_path

    |  movd xmm0,LREG
    |  LdReal xmm1,ARG3F
    |  instr xmm0,xmm1
    |  StReal ARG1F,xmm0
    |  Dispatch
    |.endmacro


    case BC_ADDVR:
      |=> bc:
      |  arith_vr BC_ADDVR,InterpArithRealR,addsd
      break;

    case BC_SUBVR:
      |=> bc:
      |  arith_vr BC_SUBVR,InterpArithRealR,subsd
      break;

    case BC_MULVR:
      |=> bc:
      |  arith_vr BC_MULVR,InterpArithRealR,mulsd
      break;

    case BC_DIVVR:
      |=> bc:
      |  arith_vr BC_DIVVR,InterpArithRealR,divsd
      break;

    /* ========================================================
     * ArithVV
     *
     * The arithVV is also optimized for common path here.
     * We inline all numeric calculation cases, int/real.
     * Other cases will be pushed back to call C++ function
     * which may be extended to support meta function call
     *
     * ========================================================*/
    // perform VV calaculation based on instruction
    |.macro arith_vv,BC,instrR
    |=> BC:
    |  instr_D

    // check the lhs to be integer or not
    |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
    |  jnb ->InterpArithVV

    | // real && xx
    |  cmp dword [STK+ARG3F*8+4],Value::FLAG_REAL
    |  jnb ->InterpArithVV

    |  movsd xmm0, qword [STK+ARG2F*8]
    |  instrR xmm0, qword [STK+ARG3F*8]
    |  StReal ARG1F,xmm0
    |  Dispatch
    |.endmacro

    case BC_ADDVV:
      |  arith_vv BC_ADDVV,addsd
      break;
    case BC_SUBVV:
      |  arith_vv BC_SUBVV,subsd
      break;
    case BC_MULVV:
      |  arith_vv BC_MULVV,mulsd
      break;
    case BC_DIVVV:
      |  arith_vv BC_DIVVV,divsd
      break;

    /* =============================================================
     * MODXX
     *
     *   Similar implementation like Lua not Luajit. Return casted
     *   integer's mod value instead of fmod style value
     *
     * ============================================================*/


    case BC_MODVR:
      |=>bc:
      |  instr_D

      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
      |  jnb ->InterpArithVV

      |  LdReal2Int ARG3,ARG3F,T0
      |  cvtsd2si eax ,qword [STK+ARG2F*8]  // ARG2F == rax

      |.if CHECK_MOD_BY_ZERO
      |  test ARG3,ARG3
      |  je ->ModByZero
      |.endif

      |  cdq
      |  idiv     ARG3
      |  StRealFromInt ARG1F,edx
      |  Dispatch
      break;

    case BC_MODRV:
      |=>bc:
      |  instr_D

      |  cmp dword [STK+ARG3F*8+4], Value::FLAG_REAL
      |  jnb ->InterpArithVV

      |  LdReal2Int eax,ARG2F,T0  // ARG2F == rax
      |  cvtsd2si ARG3 ,qword [STK+ARG3F*8]

      |.if CHECK_MOD_BY_ZERO
      |  test ARG3,ARG3
      |  je ->ModByZero
      |.endif

      |  cdq
      |  idiv ARG3
      |  StRealFromInt ARG1F,edx
      |  Dispatch

      break;

    case BC_MODVV:
      |=>bc :
      |  instr_D
      |  cmp dword [STK+ARG2F*8+4] , Value::FLAG_REAL
      |  jnb ->InterpArithVV

      |  cmp dword [STK+ARG3F*8+4] , Value::FLAG_REAL
      |  jnb ->InterpArithVV

      |  cvtsd2si eax, qword [STK+ARG2F*8]  // ARG2F == rax
      |  cvtsd2si ARG3,qword [STK+ARG3F*8]

      |.if CHECK_MOD_BY_ZERO
      |  test ARG3,ARG3
      |  je ->ModByZero
      |.endif

      |  cdq
      |  idiv ARG3
      |  StRealFromInt ARG1F,edx
      |  Dispatch
      break;

    /* ==============================================================
     * POW part
     *
     * Currently we directly use std::pow/pow in libc for simplicity.
     * For numeric type we will directly call pow for other types
     * we will fallback to slow C++ function
     * =============================================================*/

    |.macro call_pow
    |  fcall pow
    |  movsd qword [STK+ARG1F*8], xmm0  // ARG1F is callee saved
    |.endmacro

    |.macro arith_pow,REGL,XREG,ARG,slow_pow
    |  mov REGL,dword [STK+ARG*8+4]
    |  cmp REGL,Value::FLAG_REAL
    |  jnb ->slow_pow
    |  movsd XREG,qword [STK+ARG*8]
    |  call_pow
    |  Dispatch
    |.endmacro

    case BC_POWRV:
      |=> bc:
      |  instr_D
      |  LdReal xmm0,ARG2F
      |  arith_pow RREGL,xmm1,ARG3F,InterpPowSlowRV
      break;

    case BC_POWVR:
      |=> bc:
      |  instr_D
      |  LdReal xmm1,ARG3F
      |  arith_pow LREGL,xmm0,ARG2F,InterpPowSlowVR
      break;

    case BC_POWVV:
      |=> bc:
      |  jmp ->InterpPowSlowVV
      break;


    /* ====================================================================
     * Comparison
     *
     * Inline numeric comparison
     * ===================================================================*/

    /* --------------------------------------------------------------------
     * Comparison XV                                                      |
     * -------------------------------------------------------------------*/
    |.macro comp_xv,BC,slow_path,false_jmp
    |  instr_D

    |  cmp dword [STK+ARG3F*8+4], Value::FLAG_REAL
    |  jnb ->slow_path

    |  LdReal xmm0, ARG2F
    |  ucomisd xmm0, qword [STK+ARG3F*8]
    // cmov instruction is slower here , doesn't worth it
    |  false_jmp >1
    |  mov dword[STK+ARG1F*8+4], Value::FLAG_TRUE
    |2:
    |  Dispatch
    |1:
    |  mov dword[STK+ARG1F*8+4], Value::FLAG_FALSE
    |  jmp <2
    |.endmacro

    case BC_LTRV:
      |=>bc:
      |  comp_xv BC_LTRV,InterpCompareRV,jae
      break;
    case BC_LERV:
      |=> bc:
      |  comp_xv BC_LERV,InterpCompareRV,ja
      break;
    case BC_GTRV:
      |=>bc:
      |  comp_xv BC_GTRV,InterpCompareRV,jbe
      break;
    case BC_GERV:
      |=> bc:
      |  comp_xv BC_GERV,InterpCompareRV,jb
      break;
    case BC_EQRV:
      |=> bc:
      |  comp_xv BC_EQRV,InterpCompareRV,jne
      break;
    case BC_NERV:
      |=> bc:
      |  comp_xv BC_NERV,InterpCompareRV,je
      break;

    /* --------------------------------------------------------------------
     * Comparison VX                                                      |
     * -------------------------------------------------------------------*/
    |.macro comp_vx,BC,slow_path,false_jmp
    |  instr_D

    |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
    |  jnb ->slow_path

    |  LdReal xmm1,ARG3F
    |  movsd xmm0, qword [STK+ARG2F*8]
    |  ucomisd xmm0,xmm1
    |  false_jmp >1
    |  mov dword [STK+ARG1F*8+4], Value::FLAG_TRUE
    |2:
    |  Dispatch
    |1:
    |  mov dword [STK+ARG1F*8+4], Value::FLAG_FALSE
    |  jmp <2
    |.endmacro

    case BC_LTVR:
      |=>bc:
      |  comp_vx BC_LTVR,InterpCompareVR,jae
      break;
    case BC_LEVR:
      |=>bc:
      |  comp_vx BC_LEVR,InterpCompareVR,ja
      break;
    case BC_GTVR:
      |=>bc:
      |  comp_vx BC_GTVR,InterpCompareVR,jbe
      break;
    case BC_GEVR:
      |=>bc:
      |  comp_vx BC_GEVR,InterpCompareVR,jb
      break;
    case BC_EQVR:
      |=>bc:
      |  comp_vx BC_EQVR,InterpCompareVR,jne
      break;
    case BC_NEVR:
      |=>bc:
      |  comp_vx BC_NEVR,InterpCompareVR,je
      break;


    /* --------------------------------------------------------
     * comparison VV
     *
     * We do inline type promotion and comparison for all
     * numeric type
     * --------------------------------------------------------*/
    |.macro comp_vv,BC,false_jmp
    |  instr_D

    |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
    |  jnb ->InterpCompareVV

    |  cmp dword [STK+ARG3F*8+4], Value::FLAG_REAL
    |  jnb ->InterpCompareVV

    |  movsd xmm0, qword [STK+ARG2F*8]
    |  ucomisd xmm0, qword  [STK+ARG3F*8]
    |  false_jmp >1
    |  mov dword [STK+ARG1F*8+4], Value::FLAG_TRUE
    |2:
    |  Dispatch
    |1:
    |  mov dword [STK+ARG1F*8+4], Value::FLAG_FALSE
    |  jmp <2
    |.endmacro

    case BC_LTVV:
      |=>bc:
      |  comp_vv,BC_LTVV,jae
      break;
    case BC_LEVV:
      |=>bc:
      |  comp_vv,BC_LEVV,ja
      break;
    case BC_GTVV:
      |=>bc:
      |  comp_vv,BC_GTVV,jbe
      break;
    case BC_GEVV:
      |=>bc:
      |  comp_vv,BC_GEVV,jb
      break;

    |.macro comp_eqne_vv,BC,T,F
    |  instr_D

    // We fast check numeric number's value. Pay attension that bit
    // comparison is not okay due to the fact we have +0 and -0
    |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
    |  jnb >3

    |  cmp dword [STK+ARG3F*8+4], Value::FLAG_REAL
    |  jnb >3

    |  movsd xmm0, qword [STK+ARG2F*8]
    |  ucomisd xmm0, qword [STK+ARG3F*8]
    |  jne >1
    |  mov dword [STK+ARG1F*8+4], T
    |2:
    |  Dispatch
    |1:
    |  mov dword [STK+ARG1F*8+4], F
    |  jmp <2

    // Here we mainly do a comparison between other primitive types
    |3:
    |  mov LREG, qword [STK+ARG2F*8]
    |  mov RREG, qword [STK+ARG3F*8]
    |  mov T0  , LREG
    |  mov T1  , RREG
    |  shr LREG, 48
    |  shr RREG, 48

    |  cmp LREG, RREG
    |  jne >4

    // LREG and RREG doesn't match, we need to rule out heap type to
    // actually tell whether LREGL and RREGL are the same or not
    |  cmp LREGL, Value::FLAG_HEAP
    |  je >5
    |  cmp RREGL, Value::FLAG_HEAP
    |  je >5

    // Okay, both LREGL an RREGL are not heap tag, so we can assert
    // they are equal due to they are primitive type
    |  mov dword [STK+ARG1F*8+4], T
    |  jmp <2

    // Primitive type are definitly not equal since they have different
    // type, so we just return *FALSE*
    |4:
    |  mov dword [STK+ARG1F*8+4], F
    |  jmp <2

    // When we reach 5, we know at least one of the operand is a *HEAP*
    // object. We can try to inline a SSO check here or just go back to
    // InterpCompareVV to do the job
    |5:
    |  CheckSSORaw T0,>7
    |  CheckSSORaw T1,>7
    |  cmp T0,T1
    |  jne >6
    |  mov dword [STK+ARG1F*8+4], T
    |6:
    |  mov dword [STK+ARG1F*8+4], F
    |  jmp <2

    // Calls into InterpreterCompare
    |7:
    |  // T0/T1 stores HeapObject*
    |  savepc
    |  mov CARG1, RUNTIME
    |  lea CARG2, [STK+ARG2F*8]
    |  lea CARG3, [STK+ARG3F*8]
    |  lea CARG4, [STK+ARG1F*8] // where to set the true/false
    |  fcall InterpreterCompare
    |  test eax,eax
    |  je ->InterpFail
    |  Dispatch
    |.endmacro


    case BC_EQVV:
      |=>bc:
      |  comp_eqne_vv BC_EQVV,Value::FLAG_TRUE,Value::FLAG_FALSE
      break;
    case BC_NEVV:
      |=>bc:
      |  comp_eqne_vv BC_NEVV,Value::FLAG_FALSE,Value::FLAG_TRUE
      break;

    // For string equality comparison , we inline SSO comparison since
    // they are just checking the address are equal or not
    |.macro eq_sv,BC,SlowPath,instr,false_jmp
    |  instr_D
    |  LdStr LREG,ARG2F
    |  mov RREG,qword [STK+ARG3F*8]
    |  CheckSSO LREG,>1
    |  CheckSSOV RREG,>1

    |.if USE_CMOV_COMP
    |  mov ARG2, Value::FLAG_FALSE
    |  cmp LREG,RREG
    |  instr ARG2,dword [->FlagTrueConst]
    |  mov dword [STK+ARG1F*8+4],ARG2
    |.else
    |  cmp LREG,RREG
    |  false_jmp >8
    |  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
    |  jmp >7
    |8:
    |  mov dword [STK+ARG1F*8+4],Value::FLAG_FALSE
    |.endif

    |7:
    |  Dispatch

    |1:
    |  jmp ->SlowPath
    |.endmacro

    |.macro eq_vs,BC,SlowPath,instr,false_jmp
    |  instr_D
    |  mov LREG, qword [STK+ARG2F*8]
    |  LdStr RREG,ARG3F
    |  CheckSSOV LREG,>1
    |  CheckSSO  RREG,>1

    |.if USE_CMOV_COMP
    |  mov ARG2, Value::FLAG_FALSE
    |  cmp LREG,RREG
    |  instr ARG2,dword [->FlagTrueConst]
    |  mov dword [STK+ARG1F*8+4],ARG2
    |.else
    |  cmp LREG,RREG
    |  false_jmp >8
    |  mov dword [STK+ARG1F*8+4],Value::FLAG_TRUE
    |  jmp >7
    |8:
    |  mov dword [STK+ARG1F*8+4],Value::FLAG_FALSE
    |.endif

    |7:
    |  Dispatch

    |1:
    |  jmp ->SlowPath
    |.endmacro

    case BC_EQSV:
      |=> bc:
      |  eq_sv BC_EQSV,InterpCompareSV,cmove,jne
      break;
    case BC_EQVS:
      |=> bc:
      |  eq_vs BC_EQVS,InterpCompareVS,cmove,jne
      break;
    case BC_NESV:
      |=>bc:
      |  eq_sv BC_NESV,InterpCompareSV,cmovne,je
      break;
    case BC_NEVS:
      |=>bc:
      |  eq_vs BC_NEVS,InterpCompareVS,cmovne,je
      break;

    /* -------------------------------------------------
     * Unary                                           |
     * ------------------------------------------------*/

    // inline integers and reals inlined to be processed
    // and other types are throwed away to the slower
    // functions to help since we may need to support meta
    // function in the future
    case BC_NEGATE:
      |=> bc:
      |  instr_E
      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
      |  jnb >8

      |  movsd, xmm0, qword [STK+ARG2F*8]
      |  rconst_sign xmm1
      |  xorpd xmm0, xmm1
      |  movsd qword [STK+ARG1F*8], xmm0
      |  Dispatch

      |8:
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG2, qword [STK+ARG2F*8]
      |  fcall InterpreterNegateFail
      |  jmp ->InterpFail
      break;

    case BC_NOT:
      |=> bc:
      |  instr_E
      |  mov ARG3, Value::FLAG_FALSE
      // check if the value is a heap object
      |  cmp word [STK+ARG2F*8+6], Value::FLAG_HEAP
      |  je >1
      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_FALSECOND
      |  cmova ARG3, dword [->FlagTrueConst]
      |1:
      |  mov dword [STK+ARG1F*8+4], ARG3
      |  Dispatch
      break;

    // ------------------------------------------------
    // Branch                                         |
    // -----------------------------------------------*/

    // branch PC
    |.macro branch_to,where,TEMP
    |  mov TEMP,qword SAVED_PC
    |  lea PC,[TEMP+where*4]
    |.endmacro

    case BC_JMPT:
      |=>bc:
      |  instr_B
      |  cmp word  [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  je >2
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_FALSECOND
      |  ja >1
      |2:
      |  branch_to ARG2F,ARG3F
      |1:  // fallthrough
      |  Dispatch
      break;

    case BC_JMPF:
      |=>bc:
      |  instr_B
      |  cmp word  [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  je >2
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_FALSECOND
      |  jbe >2
      |  branch_to ARG2F,ARG3F
      |2: // fallthrough
      |  Dispatch
      break;

    case BC_TERN:
      |=>bc:
      |  instr_E
      |  cmp word  [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  je >2
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_FALSECOND
      |  jbe >2
      |  mov ARG2, dword [PC]
      |  branch_to ARG2F,ARG3F
      |1: // fallthrough
      |  Dispatch
      |2:
      |  add PC,4
      |  jmp <1
      break;

    case BC_AND:
      |=>bc:
      |  instr_E
      |  cmp word  [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  je >1
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_FALSECOND
      |  jbe >1

      // move the value from ARG1F --> ARG2F
      |  mov ARG3F , qword [STK+ARG1F*8]
      |  mov qword [STK+ARG2F*8] , ARG3F

      |  mov ARG2  , dword [PC] // extra slot contains branch target
      |  branch_to ARG2F,ARG3F
      |2: // fallthrough
      |  Dispatch
      |1:
      |  add PC,4
      |  jmp <2
      break;

    case BC_OR:
      |=>bc:
      |  instr_E
      |  cmp word  [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  je >2
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_FALSECOND
      |  ja >1
      |2:
      |  mov ARG3F, qword [STK+ARG1F*8]
      |  mov qword [STK+ARG2F*8], ARG3F

      |  mov ARG2 , dword [PC]
      |  branch_to ARG2F,ARG3F
      |3: // fallthrough
      |  Dispatch
      |1:
      |  add PC,4
      |  jmp <3
      break;

    |.macro absolute_jmp,BC
    |=>BC:
    |  instr_G
    |  branch_to ARG1F,ARG3F
    |  Dispatch
    |.endmacro

    case BC_JMP:
      |  absolute_jmp,BC_JMP
      break;

    // ----------------------------------------------------------
    // Property/Index
    // ---------------------------------------------------------*/


    case BC_PROPGETSSO:
      |.macro getsso_found
      |  mov T0, qword [RREG+MapEntryLayout::kValueOffset]
      |  mov qword [STK+ARG1F*8], T0
      |  Dispatch
      |.endmacro

      |=>bc:
      |  instr_D
      // Check ARG2F points to a *Object*
      |  cmp word [STK+ARG2F*8+6], Value::FLAG_HEAP
      |  jne ->InterpPropNeedObject

      |  lea  CARG2, [STK+ARG2F*8]
      |  mov ARG2F, qword [STK+ARG2F*8]
      |  CheckObj ARG2F, >9

      // Load *Map* object into ARG2F
      |  mov ARG2F, qword [ARG2F+ObjectLayout::kMapOffset]
      |  mov ARG2F, qword [ARG2F]

      // Load SSO/key into ARG3F
      |  LdSSO ARG3F,ARG3F,T0

      // Do the search
      |  objfind_sso ARG2F,ARG3F,>8,getsso_found

      |8: // not fonud label
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG2, ARG3F
      |  fcall InterpreterPropGetSSONotFound
      |  jmp ->InterpFail

      |9: // failed at *object*
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG3L, ARG3
      |  lea CARG4, [STK+ARG1F*8]
      |  fcall InterpreterPropGetSSO
      |  retbool
      break;

    case BC_PROPGET:
      // This version of bytecode indicates that the string *MUST NOT* be a SSO
      // just directly fallback to the slow version written in C++
      |=>bc:
      |  instr_D
      |  savepc
      |  mov   CARG1, RUNTIME
      |  lea   CARG2, [STK+ARG2F*8]
      |  LdStr CARG3, ARG3F
      |  lea   CARG4, [STK+ARG1F*8]
      |  fcall InterpreterPropGet
      |  retbool
      break;

    case BC_PROPSETSSO:
      |=>bc:
      |.macro setsso_found
      |  mov T0, qword [STK+ARG3F*8]
      |  mov qword [RREG+MapEntryLayout::kValueOffset], T0
      |  Dispatch
      |.endmacro

      |  instr_D
      |  cmp word [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  jne ->InterpPropNeedObject

      |  lea CARG2, [STK+ARG1F*8]
      |  mov ARG1F, qword [STK+ARG1F*8]
      |  CheckObj ARG1F, >9

      // Load the *Map* object into ARG1F
      |  mov ARG1F, qword [ARG1F+ObjectLayout::kMapOffset]
      |  mov ARG1F, qword [ARG1F]
      |  LdSSO ARG2F,ARG2F,T0

      |  objfind_sso ARG1F,ARG2F,>8,setsso_found

      |8:
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG2, ARG2F
      |  fcall InterpreterPropSetSSONotFound
      |  jmp ->InterpFail

      |9:
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG3L, ARG2
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterPropSetSSO
      |  retbool
      break;

    case BC_PROPSET:
      |=>bc:
      |  instr_D
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  LdStr CARG3, ARG2F
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterPropSet
      |  retbool
      break;

    // Assume the ARG3F *already* contains index value ,4 bytes
    |.macro index_list,oob,not_list
    |  cmp word [STK+ARG2F*8+6], Value::FLAG_HEAP
    |  jne ->InterpPropNeedObject

    |  mov LREG, qword [STK+ARG2F*8]
    |  CheckList LREG,not_list // if it is not a list then jump

    |  cmp ARG3, dword [LREG+ListLayout::kSizeOffset]
    |  jae ->oob

    |  mov RREG, qword [LREG+ListLayout::kSliceOffset]
    |  mov ARG2F,qword [RREG]

    |  mov ARG2F, qword [ARG2F+ARG3F*8+SliceLayout::kArrayOffset]
    |  mov qword [STK+ARG1F*8], ARG2F

    |  Dispatch
    |.endmacro

    case BC_IDXGET:
      |=>bc:
      |  instr_D
      |  cmp dword [STK+ARG3F*8+4], Value::FLAG_REAL
      |  jnb >1
      |  cvtsd2si T0, qword [STK+ARG3F*8]
      |  test T0,T0
      |  js >1 // negative index, cannot handle

      // do the indexing for list or array
      |  mov ARG3F, T0
      |  index_list,InterpIdxOutOfBoundGet,->InterpIdxGetI

      // general type index
      |1:
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG2F*8]
      |  lea CARG3, [STK+ARG3F*8]
      |  lea CARG4, [STK+ARG1F*8]
      |  fcall InterpreterIdxGet
      |  retbool
      break;

    case BC_IDXGETI:
      |=>bc:
      |  instr_D
      |  index_list,InterpIdxOutOfBoundGet,->InterpIdxGetI
      break;

    |.macro set_list,oob,not_list
    |  cmp word [STK+ARG1F*8+6], Value::FLAG_HEAP
    |  jne ->InterpPropNeedObject

    |  mov LREG, qword [STK+ARG1F*8]
    |  CheckList LREG,not_list

    |  cmp ARG2, dword [LREG+ListLayout::kSizeOffset]
    |  jae ->oob

    |  mov RREG, qword [LREG+ListLayout::kSliceOffset]
    |  mov ARG1F,qword [RREG]  // ARG1F --> Slice*

    |  mov LREG, qword [STK+ARG3F*8]
    |  mov qword [ARG1F+ARG2F*8+SliceLayout::kArrayOffset], LREG
    |  Dispatch
    |.endmacro


    case BC_IDXSET:
      |=>bc:
      |  instr_D

      // check the idx is a number
      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
      |  jnb >1
      // conversion
      |  cvtsd2si T0, qword [STK+ARG2F*8]
      |  test T0, T0
      |  jz >1

      |  mov ARG2F, T0
      |  set_list,InterpIdxOutOfBoundSet,->InterpIdxSetI

      |1:
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterIdxSet
      |  retbool
      break;


    case BC_IDXSETI:
      |=>bc:
      |  instr_D // ARG1 == object; ARG2 == imm; ARG3 == value
      |  set_list,InterpIdxOutOfBoundSet,->InterpIdxSetI
      break;

    /* ========================================================
     * Globals
     * =======================================================*/
    case BC_GGETSSO:
      // handler for handling key entry found case
      |.macro ggetsso_found
      |  mov LREG, qword [RREG+MapEntryLayout::kValueOffset]
      |  mov qword [STK+ARG1F*8],LREG
      |  Dispatch
      |.endmacro

      |=>bc:
      |  instr_B

      |  mov ARG3F, qword [RUNTIME+RuntimeLayout::kGlobalOffset]
      |  mov ARG3F, qword [ARG3F]

      |  mov ARG3F, qword [ARG3F+ObjectLayout::kMapOffset]
      |  mov ARG3F, qword [ARG3F]

      |  LdSSO ARG2F,ARG2F,T0

      |  objfind_sso ARG3F,ARG2F,>8,ggetsso_found

      // Globals not found
      |8:
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG2, ARG2F
      |  fcall InterpreterGGetNotFoundSSO
      |  jmp ->InterpFail
      break;

    case BC_GGET:
      |=>bc:
      |  instr_B
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  LdStr CARG3, ARG2F
      |  fcall InterpreterGGet
      |  retbool
      break;

    case BC_GSETSSO:
      |.macro gsetsso_found
      |  mov LREG, qword [STK+ARG2F*8]
      |  mov qword [RREG+MapEntryLayout::kValueOffset], LREG
      |  Dispatch
      |.endmacro

      |=>bc:
      |  instr_B

      |  mov ARG3F, qword [RUNTIME+RuntimeLayout::kGlobalOffset]
      |  mov ARG3F, qword [ARG3F]

      |  mov ARG3F, qword [ARG3F+ObjectLayout::kMapOffset]
      |  mov ARG3F, qword [ARG3F]

      |  LdSSO ARG1F,ARG1F,T0
      |  objfind_sso ARG3F,ARG1F,>8,gsetsso_found
      |8:
      |  savepc
      |  mov CARG1, RUNTIME
      |  mov CARG2, ARG1F
      |  fcall InterpreterGSetNotFoundSSO
      |  jmp ->InterpFail
      break;

    case BC_GSET:
      |=>bc:
      |  instr_C
      |  savepc
      |  mov CARG1, RUNTIME
      |  LdStr CARG2, ARG1F
      |  lea CARG3, [STK+ARG2F*8]
      |  fcall InterpreterGSet
      |  retbool
      break;

    // ==========================================================
    // Upvalue
    // ==========================================================
    case BC_UVGET:
      |=>bc:
      |  instr_B
      |  LdUV LREG,ARG2F
      |  mov  qword [STK+ARG1F*8], LREG
      |  Dispatch
      break;

    case BC_UVSET:
      |=>bc:
      |  instr_C
      |  mov RREG, qword [STK+ARG2F*8]
      |  StUV ARG1F,RREG
      |  Dispatch
      break;


    /* ========================================================
     * Loop instructions
     *
     * Loop is optimized for situation that condition/step and
     * induction variable are all *integer* value
     * =======================================================*/
    case BC_FSTART:
      |=>bc:
      |  instr_B
      // must be boolean flag here
      |  cmp dword [STK+ACCFIDX], Value::FLAG_FALSE
      |  je >1
      |2:
      |  Dispatch
      |1:
      |  branch_to ARG2F,ARG3F
      |  jmp <2
      break;

    case BC_FEND1:
      |=>bc:
      |  instr_E // actually TYPE_H instruction
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_REAL
      |  jnb >6

      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
      |  jnb >6

      |  movsd xmm0, qword [STK+ARG1F*8]
      |  ucomisd xmm0, qword [STK+ARG2F*8]
      |  jae >8 // loop exit

      |  mov ARG1, dword [PC]
      |  branch_to ARG1F,ARG3F
      |7:
      |  DispatchCheckJIT 2
      |8:
      |  // skip the 4th argument
      |  add PC,4
      |  jmp <7

      |6: // fallback for situation that is not integer
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  mov CARG4L, dword [PC]
      |  fcall InterpreterForEnd1
      // handle return value
      |  test eax,eax
      |  je ->InterpFail
      |  mov PC, qword [RUNTIME+RuntimeLayout::kCurPCOffset]
      |  jmp <7
      break;

    case BC_FEND2:
      |=>bc:
      |  instr_D
      |  cmp dword [STK+ARG1F*8+4], Value::FLAG_REAL
      |  jnb >6
      |  cmp dword [STK+ARG2F*8+4], Value::FLAG_REAL
      |  jnb >6
      |  cmp dword [STK+ARG3F*8+4], Value::FLAG_REAL
      |  jnb >6

      |  movsd xmm0, qword [STK+ARG1F*8]
      |  addsd xmm0, qword [STK+ARG3F*8]
      |  ucomisd xmm0, qword [STK+ARG2F*8]
      |  movsd qword [STK+ARG1F*8], xmm0 // need to write back
      |  jae >8 // loop exit

      // fallthrough
      |  mov ARG1, dword [PC]
      |  branch_to ARG1F,ARG3F
      |7:
      |  DispatchCheckJIT 2
      |8:
      |  add PC,4
      |  jmp <7

      |6:
      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  lea CARG4, [STK+ARG3F*8]
      |  mov CARG5L, dword [PC]
      |  fcall InterpreterForEnd2
      |  test eax,eax
      |  je ->InterpFail
      |  mov PC, qword [RUNTIME+RuntimeLayout::kCurPCOffset]
      |  jmp <7
      break;

    case BC_FEVRSTART:
      |=>bc:
      |  instr_X
      |  Dispatch
      break;

    case BC_FEVREND:
      |=>bc:
      |  instr_G
      |  branch_to ARG1F,ARG3F
      |  DispatchCheckJIT 1
      break;

    case BC_BRK:
      |  absolute_jmp BC_BRK
      break;

    case BC_CONT:
      |  absolute_jmp BC_CONT
      break;

    // Foreach instructions
    case BC_FESTART:
      |=>bc:
      |  instr_B

      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  mov CARG3L, ARG2
      |  fcall InterpreterFEStart
      |  test eax,eax
      |  je ->InterpFail
      |  mov PC, qword [RUNTIME+RuntimeLayout::kCurPCOffset]
      |  Dispatch
      break;

    case BC_FEEND:
      |=>bc:
      |  instr_B

      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  mov CARG3L,ARG2
      |  fcall InterpreterFEEnd
      |  mov PC, qword [RUNTIME+RuntimeLayout::kCurPCOffset]

      |  DispatchCheckJIT 1
      break;

    case BC_IDREF:
      |=>bc:
      |  instr_D

      |  savepc
      |  mov CARG1, RUNTIME
      |  lea CARG2, [STK+ARG1F*8]
      |  lea CARG3, [STK+ARG2F*8]
      |  lea CARG4, [STK+ARG3F*8]
      |  fcall InterpreterIDref
      |  Dispatch
      break;

    /* ------------------------------------------------------------
     * Call/TCall/Return
     * -----------------------------------------------------------*/

      |.macro do_call,set_flag,slow_path
      |  instr_D

      // 1. Do a stack check to see wheather we *need* to grow the
      //    stack since a function call *may* run out of the stack
      //    space
      |  lea T0, [STK+ARG2F*8]
      |  cmp T0, qword [RUNTIME+RuntimeLayout::kStackEndOffset]
      |  jae >9  // Resize stack

      // 2. Check object type
      |3:
      |  cmp word [STK+ARG1F*8+6], Value::FLAG_HEAP
      |  jne ->InterpNeedObject

      // Okay , we have heap object now and we need to tell its type
      // and then do the actual dispatching. 2 types of value can be
      // used for a call , one is prototype in script ; the other is
      // extension type. Extension type will be dispatched by c++
      // function.
      |  mov RREG, qword [STK+ARG1F*8]
      |  DerefPtrFromV RREG
      |  mov LREG, qword [RREG]                    // Get HeapObject*

      |  CheckHeapPtrT LREG,CLOSURE_BIT_PATTERN  ,->slow_path

      // Check argument number
      |  cmp ARG3_8 , byte [LREG+ClosureLayout::kArgumentSizeOffset]
      |  jne ->InterpArgumentMismatch

      // RREG (Closure**)
      // LREG (Closure* )
      // ARG2 (Base)
      // ARG3 (Narg)

      /*
       * Store the old PC into the *current* frame for recovery of
       * stack frame when return
       */
      |  movzx ARG1 , word [STK-10]
      |  shl   ARG1F, 48
      |  or    ARG1F, PC
      |  mov   qword [STK-16], ARG1F

      /*
       * Store the BASE value into the *new* frame
       */
      |  shl ARG2F,51              // 51 == 48 + 3 (3 means ARG2*8)
      |  mov qword [T0-16], ARG2F  // This will reset the whole quad to be 0 ended
                                   // Because we use *or* to set the PC to the place

      |  mov qword [T0-8] , RREG   // Set the *closure* pointer into the *new* frame

      /*
       * Set the CompilationJob field to be NULL which indicates no JIT is pending
       */
      |  xor ARG2F,ARG2F
      |  mov qword [T0-24], ARG2F

      // set the needed flag
      |  set_flag

      // set the closure pointer back to *runtime* object
      |  mov qword [RUNTIME+RuntimeLayout::kCurClsOffset],RREG

      // get the *new* proto object
      |  mov PROTO , qword [LREG+ClosureLayout::kPrototypeOffset]

      // get the *new* code buffer starting pointer
      |  mov PC , qword [LREG+ClosureLayout::kCodeBufferOffset]

      // change the current context PROTO and PC register to the correct field
      // of the new closure
      |  mov STK   , T0               // set the new *stack*
      |  mov qword [RUNTIME+RuntimeLayout::kCurStackOffset], T0

      |  mov qword SAVED_PC, PC       // set the savedpc

      |  DispatchCheckJIT 1

      // stack overflow
      // ARG2F/ARG3F are caller saved, ARG1F are callee saved
      |9:
      |  savepc
      |  mov qword [SAVED_SLOT1] , ARG2F
      |  mov qword [SAVED_SLOT2] , ARG2F
      |  mov CARG1, RUNTIME
      |  fcall ResizeStack
      |  test eax,eax
      |  je ->InterpFail
      |  mov ARG2F, qword [SAVED_SLOT1]
      |  mov ARG3F, qword [SAVED_SLOT2]
      |  jmp <3 // resume execution
      |.endmacro

      |.macro call_flag
      |.endmacro

      |.macro tcall_flag
      // A tcall flag needs to be set up and no need to store PC
      // offset in current frame since we won't return to this frame
      |  mov byte [STK-1], 1 // mark it as a tcall frame
      |.endmacro


    case BC_CALL:
      |=>bc:
      |  do_call call_flag,InterpCall
      break;

    case BC_TCALL:
      |=>bc:
      |  do_call tcall_flag,InterpTCall
      break;

    |.macro do_ret

    |2:
    |  movzx ARG2F, word [STK-10]
    |  cmp ARG2F,IFRAME_EOF
    |  je ->InterpReturn             // Interpreter return from here

    // Check if we have a pending compilation job
    |  mov T0, qword [STK-24]
    |  test T0, T0
    |  je >3
    |  Break // TODO:: Finish compilation job stuff

    |3:
    |  sub   STK  , ARG2F            // Now STK points to the *previous* frame
    // now STK points to the *previous* frame and we need to check
    // whether the previous frame is a frame we need to skip since
    // it maybe a tail call frame
    |  cmp byte [STK-1], 1
    |  je <2
    |1:
    |  mov   LREG , qword [STK-8]    // LREG == Closure**
    |  mov   qword [RUNTIME+RuntimeLayout::kCurClsOffset], LREG
    |  mov   ARG2F, qword [LREG]
    |  mov   PROTO, qword [ARG2F+ClosureLayout::kPrototypeOffset]
    |  mov   PC , qword [STK-16]
    |  and   PC , qword [->PointerMask]
    |  mov   ARG2F, qword [ARG2F+ClosureLayout::kCodeBufferOffset]
    |  mov   qword SAVED_PC, ARG2F
    |.endmacro

    case BC_RETNULL:
    |=>bc:
    |  instr_X
    |  mov ARG1F, qword [->ValueNullConst]
    |  do_ret
    |  mov dword [STK+ACCFIDX], Value::FLAG_NULL
    |  Dispatch
    break;

    case BC_RET:
    |=>bc:
    |  instr_X
    |  mov ARG1F, qword [ACC]
    |  do_ret
    |  mov qword [ACC], ARG1F
    |  Dispatch
    break;

    default:
      |=> bc:
      |  Break
      break;
  }
}

// Routine to generate profiler version of bytecode, assuming ExternalSymbolTable already
// get entry for the actual jumpping stuff
void GenBytecodeProfile( BuildContext* bctx , Bytecode bc ) {

  // Calls out to do the actual recording/profiling of the Bytecode
  |=>bc:
  |  mov CARG1, RUNTIME
  |  lea CARG2, [PC-4]
  |  fcall JITProfileBC
  |  test eax,eax
  |  cmovne STK,rax
  |  ResumeDispatch PC-4

  // Unfortunately, dasm doesn't support to get a jmp address from calling
  // a function so we have to hard code them via large switch case.
  // TODO:: Use external tool to generate this code stub
  switch(bc) {
    /* arithmetic */
    case BC_ADDRV:
      |  jmp extern addrv
      break;
    case BC_ADDVR:
      |  jmp extern addvr
      break;
    case BC_ADDVV:
      |  jmp extern addvv
      break;
    case BC_SUBRV:
      |  jmp extern subrv
      break;
    case BC_SUBVR:
      |  jmp extern subvr
      break;
    case BC_SUBVV:
      |  jmp extern subvv
      break;
    case BC_MULRV:
      |  jmp extern mulrv
      break;
    case BC_MULVR:
      |  jmp extern mulvr
      break;
    case BC_MULVV:
      |  jmp extern mulvv
      break;
    case BC_DIVRV:
      |  jmp extern divrv
      break;
    case BC_DIVVR:
      |  jmp extern divvr
      break;
    case BC_DIVVV:
      |  jmp extern divvv
      break;
    case BC_MODVR:
      |  jmp extern modvr
      break;
    case BC_MODRV:
      |  jmp extern modrv
      break;
    case BC_MODVV:
      |  jmp extern modvv
      break;
    case BC_POWRV:
      |  jmp extern powrv
      break;
    case BC_POWVR:
      |  jmp extern powvr
      break;
    case BC_POWVV:
      |  jmp extern powvv
      break;
    /* comparison */
    case BC_LTRV:
      |  jmp extern ltrv
      break;
    case BC_LTVR:
      |  jmp extern ltvr
      break;
    case BC_LTVV:
      |  jmp extern ltvv
      break;
    case BC_LERV:
      |  jmp extern lerv
      break;
    case BC_LEVR:
      |  jmp extern levr
      break;
    case BC_LEVV:
      |  jmp extern levv
      break;
    case BC_GTRV:
      |  jmp extern gtrv
      break;
    case BC_GTVR:
      |  jmp extern gtvr
      break;
    case BC_GTVV:
      |  jmp extern gtvv
      break;
    case BC_GERV:
      |  jmp extern gerv
      break;
    case BC_GEVR:
      |  jmp extern gevr
      break;
    case BC_GEVV:
      |  jmp extern gevv
      break;
    case BC_EQRV:
      |  jmp extern eqrv
      break;
    case BC_EQVR:
      |  jmp extern eqvr
      break;
    case BC_EQSV:
      |  jmp extern eqsv
      break;
    case BC_EQVS:
      |  jmp extern eqvs
      break;
    case BC_EQVV:
      |  jmp extern eqvv
      break;
    case BC_NERV:
      |  jmp extern nerv
      break;
    case BC_NEVR:
      |  jmp extern nevr
      break;
    case BC_NESV:
      |  jmp extern nesv
      break;
    case BC_NEVS:
      |  jmp extern nevs
      break;
    case BC_NEVV:
      |  jmp extern nevv
      break;
    /* unary */
    case BC_NEGATE:
      |  jmp extern negate
      break;
    case BC_NOT:
      |  jmp extern not_
      break;
    /* property */
    case BC_PROPGET:
      |  jmp extern propget
      break;
    case BC_PROPGETSSO:
      |  jmp extern propgetsso
      break;
    case BC_PROPSET:
      |  jmp extern propset
      break;
    case BC_PROPSETSSO:
      |  jmp extern propsetsso
      break;
    case BC_IDXGET:
      |  jmp extern idxget
      break;
    case BC_IDXSET:
      |  jmp extern idxset
      break;
    case BC_IDXSETI:
      |  jmp extern idxseti
      break;
    case BC_IDXGETI:
      |  jmp extern idxgeti
      break;
    /* call */
    case BC_CALL:
      |  jmp extern call
      break;
    case BC_TCALL:
      |  jmp extern tcall
      break;
    /* loop */
    case BC_FEND1:
      |  jmp extern fend1
      break;
    case BC_FEND2:
      |  jmp extern fend2
      break;
    case BC_FEEND:
      |  jmp extern feend
      break;
    case BC_FEVREND:
      |  jmp extern fevrend
      break;
    case BC_FSTART:
      |  jmp extern fstart
      break;
    case BC_FESTART:
      |  jmp extern festart
      break;
    /* jump/and/or */
    case BC_TERN:
      |  jmp extern tern
      break;
    case BC_JMPF:
      |  jmp extern jmpf
      break;
    case BC_JMPT:
      |  jmp extern jmpt
      break;
    case BC_AND:
      |  jmp extern and_
      break;
    case BC_OR:
      |  jmp extern or_
      break;
    default:
      lava_unreachF("Bytecode %s cannot have Feedback",GetBytecodeName(bc));
      break;
  }
}

// Help Dasm to resolve external address via Index idx
int ResolveExternalAddress( void** ctx , unsigned char* addr ,
                                         int idx,
                                         int type ) {
  (void)ctx;

  ExternalSymbolTable* t = GetExternalSymbolTable();
  ExternalSymbolTable::iterator itr = t->find(extnames[idx]);

  lava_verify( itr != t->end() );

  void* ptr = itr->second;
  lava_verify(CheckAddress(reinterpret_cast<std::uintptr_t>(ptr)));

  int iptr = HorribleCast(ptr);
  lava_verify(reinterpret_cast<void*>(iptr) == ptr);

  if(type) {
    int end = HorribleCast(addr+4);

    // Check whether the address is overflowed or not. I think this is
    // not needed but just in cases we have a bug so we don't end up
    // calling into some wired places into our code
    std::int64_t ptr64 = static_cast<std::int64_t>(iptr);
    std::int64_t end64 = static_cast<std::int64_t>(end);

    lava_verify( (ptr64-end64) >= std::numeric_limits<int>::min() &&
                 (ptr64-end64) <= std::numeric_limits<int>::max() );

    return iptr - HorribleCast(addr+4);
  } else {
    return iptr;
  }
}

} // namespace

AssemblyInterpreterStub::AssemblyInterpreterStub():
  dispatch_interp_      (),
  dispatch_profile_     (),
  dispatch_jit_         (),
  ic_entry_             (),
  ic_abi_entry_         (),
  interp_helper_        (),
  interp_entry_         (),
  interp_code_buffer_   (),
  profile_code_buffer_  ()
{}

bool AssemblyInterpreterStub::GenerateDispatchInterp() {
  // create a build context
  BuildContext bctx;

  // initialize dasm_State object
  dasm_init(&(bctx.dasm_ctx),2);

  // setup the freaking global
  void* glb_arr[GLBNAME__MAX];
  dasm_setupglobal(&(bctx.dasm_ctx),glb_arr,GLBNAME__MAX);

  // setup the dasm
  dasm_setup(&(bctx.dasm_ctx),actions);

  // initialize the tag value needed , at least for each BC we need one
  bctx.tag = DASM_GROWABLE_PC_SIZE;
  dasm_growpc(&(bctx.dasm_ctx), DASM_GROWABLE_PC_SIZE );

  // ----------------------------------------------------------
  // Order matters, it may change profile of our icache
  // ----------------------------------------------------------

  // build the helper
  GenerateHelper(&bctx);

  // build the prolog
  GenerateInterpMisc(&bctx);

  // generate all bytecode's routine
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    GenBytecode(&bctx,static_cast<Bytecode>(i));
  }

  std::size_t code_size;
  std::size_t buf_size;

  // we should never fail at *linking* if our code is *correct*
  lava_verify(dasm_link(&(bctx.dasm_ctx),&code_size) ==0);

  void* buffer = OS::CreateCodePage(code_size,&buf_size);
  if(!buffer) {
    return false;
  }

  // encode the assembly code into the buffer
  dasm_encode(&(bctx.dasm_ctx),buffer);

  // get all pc labels for entry of bytecode routine
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    dispatch_interp_[i] =
      reinterpret_cast<void*>(static_cast<char*>(buffer) + off);
  }

  // get all pc labels for helper routines
  for( int i = INTERP_HELPER_START ; i < DASM_GROWABLE_PC_SIZE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    interp_helper_.push_back(
        reinterpret_cast<void*>(static_cast<char*>(buffer)+off));
  }

  // get the *interpreter's* entry
  int off = dasm_getpclabel(&(bctx.dasm_ctx),INTERP_START);

  // set the corresponding field
  interp_entry_ = reinterpret_cast<void*>(static_cast<char*>(buffer) + off);
  interp_code_buffer_.Set(buffer,code_size,buf_size);
  return true;
}

bool AssemblyInterpreterStub::GenerateDispatchProfile() {
  // 1. register all BC handler into the symbol table later on for generating
  //    the profiler handler use case
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    lava_verify(InsertExternalSymbolTable(
            GetBytecodeName(static_cast<Bytecode>(i)),dispatch_interp_[i]));
  }

  // 2. build context to generate bytecode handler
  BuildContext bctx;
  dasm_init(&(bctx.dasm_ctx),2);
  void* glb_arr[GLBNAME__MAX];
  dasm_setupglobal(&(bctx.dasm_ctx),glb_arr,GLBNAME__MAX);
  dasm_setup(&(bctx.dasm_ctx),actions);
  bctx.tag = SIZE_OF_BYTECODE;
  dasm_growpc(&(bctx.dasm_ctx), SIZE_OF_BYTECODE);

  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    if(DoesBytecodeHasFeedback(static_cast<Bytecode>(i)))
      GenBytecodeProfile(&bctx,static_cast<Bytecode>(i));
  }

  std::size_t code_size , buf_size;
  lava_verify(dasm_link(&(bctx.dasm_ctx),&code_size)==0);
  void* buffer = OS::CreateCodePage(code_size,&buf_size);
  if(!buffer) {
    return false;
  }

  dasm_encode(&(bctx.dasm_ctx),buffer);

  // get all PC labels for profile bytecode
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    int off = dasm_getpclabel(&(bctx.dasm_ctx),i);
    dispatch_profile_[i] =
      reinterpret_cast<void*>(static_cast<char*>(buffer)+off);
  }
  profile_code_buffer_.Set(buffer,code_size,buf_size);
  return true;
}

bool AssemblyInterpreterStub::Init() {
  return GenerateDispatchInterp() && GenerateDispatchProfile();
}

AssemblyInterpreterStub::~AssemblyInterpreterStub() {
  interp_code_buffer_.FreeIfNeeded();
  profile_code_buffer_.FreeIfNeeded();
}

std::shared_ptr<AssemblyInterpreterStub> AssemblyInterpreterStub::GetInstance() {
  static std::shared_ptr<AssemblyInterpreterStub> kInterp;
  if(!kInterp) {
    kInterp.reset( new AssemblyInterpreterStub() );
    if(!kInterp->Init())
      return std::shared_ptr<AssemblyInterpreterStub>();
  }
  return kInterp;
}

Bytecode AssemblyInterpreterStub::CheckBytecodeRoutine( void* pc ) const {
  for( int i = 0 ; i < SIZE_OF_BYTECODE ; ++i ) {
    void* p = reinterpret_cast<void*>(pc);
    if(p == dispatch_interp_[i]) {
      return static_cast<Bytecode>(i);
    }
  }
  return SIZE_OF_BYTECODE;
}

int AssemblyInterpreterStub::CheckHelperRoutine( void* pc ) const {
  std::vector<void*>::const_iterator itr =
    std::find( interp_helper_.begin() , interp_helper_.end() , pc );
  if(itr != interp_helper_.end()) {
    return (static_cast<int>(std::distance(interp_helper_.begin(),itr))+INTERP_HELPER_START);
  } else {
    return -1;
  }
}

void AssemblyInterpreterStub::CodeBuffer::FreeIfNeeded() {
  if(entry) {
    OS::FreeCodePage(entry,buffer_size);
  }
}

void AssemblyInterpreterStub::Dump( DumpWriter* writer ) const {
  ZydisDecoder decoder;
  ZydisDecoderInit( &decoder, ZYDIS_MACHINE_MODE_LONG_64,
                              ZYDIS_ADDRESS_WIDTH_64);

  ZydisFormatter formatter;
  ZydisFormatterInit(&formatter,ZYDIS_FORMATTER_STYLE_INTEL);

  std::uint64_t pc = reinterpret_cast<std::uint64_t>(interp_code_buffer_.entry);
  std::uint8_t* rp = static_cast<std::uint8_t*>(interp_code_buffer_.entry);
  std::size_t size = interp_code_buffer_.code_size;

  writer->WriteL("CodeSize:%zu",size);
  ZydisDecodedInstruction instr;
  while(ZYDIS_SUCCESS(
        ZydisDecoderDecodeBuffer(&decoder,rp,size,pc,&instr))) {

    char buffer[256];
    ZydisFormatterFormatInstruction(
        &formatter,&instr,buffer,sizeof(buffer));
    // check labels
    {
      Bytecode bc = CheckBytecodeRoutine(reinterpret_cast<void*>(pc));
      if(bc != SIZE_OF_BYTECODE) {
        writer->WriteL("Bytecode ===========> %s:",GetBytecodeName(bc));
      } else {
        int idx = CheckHelperRoutine(reinterpret_cast<void*>(pc));
        if(idx >= 0) {
          writer->WriteL("Helper ===========> %s:",GetInterpHelperName(idx));
        }
      }
    }
    writer->WriteL("%016" PRIX64 " (%d) %s",pc,instr.length,buffer);
    rp += instr.length;
    size -= instr.length;
    pc += instr.length;
  }
}

AssemblyInterpreter::AssemblyInterpreter():
  dispatch_interp_ (),
  dispatch_profile_(),
  dispatch_jit_    (),
  interp_entry_    (),
  ic_entry_        (NULL),
  ic_abi_entry_    (NULL)
{
  std::shared_ptr<AssemblyInterpreterStub> stub(AssemblyInterpreterStub::GetInstance());
  lava_debug(NORMAL,lava_verify(stub););

  memcpy(dispatch_interp_,stub->dispatch_interp_,sizeof(dispatch_interp_));
  memcpy(dispatch_profile_,stub->dispatch_profile_,sizeof(dispatch_profile_));
  memcpy(dispatch_jit_   ,stub->dispatch_jit_   ,sizeof(dispatch_jit_   ));

  ic_entry_ = stub->ic_entry_;
  ic_abi_entry_ = stub->ic_abi_entry_;
  interp_entry_ = stub->interp_entry_;
}

bool AssemblyInterpreter::Run( Context* context , const Handle<Script>& script ,
                                                  const Handle<Object>& globals,
                                                  Value* rval ,
                                                  std::string* error ) {

  // Get the runtime object pointer
  Runtime* rt = context->gc()->GetInterpreterRuntime(script.ref(), globals.ref(), this , error);

  // Main function
  Handle<Prototype> main_proto(script->main());

  // Main function's closure
  Handle<Closure> cls(Closure::New(context->gc(),main_proto));

  // Entry of our assembly interpreter
  Main m = reinterpret_cast<Main>(interp_entry_);

  // Interpret the bytecode
  bool ret = m(rt, cls.ref(), (main_proto.ref()),
                              reinterpret_cast<void*>(rt->stack_begin),
                              const_cast<void*>(reinterpret_cast<const void*>(main_proto->code_buffer())),
                              dispatch_interp_);
  // Check return
  if(ret) *rval = rt->ret;

  context->gc()->ReturnInterpreterRuntime(rt);
  return ret;
}

} // namespace interpreter
} // namespace lavascript
